/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * CheckProductListingRequestBodySkusSalesAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingRequestBodySkusSalesAttributes {
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_NAME = "name";
    public static final String SERIALIZED_NAME_SKU_IMG = "sku_img";
    public static final String SERIALIZED_NAME_SUPPLEMENTARY_SKU_IMAGES = "supplementary_sku_images";
    public static final String SERIALIZED_NAME_VALUE_ID = "value_id";
    public static final String SERIALIZED_NAME_VALUE_NAME = "value_name";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("sku_img");
        openapiFields.add("supplementary_sku_images");
        openapiFields.add("value_id");
        openapiFields.add("value_name");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    @SerializedName(SERIALIZED_NAME_SKU_IMG)
    private CheckProductListingRequestBodySkusSalesAttributesSkuImg skuImg;
    @SerializedName(SERIALIZED_NAME_SUPPLEMENTARY_SKU_IMAGES)
    private List<CheckProductListingRequestBodySkusSalesAttributesSupplementarySkuImages> supplementarySkuImages = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_VALUE_ID)
    private String valueId;
    @SerializedName(SERIALIZED_NAME_VALUE_NAME)
    private String valueName;

    public CheckProductListingRequestBodySkusSalesAttributes() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingRequestBodySkusSalesAttributes
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingRequestBodySkusSalesAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingRequestBodySkusSalesAttributes is not found in the empty JSON string", CheckProductListingRequestBodySkusSalesAttributes.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingRequestBodySkusSalesAttributes.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingRequestBodySkusSalesAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        // validate the optional field `sku_img`
        if (jsonObj.get("sku_img") != null && !jsonObj.get("sku_img").isJsonNull()) {
            CheckProductListingRequestBodySkusSalesAttributesSkuImg.validateJsonElement(jsonObj.get("sku_img"));
        }
        if (jsonObj.get("supplementary_sku_images") != null && !jsonObj.get("supplementary_sku_images").isJsonNull()) {
            JsonArray jsonArraysupplementarySkuImages = jsonObj.getAsJsonArray("supplementary_sku_images");
            if (jsonArraysupplementarySkuImages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("supplementary_sku_images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `supplementary_sku_images` to be an array in the JSON string but got `%s`", jsonObj.get("supplementary_sku_images").toString()));
                }

                // validate the optional field `supplementary_sku_images` (array)
                for (int i = 0; i < jsonArraysupplementarySkuImages.size(); i++) {
                    CheckProductListingRequestBodySkusSalesAttributesSupplementarySkuImages.validateJsonElement(jsonArraysupplementarySkuImages.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("value_id") != null && !jsonObj.get("value_id").isJsonNull()) && !jsonObj.get("value_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `value_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_id").toString()));
        }
        if ((jsonObj.get("value_name") != null && !jsonObj.get("value_name").isJsonNull()) && !jsonObj.get("value_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `value_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_name").toString()));
        }
    }

    /**
     * Create an instance of CheckProductListingRequestBodySkusSalesAttributes given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingRequestBodySkusSalesAttributes
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingRequestBodySkusSalesAttributes
     */
    public static CheckProductListingRequestBodySkusSalesAttributes fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingRequestBodySkusSalesAttributes.class);
    }

    public CheckProductListingRequestBodySkusSalesAttributes id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The ID of a built-in sales attribute, retrieved from [Get Attributes API](https://partner.tiktokshop.com/docv2/page/6509c5784a0bb702c0561cc8).
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public CheckProductListingRequestBodySkusSalesAttributes name(String name) {
        this.name = name;
        return this;
    }

    /**
     * A self-defined custom sales attribute name if the built-in attributes do not satisfy your needs. The system will auto-generate an ID after listing.  **Note**:  - Do not include sensitive characters. - Max length: 20 characters
     *
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CheckProductListingRequestBodySkusSalesAttributes skuImg(CheckProductListingRequestBodySkusSalesAttributesSkuImg skuImg) {
        this.skuImg = skuImg;
        return this;
    }

    /**
     * Get skuImg
     *
     * @return skuImg
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodySkusSalesAttributesSkuImg getSkuImg() {
        return skuImg;
    }

    public void setSkuImg(CheckProductListingRequestBodySkusSalesAttributesSkuImg skuImg) {
        this.skuImg = skuImg;
    }

    public CheckProductListingRequestBodySkusSalesAttributes supplementarySkuImages(List<CheckProductListingRequestBodySkusSalesAttributesSupplementarySkuImages> supplementarySkuImages) {
        this.supplementarySkuImages = supplementarySkuImages;
        return this;
    }

    public CheckProductListingRequestBodySkusSalesAttributes addSupplementarySkuImagesItem(CheckProductListingRequestBodySkusSalesAttributesSupplementarySkuImages supplementarySkuImagesItem) {
        if (this.supplementarySkuImages == null) {
            this.supplementarySkuImages = new ArrayList<>();
        }
        this.supplementarySkuImages.add(supplementarySkuImagesItem);
        return this;
    }

    /**
     * A list of supplementary images for each value (e.g. red) of the primary sales attribute (e.g. color) to provide multiple views or details of the product for that attribute value. These appear in the product options gallery on TikTok Shop.  **Note**: - Max number of image URIs: 8. - Arrange your image URIs in the sequence that they should appear on TikTok Shop. - Applicable only for the US market.
     *
     * @return supplementarySkuImages
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodySkusSalesAttributesSupplementarySkuImages> getSupplementarySkuImages() {
        return supplementarySkuImages;
    }

    public void setSupplementarySkuImages(List<CheckProductListingRequestBodySkusSalesAttributesSupplementarySkuImages> supplementarySkuImages) {
        this.supplementarySkuImages = supplementarySkuImages;
    }

    public CheckProductListingRequestBodySkusSalesAttributes valueId(String valueId) {
        this.valueId = valueId;
        return this;
    }

    /**
     * The ID of a built-in sales attribute value, retrieved from the [Get Attributes API](https://partner.tiktokshop.com/docv2/page/6509c5784a0bb702c0561cc8).
     *
     * @return valueId
     **/
    @javax.annotation.Nullable
    public String getValueId() {
        return valueId;
    }

    public void setValueId(String valueId) {
        this.valueId = valueId;
    }

    public CheckProductListingRequestBodySkusSalesAttributes valueName(String valueName) {
        this.valueName = valueName;
        return this;
    }

    /**
     * A self-defined custom sales attribute value if the built-in values do not satisfy your needs. The system will auto-generate an ID after listing.  **Note**: - No duplicates allowed under the same attribute. - Max length: 50 characters.
     *
     * @return valueName
     **/
    @javax.annotation.Nullable
    public String getValueName() {
        return valueName;
    }

    public void setValueName(String valueName) {
        this.valueName = valueName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingRequestBodySkusSalesAttributes product202309CheckProductListingRequestBodySkusSalesAttributes = (CheckProductListingRequestBodySkusSalesAttributes) o;
        return Objects.equals(this.id, product202309CheckProductListingRequestBodySkusSalesAttributes.id) &&
            Objects.equals(this.name, product202309CheckProductListingRequestBodySkusSalesAttributes.name) &&
            Objects.equals(this.skuImg, product202309CheckProductListingRequestBodySkusSalesAttributes.skuImg) &&
            Objects.equals(this.supplementarySkuImages, product202309CheckProductListingRequestBodySkusSalesAttributes.supplementarySkuImages) &&
            Objects.equals(this.valueId, product202309CheckProductListingRequestBodySkusSalesAttributes.valueId) &&
            Objects.equals(this.valueName, product202309CheckProductListingRequestBodySkusSalesAttributes.valueName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, skuImg, supplementarySkuImages, valueId, valueName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingRequestBodySkusSalesAttributes {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    skuImg: ").append(toIndentedString(skuImg)).append("\n");
        sb.append("    supplementarySkuImages: ").append(toIndentedString(supplementarySkuImages)).append("\n");
        sb.append("    valueId: ").append(toIndentedString(valueId)).append("\n");
        sb.append("    valueName: ").append(toIndentedString(valueName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingRequestBodySkusSalesAttributes to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingRequestBodySkusSalesAttributes.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingRequestBodySkusSalesAttributes' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingRequestBodySkusSalesAttributes> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingRequestBodySkusSalesAttributes.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingRequestBodySkusSalesAttributes>() {
                @Override
                public void write(JsonWriter out, CheckProductListingRequestBodySkusSalesAttributes value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingRequestBodySkusSalesAttributes read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

