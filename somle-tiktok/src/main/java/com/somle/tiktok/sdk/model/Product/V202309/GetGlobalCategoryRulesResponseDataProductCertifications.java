/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetGlobalCategoryRulesResponseDataProductCertifications
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetGlobalCategoryRulesResponseDataProductCertifications {
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_IS_REQUIRED = "is_required";
    public static final String SERIALIZED_NAME_NAME = "name";
    public static final String SERIALIZED_NAME_OPTIONAL_REGIONS = "optional_regions";
    public static final String SERIALIZED_NAME_REQUIRED_REGIONS = "required_regions";
    public static final String SERIALIZED_NAME_REQUIREMENT_CONDITIONS = "requirement_conditions";
    public static final String SERIALIZED_NAME_SAMPLE_IMAGE_URL = "sample_image_url";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("is_required");
        openapiFields.add("name");
        openapiFields.add("optional_regions");
        openapiFields.add("required_regions");
        openapiFields.add("requirement_conditions");
        openapiFields.add("sample_image_url");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
    private Boolean isRequired;
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    @SerializedName(SERIALIZED_NAME_OPTIONAL_REGIONS)
    private List<String> optionalRegions = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_REQUIRED_REGIONS)
    private List<String> requiredRegions = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_REQUIREMENT_CONDITIONS)
    private List<GetGlobalCategoryRulesResponseDataProductCertificationsRequirementConditions> requirementConditions = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SAMPLE_IMAGE_URL)
    private String sampleImageUrl;

    public GetGlobalCategoryRulesResponseDataProductCertifications() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetGlobalCategoryRulesResponseDataProductCertifications
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetGlobalCategoryRulesResponseDataProductCertifications.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetGlobalCategoryRulesResponseDataProductCertifications is not found in the empty JSON string", GetGlobalCategoryRulesResponseDataProductCertifications.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetGlobalCategoryRulesResponseDataProductCertifications.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGlobalCategoryRulesResponseDataProductCertifications` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("optional_regions") != null && !jsonObj.get("optional_regions").isJsonNull() && !jsonObj.get("optional_regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `optional_regions` to be an array in the JSON string but got `%s`", jsonObj.get("optional_regions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("required_regions") != null && !jsonObj.get("required_regions").isJsonNull() && !jsonObj.get("required_regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `required_regions` to be an array in the JSON string but got `%s`", jsonObj.get("required_regions").toString()));
        }
        if (jsonObj.get("requirement_conditions") != null && !jsonObj.get("requirement_conditions").isJsonNull()) {
            JsonArray jsonArrayrequirementConditions = jsonObj.getAsJsonArray("requirement_conditions");
            if (jsonArrayrequirementConditions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("requirement_conditions").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `requirement_conditions` to be an array in the JSON string but got `%s`", jsonObj.get("requirement_conditions").toString()));
                }

                // validate the optional field `requirement_conditions` (array)
                for (int i = 0; i < jsonArrayrequirementConditions.size(); i++) {
                    GetGlobalCategoryRulesResponseDataProductCertificationsRequirementConditions.validateJsonElement(jsonArrayrequirementConditions.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("sample_image_url") != null && !jsonObj.get("sample_image_url").isJsonNull()) && !jsonObj.get("sample_image_url").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sample_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sample_image_url").toString()));
        }
    }

    /**
     * Create an instance of GetGlobalCategoryRulesResponseDataProductCertifications given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetGlobalCategoryRulesResponseDataProductCertifications
     * @throws IOException if the JSON string is invalid with respect to GetGlobalCategoryRulesResponseDataProductCertifications
     */
    public static GetGlobalCategoryRulesResponseDataProductCertifications fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetGlobalCategoryRulesResponseDataProductCertifications.class);
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The ID to identify the type of certification required.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications isRequired(Boolean isRequired) {
        this.isRequired = isRequired;
        return this;
    }

    /**
     * A flag to indicate if the certification is required **globally**. - true: The certification is required in all regions. - false: The certification is required only in some regions, or if certain conditions are met. Refer to &#x60;required_regions&#x60; and &#x60;requirement_conditions&#x60; for the specific requirements.
     *
     * @return isRequired
     **/
    @javax.annotation.Nullable
    public Boolean getIsRequired() {
        return isRequired;
    }

    public void setIsRequired(Boolean isRequired) {
        this.isRequired = isRequired;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the certification type.
     *
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications optionalRegions(List<String> optionalRegions) {
        this.optionalRegions = optionalRegions;
        return this;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications addOptionalRegionsItem(String optionalRegionsItem) {
        if (this.optionalRegions == null) {
            this.optionalRegions = new ArrayList<>();
        }
        this.optionalRegions.add(optionalRegionsItem);
        return this;
    }

    /**
     * The markets where the certification is purely optional, or required only under certain conditions. Refer to &#x60;requirement_conditions&#x60; for details on markets with conditional requirements.  Possible values: - DE: Germany - ES: Spain - FR: France - GB: United Kingdom - ID: Indonesia - IT: Italy - IE: Ireland - JP: Japan - MY: Malaysia - PH: Philippines - SG: Singapore - TH: Thailand - US: United States - VN: Vietnam  Applicable only if &#x60;is_required&#x3D;false&#x60;.
     *
     * @return optionalRegions
     **/
    @javax.annotation.Nullable
    public List<String> getOptionalRegions() {
        return optionalRegions;
    }

    public void setOptionalRegions(List<String> optionalRegions) {
        this.optionalRegions = optionalRegions;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications requiredRegions(List<String> requiredRegions) {
        this.requiredRegions = requiredRegions;
        return this;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications addRequiredRegionsItem(String requiredRegionsItem) {
        if (this.requiredRegions == null) {
            this.requiredRegions = new ArrayList<>();
        }
        this.requiredRegions.add(requiredRegionsItem);
        return this;
    }

    /**
     * The markets where the certification is required, without conditions. Possible values: - DE: Germany - ES: Spain - FR: France - GB: United Kingdom - ID: Indonesia - IT: Italy - IE: Ireland - JP: Japan - MY: Malaysia - PH: Philippines - SG: Singapore - TH: Thailand - US: United States - VN: Vietnam  Applicable only if &#x60;is_required&#x3D;false&#x60;.
     *
     * @return requiredRegions
     **/
    @javax.annotation.Nullable
    public List<String> getRequiredRegions() {
        return requiredRegions;
    }

    public void setRequiredRegions(List<String> requiredRegions) {
        this.requiredRegions = requiredRegions;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications requirementConditions(List<GetGlobalCategoryRulesResponseDataProductCertificationsRequirementConditions> requirementConditions) {
        this.requirementConditions = requirementConditions;
        return this;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications addRequirementConditionsItem(GetGlobalCategoryRulesResponseDataProductCertificationsRequirementConditions requirementConditionsItem) {
        if (this.requirementConditions == null) {
            this.requirementConditions = new ArrayList<>();
        }
        this.requirementConditions.add(requirementConditionsItem);
        return this;
    }

    /**
     * A list of conditions that determine if the certification is required in a market based on the seller&#39;s inputs for a product attribute. If any of the conditions is met, the certification is required; otherwise, it is optional.  For example, there&#39;s a condition that states that the \&quot;Safety Data Sheet (SDS) for flammable materials\&quot; certification is required if the seller selects the value \&quot;Yes\&quot; for the attribute \&quot;Flammable Liquid?\&quot;. For more scenario-based guidance on using this parameter, refer to the [Solution Guide](https://partner.tiktokshop.com/openlearn/guide/usecase?parent_id&#x3D;7256668359046153985).  Applicable only if &#x60;optional_regions&#x60; is not empty.
     *
     * @return requirementConditions
     **/
    @javax.annotation.Nullable
    public List<GetGlobalCategoryRulesResponseDataProductCertificationsRequirementConditions> getRequirementConditions() {
        return requirementConditions;
    }

    public void setRequirementConditions(List<GetGlobalCategoryRulesResponseDataProductCertificationsRequirementConditions> requirementConditions) {
        this.requirementConditions = requirementConditions;
    }

    public GetGlobalCategoryRulesResponseDataProductCertifications sampleImageUrl(String sampleImageUrl) {
        this.sampleImageUrl = sampleImageUrl;
        return this;
    }

    /**
     * The URL to view an image of the sample certification document.
     *
     * @return sampleImageUrl
     **/
    @javax.annotation.Nullable
    public String getSampleImageUrl() {
        return sampleImageUrl;
    }

    public void setSampleImageUrl(String sampleImageUrl) {
        this.sampleImageUrl = sampleImageUrl;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetGlobalCategoryRulesResponseDataProductCertifications product202309GetGlobalCategoryRulesResponseDataProductCertifications = (GetGlobalCategoryRulesResponseDataProductCertifications) o;
        return Objects.equals(this.id, product202309GetGlobalCategoryRulesResponseDataProductCertifications.id) &&
            Objects.equals(this.isRequired, product202309GetGlobalCategoryRulesResponseDataProductCertifications.isRequired) &&
            Objects.equals(this.name, product202309GetGlobalCategoryRulesResponseDataProductCertifications.name) &&
            Objects.equals(this.optionalRegions, product202309GetGlobalCategoryRulesResponseDataProductCertifications.optionalRegions) &&
            Objects.equals(this.requiredRegions, product202309GetGlobalCategoryRulesResponseDataProductCertifications.requiredRegions) &&
            Objects.equals(this.requirementConditions, product202309GetGlobalCategoryRulesResponseDataProductCertifications.requirementConditions) &&
            Objects.equals(this.sampleImageUrl, product202309GetGlobalCategoryRulesResponseDataProductCertifications.sampleImageUrl);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, isRequired, name, optionalRegions, requiredRegions, requirementConditions, sampleImageUrl);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetGlobalCategoryRulesResponseDataProductCertifications {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    optionalRegions: ").append(toIndentedString(optionalRegions)).append("\n");
        sb.append("    requiredRegions: ").append(toIndentedString(requiredRegions)).append("\n");
        sb.append("    requirementConditions: ").append(toIndentedString(requirementConditions)).append("\n");
        sb.append("    sampleImageUrl: ").append(toIndentedString(sampleImageUrl)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetGlobalCategoryRulesResponseDataProductCertifications to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetGlobalCategoryRulesResponseDataProductCertifications.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetGlobalCategoryRulesResponseDataProductCertifications' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetGlobalCategoryRulesResponseDataProductCertifications> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetGlobalCategoryRulesResponseDataProductCertifications.class));

            return (TypeAdapter<T>) new TypeAdapter<GetGlobalCategoryRulesResponseDataProductCertifications>() {
                @Override
                public void write(JsonWriter out, GetGlobalCategoryRulesResponseDataProductCertifications value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetGlobalCategoryRulesResponseDataProductCertifications read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

