/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * CreateGlobalProductRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CreateGlobalProductRequestBody {
    public static final String SERIALIZED_NAME_BRAND_ID = "brand_id";
    public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
    public static final String SERIALIZED_NAME_CATEGORY_VERSION = "category_version";
    public static final String SERIALIZED_NAME_CERTIFICATIONS = "certifications";
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    public static final String SERIALIZED_NAME_EXTERNAL_GLOBAL_PRODUCT_ID = "external_global_product_id";
    public static final String SERIALIZED_NAME_MAIN_IMAGES = "main_images";
    public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
    public static final String SERIALIZED_NAME_MANUFACTURER_IDS = "manufacturer_ids";
    public static final String SERIALIZED_NAME_PACKAGE_DIMENSIONS = "package_dimensions";
    public static final String SERIALIZED_NAME_PACKAGE_WEIGHT = "package_weight";
    public static final String SERIALIZED_NAME_PRODUCT_ATTRIBUTES = "product_attributes";
    public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS = "responsible_person_ids";
    public static final String SERIALIZED_NAME_SIZE_CHART = "size_chart";
    public static final String SERIALIZED_NAME_SKUS = "skus";
    public static final String SERIALIZED_NAME_SOURCE_LOCALE = "source_locale";
    public static final String SERIALIZED_NAME_TITLE = "title";
    public static final String SERIALIZED_NAME_VIDEO = "video";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("brand_id");
        openapiFields.add("category_id");
        openapiFields.add("category_version");
        openapiFields.add("certifications");
        openapiFields.add("description");
        openapiFields.add("external_global_product_id");
        openapiFields.add("main_images");
        openapiFields.add("manufacturer");
        openapiFields.add("manufacturer_ids");
        openapiFields.add("package_dimensions");
        openapiFields.add("package_weight");
        openapiFields.add("product_attributes");
        openapiFields.add("responsible_person_ids");
        openapiFields.add("size_chart");
        openapiFields.add("skus");
        openapiFields.add("source_locale");
        openapiFields.add("title");
        openapiFields.add("video");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_BRAND_ID)
    private String brandId;
    @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
    private String categoryId;
    @SerializedName(SERIALIZED_NAME_CATEGORY_VERSION)
    private String categoryVersion;
    @SerializedName(SERIALIZED_NAME_CERTIFICATIONS)
    private List<CreateGlobalProductRequestBodyCertifications> certifications = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    @SerializedName(SERIALIZED_NAME_EXTERNAL_GLOBAL_PRODUCT_ID)
    private String externalGlobalProductId;
    @SerializedName(SERIALIZED_NAME_MAIN_IMAGES)
    private List<CreateGlobalProductRequestBodyMainImages> mainImages = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_MANUFACTURER)
    private CreateGlobalProductRequestBodyManufacturer manufacturer;
    @SerializedName(SERIALIZED_NAME_MANUFACTURER_IDS)
    private List<String> manufacturerIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_PACKAGE_DIMENSIONS)
    private CreateGlobalProductRequestBodyPackageDimensions packageDimensions;
    @SerializedName(SERIALIZED_NAME_PACKAGE_WEIGHT)
    private CreateGlobalProductRequestBodyPackageWeight packageWeight;
    @SerializedName(SERIALIZED_NAME_PRODUCT_ATTRIBUTES)
    private List<CreateGlobalProductRequestBodyProductAttributes> productAttributes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS)
    private List<String> responsiblePersonIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SIZE_CHART)
    private CreateGlobalProductRequestBodySizeChart sizeChart;
    @SerializedName(SERIALIZED_NAME_SKUS)
    private List<CreateGlobalProductRequestBodySkus> skus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SOURCE_LOCALE)
    private String sourceLocale;
    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;
    @SerializedName(SERIALIZED_NAME_VIDEO)
    private CreateGlobalProductRequestBodyVideo video;

    public CreateGlobalProductRequestBody() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateGlobalProductRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateGlobalProductRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CreateGlobalProductRequestBody is not found in the empty JSON string", CreateGlobalProductRequestBody.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateGlobalProductRequestBody.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateGlobalProductRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("brand_id") != null && !jsonObj.get("brand_id").isJsonNull()) && !jsonObj.get("brand_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `brand_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_id").toString()));
        }
        if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
        }
        if ((jsonObj.get("category_version") != null && !jsonObj.get("category_version").isJsonNull()) && !jsonObj.get("category_version").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `category_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_version").toString()));
        }
        if (jsonObj.get("certifications") != null && !jsonObj.get("certifications").isJsonNull()) {
            JsonArray jsonArraycertifications = jsonObj.getAsJsonArray("certifications");
            if (jsonArraycertifications != null) {
                // ensure the json data is an array
                if (!jsonObj.get("certifications").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `certifications` to be an array in the JSON string but got `%s`", jsonObj.get("certifications").toString()));
                }

                // validate the optional field `certifications` (array)
                for (int i = 0; i < jsonArraycertifications.size(); i++) {
                    CreateGlobalProductRequestBodyCertifications.validateJsonElement(jsonArraycertifications.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("external_global_product_id") != null && !jsonObj.get("external_global_product_id").isJsonNull()) && !jsonObj.get("external_global_product_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_global_product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_global_product_id").toString()));
        }
        if (jsonObj.get("main_images") != null && !jsonObj.get("main_images").isJsonNull()) {
            JsonArray jsonArraymainImages = jsonObj.getAsJsonArray("main_images");
            if (jsonArraymainImages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("main_images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `main_images` to be an array in the JSON string but got `%s`", jsonObj.get("main_images").toString()));
                }

                // validate the optional field `main_images` (array)
                for (int i = 0; i < jsonArraymainImages.size(); i++) {
                    CreateGlobalProductRequestBodyMainImages.validateJsonElement(jsonArraymainImages.get(i));
                }
                ;
            }
        }
        // validate the optional field `manufacturer`
        if (jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) {
            CreateGlobalProductRequestBodyManufacturer.validateJsonElement(jsonObj.get("manufacturer"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("manufacturer_ids") != null && !jsonObj.get("manufacturer_ids").isJsonNull() && !jsonObj.get("manufacturer_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manufacturer_ids` to be an array in the JSON string but got `%s`", jsonObj.get("manufacturer_ids").toString()));
        }
        // validate the optional field `package_dimensions`
        if (jsonObj.get("package_dimensions") != null && !jsonObj.get("package_dimensions").isJsonNull()) {
            CreateGlobalProductRequestBodyPackageDimensions.validateJsonElement(jsonObj.get("package_dimensions"));
        }
        // validate the optional field `package_weight`
        if (jsonObj.get("package_weight") != null && !jsonObj.get("package_weight").isJsonNull()) {
            CreateGlobalProductRequestBodyPackageWeight.validateJsonElement(jsonObj.get("package_weight"));
        }
        if (jsonObj.get("product_attributes") != null && !jsonObj.get("product_attributes").isJsonNull()) {
            JsonArray jsonArrayproductAttributes = jsonObj.getAsJsonArray("product_attributes");
            if (jsonArrayproductAttributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("product_attributes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `product_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("product_attributes").toString()));
                }

                // validate the optional field `product_attributes` (array)
                for (int i = 0; i < jsonArrayproductAttributes.size(); i++) {
                    CreateGlobalProductRequestBodyProductAttributes.validateJsonElement(jsonArrayproductAttributes.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("responsible_person_ids") != null && !jsonObj.get("responsible_person_ids").isJsonNull() && !jsonObj.get("responsible_person_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responsible_person_ids` to be an array in the JSON string but got `%s`", jsonObj.get("responsible_person_ids").toString()));
        }
        // validate the optional field `size_chart`
        if (jsonObj.get("size_chart") != null && !jsonObj.get("size_chart").isJsonNull()) {
            CreateGlobalProductRequestBodySizeChart.validateJsonElement(jsonObj.get("size_chart"));
        }
        if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonNull()) {
            JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
            if (jsonArrayskus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
                }

                // validate the optional field `skus` (array)
                for (int i = 0; i < jsonArrayskus.size(); i++) {
                    CreateGlobalProductRequestBodySkus.validateJsonElement(jsonArrayskus.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("source_locale") != null && !jsonObj.get("source_locale").isJsonNull()) && !jsonObj.get("source_locale").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `source_locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_locale").toString()));
        }
        if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
        }
        // validate the optional field `video`
        if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
            CreateGlobalProductRequestBodyVideo.validateJsonElement(jsonObj.get("video"));
        }
    }

    /**
     * Create an instance of CreateGlobalProductRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateGlobalProductRequestBody
     * @throws IOException if the JSON string is invalid with respect to CreateGlobalProductRequestBody
     */
    public static CreateGlobalProductRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateGlobalProductRequestBody.class);
    }

    public CreateGlobalProductRequestBody brandId(String brandId) {
        this.brandId = brandId;
        return this;
    }

    /**
     * The ID of the brand of this product.   **Note**: Unauthorized brands won&#39;t be displayed on TikTok Shop.
     *
     * @return brandId
     **/
    @javax.annotation.Nullable
    public String getBrandId() {
        return brandId;
    }

    public void setBrandId(String brandId) {
        this.brandId = brandId;
    }

    public CreateGlobalProductRequestBody categoryId(String categoryId) {
        this.categoryId = categoryId;
        return this;
    }

    /**
     * The ID of the category of this product.  - It must be a leaf category that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.  - It must be a main category (&#x60;categories.permission_statuses&#x3D;AVAILABLE&#x60; in [Get Global Categories API](650a03f8f1fd3102b91b338a)). **Note**: Refer to TikTok Shop Academy for information on product category restrictions.
     *
     * @return categoryId
     **/
    @javax.annotation.Nullable
    public String getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(String categoryId) {
        this.categoryId = categoryId;
    }

    public CreateGlobalProductRequestBody categoryVersion(String categoryVersion) {
        this.categoryVersion = categoryVersion;
        return this;
    }

    /**
     * The category tree version to assign this product to. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60;
     *
     * @return categoryVersion
     **/
    @javax.annotation.Nullable
    public String getCategoryVersion() {
        return categoryVersion;
    }

    public void setCategoryVersion(String categoryVersion) {
        this.categoryVersion = categoryVersion;
    }

    public CreateGlobalProductRequestBody certifications(List<CreateGlobalProductRequestBodyCertifications> certifications) {
        this.certifications = certifications;
        return this;
    }

    public CreateGlobalProductRequestBody addCertificationsItem(CreateGlobalProductRequestBodyCertifications certificationsItem) {
        if (this.certifications == null) {
            this.certifications = new ArrayList<>();
        }
        this.certifications.add(certificationsItem);
        return this;
    }

    /**
     * The list of certifications for your product. Max count: 10  As per TikTok Shop guidelines, certifications are required for certain restricted product categories. Retrieve the certification requirements for your product from the  [Get Global Category Rules API](https://partner.tiktokshop.com/docv2/page/650a056df1fd3102b91b5b8e). Refer to [TikTok Shop Restricted Products Policy](https://seller-us.tiktok.com/university/essay?identity&#x3D;1&amp;role&#x3D;1&amp;knowledge_id&#x3D;3238037484275457&amp;from&#x3D;policy) for information on product category restrictions.
     *
     * @return certifications
     **/
    @javax.annotation.Nullable
    public List<CreateGlobalProductRequestBodyCertifications> getCertifications() {
        return certifications;
    }

    public void setCertifications(List<CreateGlobalProductRequestBodyCertifications> certifications) {
        this.certifications = certifications;
    }

    public CreateGlobalProductRequestBody description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The product description in HTML format.  **Note**: - The content must conform to the [HTML syntax](https://html.spec.whatwg.org/). All HTML tags are accepted but to optimize display on the TikTok Shop product detail page, the system will automatically convert certain tags into alternative formats, such as rendering &#x60;&lt;table&gt;&#x60; tags as images. - Max length: 10,000 characters. - Image guidelines: You must use [TikTok Shop image URLs](6509df95defece02be598a22). Max 30 &#x60;&lt;img&gt;&#x60; tags, each under 4000px with &#x60;src&#x60;, &#x60;width&#x60;, and &#x60;height&#x60; attributes.  **Recommendations**:  - If you are syncing a pre-existing description from another platform, include the full HTML source description here. - Provide a detailed description, ideally over 300 characters. - Include 3-5 key selling points, each under 250 characters, with supporting images. - Use 1600x1600 px for the image dimensions.
     *
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CreateGlobalProductRequestBody externalGlobalProductId(String externalGlobalProductId) {
        this.externalGlobalProductId = externalGlobalProductId;
        return this;
    }

    /**
     * An external identifier used in an external ecommerce platform. This is used to associate the global product between TikTok Shop and the external ecommerce platform.  Max length: 999 characters
     *
     * @return externalGlobalProductId
     **/
    @javax.annotation.Nullable
    public String getExternalGlobalProductId() {
        return externalGlobalProductId;
    }

    public void setExternalGlobalProductId(String externalGlobalProductId) {
        this.externalGlobalProductId = externalGlobalProductId;
    }

    public CreateGlobalProductRequestBody mainImages(List<CreateGlobalProductRequestBodyMainImages> mainImages) {
        this.mainImages = mainImages;
        return this;
    }

    public CreateGlobalProductRequestBody addMainImagesItem(CreateGlobalProductRequestBodyMainImages mainImagesItem) {
        if (this.mainImages == null) {
            this.mainImages = new ArrayList<>();
        }
        this.mainImages.add(mainImagesItem);
        return this;
    }

    /**
     * A list of images to display in the product image gallery. - Max count: 9 - Arrange your image URIs in the sequence that they should appear on TikTok Shop. - Image dimensions: [300x300 px, 4000x4000 px]    **Recommendations**: - Use a minimum of 5 images. - The first image should have a white background. Use the [Optimize Images API](https://partner.tiktokshop.com/docv2/page/665692b35d39dc02deb49a97) to change the background to white.
     *
     * @return mainImages
     **/
    @javax.annotation.Nullable
    public List<CreateGlobalProductRequestBodyMainImages> getMainImages() {
        return mainImages;
    }

    public void setMainImages(List<CreateGlobalProductRequestBodyMainImages> mainImages) {
        this.mainImages = mainImages;
    }

    public CreateGlobalProductRequestBody manufacturer(CreateGlobalProductRequestBodyManufacturer manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get manufacturer
     *
     * @return manufacturer
     **/
    @javax.annotation.Nullable
    public CreateGlobalProductRequestBodyManufacturer getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(CreateGlobalProductRequestBodyManufacturer manufacturer) {
        this.manufacturer = manufacturer;
    }

    public CreateGlobalProductRequestBody manufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
        return this;
    }

    public CreateGlobalProductRequestBody addManufacturerIdsItem(String manufacturerIdsItem) {
        if (this.manufacturerIds == null) {
            this.manufacturerIds = new ArrayList<>();
        }
        this.manufacturerIds.add(manufacturerIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of manufacturer IDs. Retrieve the IDs from the [Search Manufacturers API](67066a580dcee902fa03ccf9). **Note**: Applicable only for the EU market in certain categories. Use the [Get Global Category Rules API](650a056df1fd3102b91b5b8e) to check the requirements.
     *
     * @return manufacturerIds
     **/
    @javax.annotation.Nullable
    public List<String> getManufacturerIds() {
        return manufacturerIds;
    }

    public void setManufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
    }

    public CreateGlobalProductRequestBody packageDimensions(CreateGlobalProductRequestBodyPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
        return this;
    }

    /**
     * Get packageDimensions
     *
     * @return packageDimensions
     **/
    @javax.annotation.Nullable
    public CreateGlobalProductRequestBodyPackageDimensions getPackageDimensions() {
        return packageDimensions;
    }

    public void setPackageDimensions(CreateGlobalProductRequestBodyPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
    }

    public CreateGlobalProductRequestBody packageWeight(CreateGlobalProductRequestBodyPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
        return this;
    }

    /**
     * Get packageWeight
     *
     * @return packageWeight
     **/
    @javax.annotation.Nullable
    public CreateGlobalProductRequestBodyPackageWeight getPackageWeight() {
        return packageWeight;
    }

    public void setPackageWeight(CreateGlobalProductRequestBodyPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
    }

    public CreateGlobalProductRequestBody productAttributes(List<CreateGlobalProductRequestBodyProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
        return this;
    }

    public CreateGlobalProductRequestBody addProductAttributesItem(CreateGlobalProductRequestBodyProductAttributes productAttributesItem) {
        if (this.productAttributes == null) {
            this.productAttributes = new ArrayList<>();
        }
        this.productAttributes.add(productAttributesItem);
        return this;
    }

    /**
     * A list of general attributes (e.g. manufacturer, country of origin, materials used) that describe the product as a whole, regardless of variant.  **Important**: The attributes available for use are determined by the system based on the product&#39;s assigned category, with some being mandatory. You must provide the product attributes marked as &#x60;is_required&#x60; in the response of the [Get Global Attributes API](https://partner.tiktokshop.com/docv2/page/650a0483c16ffe02b8dfc80a).
     *
     * @return productAttributes
     **/
    @javax.annotation.Nullable
    public List<CreateGlobalProductRequestBodyProductAttributes> getProductAttributes() {
        return productAttributes;
    }

    public void setProductAttributes(List<CreateGlobalProductRequestBodyProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
    }

    public CreateGlobalProductRequestBody responsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
        return this;
    }

    public CreateGlobalProductRequestBody addResponsiblePersonIdsItem(String responsiblePersonIdsItem) {
        if (this.responsiblePersonIds == null) {
            this.responsiblePersonIds = new ArrayList<>();
        }
        this.responsiblePersonIds.add(responsiblePersonIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of responsible person IDs. Retrieve the IDs from the [Search Responsible Persons API](67066a55f17b7d02f95d2fb1). **Note**: Applicable only for the EU market in certain categories. Use the [Get Global Category Rules API](650a056df1fd3102b91b5b8e) to check the requirements.
     *
     * @return responsiblePersonIds
     **/
    @javax.annotation.Nullable
    public List<String> getResponsiblePersonIds() {
        return responsiblePersonIds;
    }

    public void setResponsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
    }

    public CreateGlobalProductRequestBody sizeChart(CreateGlobalProductRequestBodySizeChart sizeChart) {
        this.sizeChart = sizeChart;
        return this;
    }

    /**
     * Get sizeChart
     *
     * @return sizeChart
     **/
    @javax.annotation.Nullable
    public CreateGlobalProductRequestBodySizeChart getSizeChart() {
        return sizeChart;
    }

    public void setSizeChart(CreateGlobalProductRequestBodySizeChart sizeChart) {
        this.sizeChart = sizeChart;
    }

    public CreateGlobalProductRequestBody skus(List<CreateGlobalProductRequestBodySkus> skus) {
        this.skus = skus;
        return this;
    }

    public CreateGlobalProductRequestBody addSkusItem(CreateGlobalProductRequestBodySkus skusItem) {
        if (this.skus == null) {
            this.skus = new ArrayList<>();
        }
        this.skus.add(skusItem);
        return this;
    }

    /**
     * A list of global Stock Keeping Units (SKUs) used to identify distinct variants of the product.  **Note**: - Max SKUs for EU, JP, UK, US: 300 - Max SKUs for other regions: 100  **Recommendations**: Place the most important variant at the beginning of the array.
     *
     * @return skus
     **/
    @javax.annotation.Nullable
    public List<CreateGlobalProductRequestBodySkus> getSkus() {
        return skus;
    }

    public void setSkus(List<CreateGlobalProductRequestBodySkus> skus) {
        this.skus = skus;
    }

    public CreateGlobalProductRequestBody sourceLocale(String sourceLocale) {
        this.sourceLocale = sourceLocale;
        return this;
    }

    /**
     * The BCP-47 locale code representing the source language used for specifying the product information. Default: en-US Possible values: - de-DE - en-IE - es-ES - fr-FR - it-IT  **Note**:  - Applicable only for intra-EU sellers. Other sellers can ignore this field and provide the product information in English. - The information provided will be automatically translated into all EU languages supported by TikTok Shop. Ensure the locale matches the language used in field values to avoid inaccurate translations.
     *
     * @return sourceLocale
     **/
    @javax.annotation.Nullable
    public String getSourceLocale() {
        return sourceLocale;
    }

    public void setSourceLocale(String sourceLocale) {
        this.sourceLocale = sourceLocale;
    }

    public CreateGlobalProductRequestBody title(String title) {
        this.title = title;
        return this;
    }

    /**
     * The product title.  Title length: - DE, ES, FR, IE, IT, JP, UK, US: [1, 255]  - Other regions: [25, 255]
     *
     * @return title
     **/
    @javax.annotation.Nullable
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public CreateGlobalProductRequestBody video(CreateGlobalProductRequestBodyVideo video) {
        this.video = video;
        return this;
    }

    /**
     * Get video
     *
     * @return video
     **/
    @javax.annotation.Nullable
    public CreateGlobalProductRequestBodyVideo getVideo() {
        return video;
    }

    public void setVideo(CreateGlobalProductRequestBodyVideo video) {
        this.video = video;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateGlobalProductRequestBody product202309CreateGlobalProductRequestBody = (CreateGlobalProductRequestBody) o;
        return Objects.equals(this.brandId, product202309CreateGlobalProductRequestBody.brandId) &&
            Objects.equals(this.categoryId, product202309CreateGlobalProductRequestBody.categoryId) &&
            Objects.equals(this.categoryVersion, product202309CreateGlobalProductRequestBody.categoryVersion) &&
            Objects.equals(this.certifications, product202309CreateGlobalProductRequestBody.certifications) &&
            Objects.equals(this.description, product202309CreateGlobalProductRequestBody.description) &&
            Objects.equals(this.externalGlobalProductId, product202309CreateGlobalProductRequestBody.externalGlobalProductId) &&
            Objects.equals(this.mainImages, product202309CreateGlobalProductRequestBody.mainImages) &&
            Objects.equals(this.manufacturer, product202309CreateGlobalProductRequestBody.manufacturer) &&
            Objects.equals(this.manufacturerIds, product202309CreateGlobalProductRequestBody.manufacturerIds) &&
            Objects.equals(this.packageDimensions, product202309CreateGlobalProductRequestBody.packageDimensions) &&
            Objects.equals(this.packageWeight, product202309CreateGlobalProductRequestBody.packageWeight) &&
            Objects.equals(this.productAttributes, product202309CreateGlobalProductRequestBody.productAttributes) &&
            Objects.equals(this.responsiblePersonIds, product202309CreateGlobalProductRequestBody.responsiblePersonIds) &&
            Objects.equals(this.sizeChart, product202309CreateGlobalProductRequestBody.sizeChart) &&
            Objects.equals(this.skus, product202309CreateGlobalProductRequestBody.skus) &&
            Objects.equals(this.sourceLocale, product202309CreateGlobalProductRequestBody.sourceLocale) &&
            Objects.equals(this.title, product202309CreateGlobalProductRequestBody.title) &&
            Objects.equals(this.video, product202309CreateGlobalProductRequestBody.video);
    }

    @Override
    public int hashCode() {
        return Objects.hash(brandId, categoryId, categoryVersion, certifications, description, externalGlobalProductId, mainImages, manufacturer, manufacturerIds, packageDimensions, packageWeight, productAttributes, responsiblePersonIds, sizeChart, skus, sourceLocale, title, video);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateGlobalProductRequestBody {\n");
        sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
        sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
        sb.append("    categoryVersion: ").append(toIndentedString(categoryVersion)).append("\n");
        sb.append("    certifications: ").append(toIndentedString(certifications)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    externalGlobalProductId: ").append(toIndentedString(externalGlobalProductId)).append("\n");
        sb.append("    mainImages: ").append(toIndentedString(mainImages)).append("\n");
        sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
        sb.append("    manufacturerIds: ").append(toIndentedString(manufacturerIds)).append("\n");
        sb.append("    packageDimensions: ").append(toIndentedString(packageDimensions)).append("\n");
        sb.append("    packageWeight: ").append(toIndentedString(packageWeight)).append("\n");
        sb.append("    productAttributes: ").append(toIndentedString(productAttributes)).append("\n");
        sb.append("    responsiblePersonIds: ").append(toIndentedString(responsiblePersonIds)).append("\n");
        sb.append("    sizeChart: ").append(toIndentedString(sizeChart)).append("\n");
        sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
        sb.append("    sourceLocale: ").append(toIndentedString(sourceLocale)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    video: ").append(toIndentedString(video)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CreateGlobalProductRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateGlobalProductRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateGlobalProductRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateGlobalProductRequestBody> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CreateGlobalProductRequestBody.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateGlobalProductRequestBody>() {
                @Override
                public void write(JsonWriter out, CreateGlobalProductRequestBody value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CreateGlobalProductRequestBody read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

