/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * SearchProductsRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class SearchProductsRequestBody {
    public static final String SERIALIZED_NAME_CREATE_TIME_GE = "create_time_ge";
    public static final String SERIALIZED_NAME_CREATE_TIME_LE = "create_time_le";
    public static final String SERIALIZED_NAME_SELLER_SKUS = "seller_skus";
    public static final String SERIALIZED_NAME_STATUS = "status";
    public static final String SERIALIZED_NAME_UPDATE_TIME_GE = "update_time_ge";
    public static final String SERIALIZED_NAME_UPDATE_TIME_LE = "update_time_le";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("create_time_ge");
        openapiFields.add("create_time_le");
        openapiFields.add("seller_skus");
        openapiFields.add("status");
        openapiFields.add("update_time_ge");
        openapiFields.add("update_time_le");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_CREATE_TIME_GE)
    private Long createTimeGe;
    @SerializedName(SERIALIZED_NAME_CREATE_TIME_LE)
    private Long createTimeLe;
    @SerializedName(SERIALIZED_NAME_SELLER_SKUS)
    private List<String> sellerSkus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;
    @SerializedName(SERIALIZED_NAME_UPDATE_TIME_GE)
    private Long updateTimeGe;
    @SerializedName(SERIALIZED_NAME_UPDATE_TIME_LE)
    private Long updateTimeLe;

    public SearchProductsRequestBody() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SearchProductsRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SearchProductsRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in SearchProductsRequestBody is not found in the empty JSON string", SearchProductsRequestBody.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SearchProductsRequestBody.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchProductsRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("seller_skus") != null && !jsonObj.get("seller_skus").isJsonNull() && !jsonObj.get("seller_skus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_skus` to be an array in the JSON string but got `%s`", jsonObj.get("seller_skus").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
        }
    }

    /**
     * Create an instance of SearchProductsRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SearchProductsRequestBody
     * @throws IOException if the JSON string is invalid with respect to SearchProductsRequestBody
     */
    public static SearchProductsRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SearchProductsRequestBody.class);
    }

    public SearchProductsRequestBody createTimeGe(Long createTimeGe) {
        this.createTimeGe = createTimeGe;
        return this;
    }

    /**
     * Filter products to show only those that are created on or after the specified date and time. Unix timestamp. Note: The \&quot;create_time_ge\&quot; and \&quot;create_time_le\&quot; together constitute the creation time filter condition. - If \&quot;create_time_ge\&quot; is filled but \&quot;create_time_le\&quot; is empty, \&quot;create_time_le\&quot; will default to the current time. - If \&quot;create_time_le\&quot; is filled but \&quot;create_time_ge\&quot; is empty, \&quot;create_time_ge\&quot; will default to the earliest shop time.
     *
     * @return createTimeGe
     **/
    @javax.annotation.Nullable
    public Long getCreateTimeGe() {
        return createTimeGe;
    }

    public void setCreateTimeGe(Long createTimeGe) {
        this.createTimeGe = createTimeGe;
    }

    public SearchProductsRequestBody createTimeLe(Long createTimeLe) {
        this.createTimeLe = createTimeLe;
        return this;
    }

    /**
     * Filter products to show only those that are created on or before the specified date and time. Unix timestamp. Refer to notes in \&quot;create_time_ge\&quot; for more usage information.
     *
     * @return createTimeLe
     **/
    @javax.annotation.Nullable
    public Long getCreateTimeLe() {
        return createTimeLe;
    }

    public void setCreateTimeLe(Long createTimeLe) {
        this.createTimeLe = createTimeLe;
    }

    public SearchProductsRequestBody sellerSkus(List<String> sellerSkus) {
        this.sellerSkus = sellerSkus;
        return this;
    }

    public SearchProductsRequestBody addSellerSkusItem(String sellerSkusItem) {
        if (this.sellerSkus == null) {
            this.sellerSkus = new ArrayList<>();
        }
        this.sellerSkus.add(sellerSkusItem);
        return this;
    }

    /**
     * Filter products by these seller SKU codes.
     *
     * @return sellerSkus
     **/
    @javax.annotation.Nullable
    public List<String> getSellerSkus() {
        return sellerSkus;
    }

    public void setSellerSkus(List<String> sellerSkus) {
        this.sellerSkus = sellerSkus;
    }

    public SearchProductsRequestBody status(String status) {
        this.status = status;
        return this;
    }

    /**
     * Filter products by their status. Default: ALL Possible values:  - ALL - DRAFT - PENDING - FAILED - ACTIVATE - SELLER_DEACTIVATED - PLATFORM_DEACTIVATED - FREEZE - DELETED
     *
     * @return status
     **/
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public SearchProductsRequestBody updateTimeGe(Long updateTimeGe) {
        this.updateTimeGe = updateTimeGe;
        return this;
    }

    /**
     * Filter products to show only those that are updated on or after the specified date and time. Unix timestamp. Note: The fields \&quot;update_time_ge\&quot; and \&quot;update_time_le\&quot; together define the update time filter condition. - If \&quot;update_time_ge\&quot; is filled but \&quot;update_time_le\&quot; is empty, \&quot;update_time_le\&quot; will default to the current time. - If \&quot;update_time_le\&quot; is filled but \&quot;update_time_ge\&quot; is empty, \&quot;update_time_ge\&quot; will default to the earliest shop time.
     *
     * @return updateTimeGe
     **/
    @javax.annotation.Nullable
    public Long getUpdateTimeGe() {
        return updateTimeGe;
    }

    public void setUpdateTimeGe(Long updateTimeGe) {
        this.updateTimeGe = updateTimeGe;
    }

    public SearchProductsRequestBody updateTimeLe(Long updateTimeLe) {
        this.updateTimeLe = updateTimeLe;
        return this;
    }

    /**
     * Filter products to show only those that are updated on or before the specified date and time. Unix timestamp. Refer to notes in &#x60;update_time_ge&#x60; for more usage information.
     *
     * @return updateTimeLe
     **/
    @javax.annotation.Nullable
    public Long getUpdateTimeLe() {
        return updateTimeLe;
    }

    public void setUpdateTimeLe(Long updateTimeLe) {
        this.updateTimeLe = updateTimeLe;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchProductsRequestBody product202309SearchProductsRequestBody = (SearchProductsRequestBody) o;
        return Objects.equals(this.createTimeGe, product202309SearchProductsRequestBody.createTimeGe) &&
            Objects.equals(this.createTimeLe, product202309SearchProductsRequestBody.createTimeLe) &&
            Objects.equals(this.sellerSkus, product202309SearchProductsRequestBody.sellerSkus) &&
            Objects.equals(this.status, product202309SearchProductsRequestBody.status) &&
            Objects.equals(this.updateTimeGe, product202309SearchProductsRequestBody.updateTimeGe) &&
            Objects.equals(this.updateTimeLe, product202309SearchProductsRequestBody.updateTimeLe);
    }

    @Override
    public int hashCode() {
        return Objects.hash(createTimeGe, createTimeLe, sellerSkus, status, updateTimeGe, updateTimeLe);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SearchProductsRequestBody {\n");
        sb.append("    createTimeGe: ").append(toIndentedString(createTimeGe)).append("\n");
        sb.append("    createTimeLe: ").append(toIndentedString(createTimeLe)).append("\n");
        sb.append("    sellerSkus: ").append(toIndentedString(sellerSkus)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    updateTimeGe: ").append(toIndentedString(updateTimeGe)).append("\n");
        sb.append("    updateTimeLe: ").append(toIndentedString(updateTimeLe)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of SearchProductsRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SearchProductsRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SearchProductsRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SearchProductsRequestBody> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(SearchProductsRequestBody.class));

            return (TypeAdapter<T>) new TypeAdapter<SearchProductsRequestBody>() {
                @Override
                public void write(JsonWriter out, SearchProductsRequestBody value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public SearchProductsRequestBody read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

