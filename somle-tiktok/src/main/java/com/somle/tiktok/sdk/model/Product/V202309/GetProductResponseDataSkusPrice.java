/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * GetProductResponseDataSkusPrice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetProductResponseDataSkusPrice {
    public static final String SERIALIZED_NAME_CURRENCY = "currency";
    public static final String SERIALIZED_NAME_SALE_PRICE = "sale_price";
    public static final String SERIALIZED_NAME_TAX_EXCLUSIVE_PRICE = "tax_exclusive_price";
    public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("currency");
        openapiFields.add("sale_price");
        openapiFields.add("tax_exclusive_price");
        openapiFields.add("unit_price");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_CURRENCY)
    private String currency;
    @SerializedName(SERIALIZED_NAME_SALE_PRICE)
    private String salePrice;
    @SerializedName(SERIALIZED_NAME_TAX_EXCLUSIVE_PRICE)
    private String taxExclusivePrice;
    @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
    private String unitPrice;

    public GetProductResponseDataSkusPrice() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetProductResponseDataSkusPrice
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetProductResponseDataSkusPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetProductResponseDataSkusPrice is not found in the empty JSON string", GetProductResponseDataSkusPrice.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetProductResponseDataSkusPrice.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetProductResponseDataSkusPrice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
        }
        if ((jsonObj.get("sale_price") != null && !jsonObj.get("sale_price").isJsonNull()) && !jsonObj.get("sale_price").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sale_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sale_price").toString()));
        }
        if ((jsonObj.get("tax_exclusive_price") != null && !jsonObj.get("tax_exclusive_price").isJsonNull()) && !jsonObj.get("tax_exclusive_price").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax_exclusive_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_exclusive_price").toString()));
        }
        if ((jsonObj.get("unit_price") != null && !jsonObj.get("unit_price").isJsonNull()) && !jsonObj.get("unit_price").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `unit_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit_price").toString()));
        }
    }

    /**
     * Create an instance of GetProductResponseDataSkusPrice given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetProductResponseDataSkusPrice
     * @throws IOException if the JSON string is invalid with respect to GetProductResponseDataSkusPrice
     */
    public static GetProductResponseDataSkusPrice fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetProductResponseDataSkusPrice.class);
    }

    public GetProductResponseDataSkusPrice currency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * The currency. Possible values based on the region: - BRL:  Brazil - EUR: France, Germany, Ireland, Italy, Spain - GBP: United Kingdom - IDR: Indonesia - JPY: Japan - MXN: Mexico - MYR: Malaysia - PHP: Philippines - SGD: Singapore - THB: Thailand - USD: United States - VND: Vietnam
     *
     * @return currency
     **/
    @javax.annotation.Nullable
    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public GetProductResponseDataSkusPrice salePrice(String salePrice) {
        this.salePrice = salePrice;
        return this;
    }

    /**
     * **All sellers** The SKU&#39;s **local display price** shown on the product page before any discounts.
     *
     * @return salePrice
     **/
    @javax.annotation.Nullable
    public String getSalePrice() {
        return salePrice;
    }

    public void setSalePrice(String salePrice) {
        this.salePrice = salePrice;
    }

    public GetProductResponseDataSkusPrice taxExclusivePrice(String taxExclusivePrice) {
        this.taxExclusivePrice = taxExclusivePrice;
        return this;
    }

    /**
     * **Global sellers** The SKU&#39;s **local pre-tax price**. This excludes any applicable charges such as cross-border shipping costs, taxes, and other fees, and therefore does not appear on the product page.  **Note**: Tax-exclusive pricing does not apply to JP and US shops using China warehouses, therefore this value is the same as &#x60;sale_price&#x60;.
     *
     * @return taxExclusivePrice
     **/
    @javax.annotation.Nullable
    public String getTaxExclusivePrice() {
        return taxExclusivePrice;
    }

    public void setTaxExclusivePrice(String taxExclusivePrice) {
        this.taxExclusivePrice = taxExclusivePrice;
    }

    public GetProductResponseDataSkusPrice unitPrice(String unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * The unit price of the SKU.  You can display the unit price to facilitate easier price comparisons across different products and packaging sizes. Applicable only for the EU market.  **Note**:  - This value is available only if you have defined the elements used to calculate this price when creating the product. - Unit price &#x3D; Selling price/(SKU unit count/base unit count)
     *
     * @return unitPrice
     **/
    @javax.annotation.Nullable
    public String getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(String unitPrice) {
        this.unitPrice = unitPrice;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetProductResponseDataSkusPrice product202309GetProductResponseDataSkusPrice = (GetProductResponseDataSkusPrice) o;
        return Objects.equals(this.currency, product202309GetProductResponseDataSkusPrice.currency) &&
            Objects.equals(this.salePrice, product202309GetProductResponseDataSkusPrice.salePrice) &&
            Objects.equals(this.taxExclusivePrice, product202309GetProductResponseDataSkusPrice.taxExclusivePrice) &&
            Objects.equals(this.unitPrice, product202309GetProductResponseDataSkusPrice.unitPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(currency, salePrice, taxExclusivePrice, unitPrice);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetProductResponseDataSkusPrice {\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    salePrice: ").append(toIndentedString(salePrice)).append("\n");
        sb.append("    taxExclusivePrice: ").append(toIndentedString(taxExclusivePrice)).append("\n");
        sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetProductResponseDataSkusPrice to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetProductResponseDataSkusPrice.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetProductResponseDataSkusPrice' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetProductResponseDataSkusPrice> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetProductResponseDataSkusPrice.class));

            return (TypeAdapter<T>) new TypeAdapter<GetProductResponseDataSkusPrice>() {
                @Override
                public void write(JsonWriter out, GetProductResponseDataSkusPrice value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetProductResponseDataSkusPrice read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

