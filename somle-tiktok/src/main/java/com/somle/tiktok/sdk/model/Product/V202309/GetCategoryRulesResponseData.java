/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetCategoryRulesResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetCategoryRulesResponseData {
    public static final String SERIALIZED_NAME_ALLOWED_SPECIAL_PRODUCT_TYPES = "allowed_special_product_types";
    public static final String SERIALIZED_NAME_COD = "cod";
    public static final String SERIALIZED_NAME_EPR = "epr";
    public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
    public static final String SERIALIZED_NAME_PACKAGE_DIMENSION = "package_dimension";
    public static final String SERIALIZED_NAME_PRODUCT_CERTIFICATIONS = "product_certifications";
    public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON = "responsible_person";
    public static final String SERIALIZED_NAME_SIZE_CHART = "size_chart";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("allowed_special_product_types");
        openapiFields.add("cod");
        openapiFields.add("epr");
        openapiFields.add("manufacturer");
        openapiFields.add("package_dimension");
        openapiFields.add("product_certifications");
        openapiFields.add("responsible_person");
        openapiFields.add("size_chart");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ALLOWED_SPECIAL_PRODUCT_TYPES)
    private List<String> allowedSpecialProductTypes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_COD)
    private GetCategoryRulesResponseDataCod cod;
    @SerializedName(SERIALIZED_NAME_EPR)
    private GetCategoryRulesResponseDataEpr epr;
    @SerializedName(SERIALIZED_NAME_MANUFACTURER)
    private GetCategoryRulesResponseDataManufacturer manufacturer;
    @SerializedName(SERIALIZED_NAME_PACKAGE_DIMENSION)
    private GetCategoryRulesResponseDataPackageDimension packageDimension;
    @SerializedName(SERIALIZED_NAME_PRODUCT_CERTIFICATIONS)
    private List<GetCategoryRulesResponseDataProductCertifications> productCertifications = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON)
    private GetCategoryRulesResponseDataResponsiblePerson responsiblePerson;
    @SerializedName(SERIALIZED_NAME_SIZE_CHART)
    private GetCategoryRulesResponseDataSizeChart sizeChart;

    public GetCategoryRulesResponseData() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetCategoryRulesResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetCategoryRulesResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetCategoryRulesResponseData is not found in the empty JSON string", GetCategoryRulesResponseData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetCategoryRulesResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCategoryRulesResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("allowed_special_product_types") != null && !jsonObj.get("allowed_special_product_types").isJsonNull() && !jsonObj.get("allowed_special_product_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowed_special_product_types` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_special_product_types").toString()));
        }
        // validate the optional field `cod`
        if (jsonObj.get("cod") != null && !jsonObj.get("cod").isJsonNull()) {
            GetCategoryRulesResponseDataCod.validateJsonElement(jsonObj.get("cod"));
        }
        // validate the optional field `epr`
        if (jsonObj.get("epr") != null && !jsonObj.get("epr").isJsonNull()) {
            GetCategoryRulesResponseDataEpr.validateJsonElement(jsonObj.get("epr"));
        }
        // validate the optional field `manufacturer`
        if (jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) {
            GetCategoryRulesResponseDataManufacturer.validateJsonElement(jsonObj.get("manufacturer"));
        }
        // validate the optional field `package_dimension`
        if (jsonObj.get("package_dimension") != null && !jsonObj.get("package_dimension").isJsonNull()) {
            GetCategoryRulesResponseDataPackageDimension.validateJsonElement(jsonObj.get("package_dimension"));
        }
        if (jsonObj.get("product_certifications") != null && !jsonObj.get("product_certifications").isJsonNull()) {
            JsonArray jsonArrayproductCertifications = jsonObj.getAsJsonArray("product_certifications");
            if (jsonArrayproductCertifications != null) {
                // ensure the json data is an array
                if (!jsonObj.get("product_certifications").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `product_certifications` to be an array in the JSON string but got `%s`", jsonObj.get("product_certifications").toString()));
                }

                // validate the optional field `product_certifications` (array)
                for (int i = 0; i < jsonArrayproductCertifications.size(); i++) {
                    GetCategoryRulesResponseDataProductCertifications.validateJsonElement(jsonArrayproductCertifications.get(i));
                }
                ;
            }
        }
        // validate the optional field `responsible_person`
        if (jsonObj.get("responsible_person") != null && !jsonObj.get("responsible_person").isJsonNull()) {
            GetCategoryRulesResponseDataResponsiblePerson.validateJsonElement(jsonObj.get("responsible_person"));
        }
        // validate the optional field `size_chart`
        if (jsonObj.get("size_chart") != null && !jsonObj.get("size_chart").isJsonNull()) {
            GetCategoryRulesResponseDataSizeChart.validateJsonElement(jsonObj.get("size_chart"));
        }
    }

    /**
     * Create an instance of GetCategoryRulesResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetCategoryRulesResponseData
     * @throws IOException if the JSON string is invalid with respect to GetCategoryRulesResponseData
     */
    public static GetCategoryRulesResponseData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetCategoryRulesResponseData.class);
    }

    public GetCategoryRulesResponseData allowedSpecialProductTypes(List<String> allowedSpecialProductTypes) {
        this.allowedSpecialProductTypes = allowedSpecialProductTypes;
        return this;
    }

    public GetCategoryRulesResponseData addAllowedSpecialProductTypesItem(String allowedSpecialProductTypesItem) {
        if (this.allowedSpecialProductTypes == null) {
            this.allowedSpecialProductTypes = new ArrayList<>();
        }
        this.allowedSpecialProductTypes.add(allowedSpecialProductTypesItem);
        return this;
    }

    /**
     * The list of special product types, excluding regular products, that your shop is allowed to list in this category. This field is omitted if no special types are allowed.  Possible values based on the region: **US** - &#x60;PRE_ORDER&#x60;: The product is not yet available or released. Fulfillment can be extended by specifying a release date. - &#x60;MADE_TO_ORDER&#x60;: The product is produced only after the order is received. Fulfillment can be extended by specifying a duration. - &#x60;CUSTOM&#x60;: The product requires a fulfillment timeline that exceeds the standard due to other factors. Fulfillment can be extended by specifying a duration.  **UK and SEA** - &#x60;PRE_ORDER&#x60;: The product is not yet available or released. Fulfillment can be extended by specifying a duration.
     *
     * @return allowedSpecialProductTypes
     **/
    @javax.annotation.Nullable
    public List<String> getAllowedSpecialProductTypes() {
        return allowedSpecialProductTypes;
    }

    public void setAllowedSpecialProductTypes(List<String> allowedSpecialProductTypes) {
        this.allowedSpecialProductTypes = allowedSpecialProductTypes;
    }

    public GetCategoryRulesResponseData cod(GetCategoryRulesResponseDataCod cod) {
        this.cod = cod;
        return this;
    }

    /**
     * Get cod
     *
     * @return cod
     **/
    @javax.annotation.Nullable
    public GetCategoryRulesResponseDataCod getCod() {
        return cod;
    }

    public void setCod(GetCategoryRulesResponseDataCod cod) {
        this.cod = cod;
    }

    public GetCategoryRulesResponseData epr(GetCategoryRulesResponseDataEpr epr) {
        this.epr = epr;
        return this;
    }

    /**
     * Get epr
     *
     * @return epr
     **/
    @javax.annotation.Nullable
    public GetCategoryRulesResponseDataEpr getEpr() {
        return epr;
    }

    public void setEpr(GetCategoryRulesResponseDataEpr epr) {
        this.epr = epr;
    }

    public GetCategoryRulesResponseData manufacturer(GetCategoryRulesResponseDataManufacturer manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get manufacturer
     *
     * @return manufacturer
     **/
    @javax.annotation.Nullable
    public GetCategoryRulesResponseDataManufacturer getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(GetCategoryRulesResponseDataManufacturer manufacturer) {
        this.manufacturer = manufacturer;
    }

    public GetCategoryRulesResponseData packageDimension(GetCategoryRulesResponseDataPackageDimension packageDimension) {
        this.packageDimension = packageDimension;
        return this;
    }

    /**
     * Get packageDimension
     *
     * @return packageDimension
     **/
    @javax.annotation.Nullable
    public GetCategoryRulesResponseDataPackageDimension getPackageDimension() {
        return packageDimension;
    }

    public void setPackageDimension(GetCategoryRulesResponseDataPackageDimension packageDimension) {
        this.packageDimension = packageDimension;
    }

    public GetCategoryRulesResponseData productCertifications(List<GetCategoryRulesResponseDataProductCertifications> productCertifications) {
        this.productCertifications = productCertifications;
        return this;
    }

    public GetCategoryRulesResponseData addProductCertificationsItem(GetCategoryRulesResponseDataProductCertifications productCertificationsItem) {
        if (this.productCertifications == null) {
            this.productCertifications = new ArrayList<>();
        }
        this.productCertifications.add(productCertificationsItem);
        return this;
    }

    /**
     * Certification related rules. As per TikTok Shop guidelines, certifications are required for certain restricted product categories. Refer to [TikTok Shop Restricted Products Policy](https://seller-us.tiktok.com/university/essay?identity&#x3D;1&amp;role&#x3D;1&amp;knowledge_id&#x3D;3238037484275457&amp;from&#x3D;policy) for information on product category restrictions.  If this is empty, it means certifications are not required for this category.
     *
     * @return productCertifications
     **/
    @javax.annotation.Nullable
    public List<GetCategoryRulesResponseDataProductCertifications> getProductCertifications() {
        return productCertifications;
    }

    public void setProductCertifications(List<GetCategoryRulesResponseDataProductCertifications> productCertifications) {
        this.productCertifications = productCertifications;
    }

    public GetCategoryRulesResponseData responsiblePerson(GetCategoryRulesResponseDataResponsiblePerson responsiblePerson) {
        this.responsiblePerson = responsiblePerson;
        return this;
    }

    /**
     * Get responsiblePerson
     *
     * @return responsiblePerson
     **/
    @javax.annotation.Nullable
    public GetCategoryRulesResponseDataResponsiblePerson getResponsiblePerson() {
        return responsiblePerson;
    }

    public void setResponsiblePerson(GetCategoryRulesResponseDataResponsiblePerson responsiblePerson) {
        this.responsiblePerson = responsiblePerson;
    }

    public GetCategoryRulesResponseData sizeChart(GetCategoryRulesResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
        return this;
    }

    /**
     * Get sizeChart
     *
     * @return sizeChart
     **/
    @javax.annotation.Nullable
    public GetCategoryRulesResponseDataSizeChart getSizeChart() {
        return sizeChart;
    }

    public void setSizeChart(GetCategoryRulesResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCategoryRulesResponseData product202309GetCategoryRulesResponseData = (GetCategoryRulesResponseData) o;
        return Objects.equals(this.allowedSpecialProductTypes, product202309GetCategoryRulesResponseData.allowedSpecialProductTypes) &&
            Objects.equals(this.cod, product202309GetCategoryRulesResponseData.cod) &&
            Objects.equals(this.epr, product202309GetCategoryRulesResponseData.epr) &&
            Objects.equals(this.manufacturer, product202309GetCategoryRulesResponseData.manufacturer) &&
            Objects.equals(this.packageDimension, product202309GetCategoryRulesResponseData.packageDimension) &&
            Objects.equals(this.productCertifications, product202309GetCategoryRulesResponseData.productCertifications) &&
            Objects.equals(this.responsiblePerson, product202309GetCategoryRulesResponseData.responsiblePerson) &&
            Objects.equals(this.sizeChart, product202309GetCategoryRulesResponseData.sizeChart);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowedSpecialProductTypes, cod, epr, manufacturer, packageDimension, productCertifications, responsiblePerson, sizeChart);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetCategoryRulesResponseData {\n");
        sb.append("    allowedSpecialProductTypes: ").append(toIndentedString(allowedSpecialProductTypes)).append("\n");
        sb.append("    cod: ").append(toIndentedString(cod)).append("\n");
        sb.append("    epr: ").append(toIndentedString(epr)).append("\n");
        sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
        sb.append("    packageDimension: ").append(toIndentedString(packageDimension)).append("\n");
        sb.append("    productCertifications: ").append(toIndentedString(productCertifications)).append("\n");
        sb.append("    responsiblePerson: ").append(toIndentedString(responsiblePerson)).append("\n");
        sb.append("    sizeChart: ").append(toIndentedString(sizeChart)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetCategoryRulesResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetCategoryRulesResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetCategoryRulesResponseData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetCategoryRulesResponseData> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetCategoryRulesResponseData.class));

            return (TypeAdapter<T>) new TypeAdapter<GetCategoryRulesResponseData>() {
                @Override
                public void write(JsonWriter out, GetCategoryRulesResponseData value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetCategoryRulesResponseData read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

