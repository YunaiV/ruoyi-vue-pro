/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * CheckProductListingResponseDataDiagnoses
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingResponseDataDiagnoses {
    public static final String SERIALIZED_NAME_DIAGNOSIS_RESULTS = "diagnosis_results";
    public static final String SERIALIZED_NAME_FIELD = "field";
    public static final String SERIALIZED_NAME_SUGGESTIONS = "suggestions";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("diagnosis_results");
        openapiFields.add("field");
        openapiFields.add("suggestions");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_DIAGNOSIS_RESULTS)
    private List<CheckProductListingResponseDataDiagnosesDiagnosisResults> diagnosisResults = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_FIELD)
    private String field;
    @SerializedName(SERIALIZED_NAME_SUGGESTIONS)
    private CheckProductListingResponseDataDiagnosesSuggestions suggestions;

    public CheckProductListingResponseDataDiagnoses() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingResponseDataDiagnoses
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingResponseDataDiagnoses.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingResponseDataDiagnoses is not found in the empty JSON string", CheckProductListingResponseDataDiagnoses.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingResponseDataDiagnoses.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingResponseDataDiagnoses` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("diagnosis_results") != null && !jsonObj.get("diagnosis_results").isJsonNull()) {
            JsonArray jsonArraydiagnosisResults = jsonObj.getAsJsonArray("diagnosis_results");
            if (jsonArraydiagnosisResults != null) {
                // ensure the json data is an array
                if (!jsonObj.get("diagnosis_results").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `diagnosis_results` to be an array in the JSON string but got `%s`", jsonObj.get("diagnosis_results").toString()));
                }

                // validate the optional field `diagnosis_results` (array)
                for (int i = 0; i < jsonArraydiagnosisResults.size(); i++) {
                    CheckProductListingResponseDataDiagnosesDiagnosisResults.validateJsonElement(jsonArraydiagnosisResults.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
        }
        // validate the optional field `suggestions`
        if (jsonObj.get("suggestions") != null && !jsonObj.get("suggestions").isJsonNull()) {
            CheckProductListingResponseDataDiagnosesSuggestions.validateJsonElement(jsonObj.get("suggestions"));
        }
    }

    /**
     * Create an instance of CheckProductListingResponseDataDiagnoses given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingResponseDataDiagnoses
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingResponseDataDiagnoses
     */
    public static CheckProductListingResponseDataDiagnoses fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingResponseDataDiagnoses.class);
    }

    public CheckProductListingResponseDataDiagnoses diagnosisResults(List<CheckProductListingResponseDataDiagnosesDiagnosisResults> diagnosisResults) {
        this.diagnosisResults = diagnosisResults;
        return this;
    }

    public CheckProductListingResponseDataDiagnoses addDiagnosisResultsItem(CheckProductListingResponseDataDiagnosesDiagnosisResults diagnosisResultsItem) {
        if (this.diagnosisResults == null) {
            this.diagnosisResults = new ArrayList<>();
        }
        this.diagnosisResults.add(diagnosisResultsItem);
        return this;
    }

    /**
     * The diagnosis results.
     *
     * @return diagnosisResults
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingResponseDataDiagnosesDiagnosisResults> getDiagnosisResults() {
        return diagnosisResults;
    }

    public void setDiagnosisResults(List<CheckProductListingResponseDataDiagnosesDiagnosisResults> diagnosisResults) {
        this.diagnosisResults = diagnosisResults;
    }

    public CheckProductListingResponseDataDiagnoses field(String field) {
        this.field = field;
        return this;
    }

    /**
     * The product field being diagnosed.  Possible values:  - TITLE: Product title - DESCRIPTION: Product description - IMAGE: Product image displayed in the image gallery  - ATTRIBUTE: Product attribute - SIZE_CHART: Product size chart
     *
     * @return field
     **/
    @javax.annotation.Nullable
    public String getField() {
        return field;
    }

    public void setField(String field) {
        this.field = field;
    }

    public CheckProductListingResponseDataDiagnoses suggestions(CheckProductListingResponseDataDiagnosesSuggestions suggestions) {
        this.suggestions = suggestions;
        return this;
    }

    /**
     * Get suggestions
     *
     * @return suggestions
     **/
    @javax.annotation.Nullable
    public CheckProductListingResponseDataDiagnosesSuggestions getSuggestions() {
        return suggestions;
    }

    public void setSuggestions(CheckProductListingResponseDataDiagnosesSuggestions suggestions) {
        this.suggestions = suggestions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingResponseDataDiagnoses product202309CheckProductListingResponseDataDiagnoses = (CheckProductListingResponseDataDiagnoses) o;
        return Objects.equals(this.diagnosisResults, product202309CheckProductListingResponseDataDiagnoses.diagnosisResults) &&
            Objects.equals(this.field, product202309CheckProductListingResponseDataDiagnoses.field) &&
            Objects.equals(this.suggestions, product202309CheckProductListingResponseDataDiagnoses.suggestions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(diagnosisResults, field, suggestions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingResponseDataDiagnoses {\n");
        sb.append("    diagnosisResults: ").append(toIndentedString(diagnosisResults)).append("\n");
        sb.append("    field: ").append(toIndentedString(field)).append("\n");
        sb.append("    suggestions: ").append(toIndentedString(suggestions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingResponseDataDiagnoses to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingResponseDataDiagnoses.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingResponseDataDiagnoses' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingResponseDataDiagnoses> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingResponseDataDiagnoses.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingResponseDataDiagnoses>() {
                @Override
                public void write(JsonWriter out, CheckProductListingResponseDataDiagnoses value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingResponseDataDiagnoses read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

