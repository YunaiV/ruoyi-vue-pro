/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * EditGlobalProductRequestBodySkus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class EditGlobalProductRequestBodySkus {
    public static final String SERIALIZED_NAME_EXTERNAL_GLOBAL_SKU_ID = "external_global_sku_id";
    public static final String SERIALIZED_NAME_EXTRA_IDENTIFIER_CODES = "extra_identifier_codes";
    public static final String SERIALIZED_NAME_GLOBAL_QUANTITY = "global_quantity";
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_IDENTIFIER_CODE = "identifier_code";
    public static final String SERIALIZED_NAME_INVENTORY = "inventory";
    public static final String SERIALIZED_NAME_PRICE = "price";
    public static final String SERIALIZED_NAME_SALE_PRICES = "sale_prices";
    public static final String SERIALIZED_NAME_SALES_ATTRIBUTES = "sales_attributes";
    public static final String SERIALIZED_NAME_SELLER_SKU = "seller_sku";
    public static final String SERIALIZED_NAME_SKU_UNIT_COUNT = "sku_unit_count";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("external_global_sku_id");
        openapiFields.add("extra_identifier_codes");
        openapiFields.add("global_quantity");
        openapiFields.add("id");
        openapiFields.add("identifier_code");
        openapiFields.add("inventory");
        openapiFields.add("price");
        openapiFields.add("sale_prices");
        openapiFields.add("sales_attributes");
        openapiFields.add("seller_sku");
        openapiFields.add("sku_unit_count");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_EXTERNAL_GLOBAL_SKU_ID)
    private String externalGlobalSkuId;
    @SerializedName(SERIALIZED_NAME_EXTRA_IDENTIFIER_CODES)
    private List<String> extraIdentifierCodes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_GLOBAL_QUANTITY)
    private Integer globalQuantity;
    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_IDENTIFIER_CODE)
    private EditGlobalProductRequestBodySkusIdentifierCode identifierCode;
    @SerializedName(SERIALIZED_NAME_INVENTORY)
    private List<EditGlobalProductRequestBodySkusInventory> inventory = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_PRICE)
    private EditGlobalProductRequestBodySkusPrice price;
    @SerializedName(SERIALIZED_NAME_SALE_PRICES)
    private List<EditGlobalProductRequestBodySkusSalePrices> salePrices = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SALES_ATTRIBUTES)
    private List<EditGlobalProductRequestBodySkusSalesAttributes> salesAttributes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SELLER_SKU)
    private String sellerSku;
    @SerializedName(SERIALIZED_NAME_SKU_UNIT_COUNT)
    private String skuUnitCount;

    public EditGlobalProductRequestBodySkus() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EditGlobalProductRequestBodySkus
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EditGlobalProductRequestBodySkus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in EditGlobalProductRequestBodySkus is not found in the empty JSON string", EditGlobalProductRequestBodySkus.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EditGlobalProductRequestBodySkus.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditGlobalProductRequestBodySkus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("external_global_sku_id") != null && !jsonObj.get("external_global_sku_id").isJsonNull()) && !jsonObj.get("external_global_sku_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_global_sku_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_global_sku_id").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("extra_identifier_codes") != null && !jsonObj.get("extra_identifier_codes").isJsonNull() && !jsonObj.get("extra_identifier_codes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extra_identifier_codes` to be an array in the JSON string but got `%s`", jsonObj.get("extra_identifier_codes").toString()));
        }
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        // validate the optional field `identifier_code`
        if (jsonObj.get("identifier_code") != null && !jsonObj.get("identifier_code").isJsonNull()) {
            EditGlobalProductRequestBodySkusIdentifierCode.validateJsonElement(jsonObj.get("identifier_code"));
        }
        if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
            JsonArray jsonArrayinventory = jsonObj.getAsJsonArray("inventory");
            if (jsonArrayinventory != null) {
                // ensure the json data is an array
                if (!jsonObj.get("inventory").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `inventory` to be an array in the JSON string but got `%s`", jsonObj.get("inventory").toString()));
                }

                // validate the optional field `inventory` (array)
                for (int i = 0; i < jsonArrayinventory.size(); i++) {
                    EditGlobalProductRequestBodySkusInventory.validateJsonElement(jsonArrayinventory.get(i));
                }
                ;
            }
        }
        // validate the optional field `price`
        if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
            EditGlobalProductRequestBodySkusPrice.validateJsonElement(jsonObj.get("price"));
        }
        if (jsonObj.get("sale_prices") != null && !jsonObj.get("sale_prices").isJsonNull()) {
            JsonArray jsonArraysalePrices = jsonObj.getAsJsonArray("sale_prices");
            if (jsonArraysalePrices != null) {
                // ensure the json data is an array
                if (!jsonObj.get("sale_prices").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `sale_prices` to be an array in the JSON string but got `%s`", jsonObj.get("sale_prices").toString()));
                }

                // validate the optional field `sale_prices` (array)
                for (int i = 0; i < jsonArraysalePrices.size(); i++) {
                    EditGlobalProductRequestBodySkusSalePrices.validateJsonElement(jsonArraysalePrices.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("sales_attributes") != null && !jsonObj.get("sales_attributes").isJsonNull()) {
            JsonArray jsonArraysalesAttributes = jsonObj.getAsJsonArray("sales_attributes");
            if (jsonArraysalesAttributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("sales_attributes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `sales_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("sales_attributes").toString()));
                }

                // validate the optional field `sales_attributes` (array)
                for (int i = 0; i < jsonArraysalesAttributes.size(); i++) {
                    EditGlobalProductRequestBodySkusSalesAttributes.validateJsonElement(jsonArraysalesAttributes.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("seller_sku") != null && !jsonObj.get("seller_sku").isJsonNull()) && !jsonObj.get("seller_sku").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_sku").toString()));
        }
        if ((jsonObj.get("sku_unit_count") != null && !jsonObj.get("sku_unit_count").isJsonNull()) && !jsonObj.get("sku_unit_count").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sku_unit_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_unit_count").toString()));
        }
    }

    /**
     * Create an instance of EditGlobalProductRequestBodySkus given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EditGlobalProductRequestBodySkus
     * @throws IOException if the JSON string is invalid with respect to EditGlobalProductRequestBodySkus
     */
    public static EditGlobalProductRequestBodySkus fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EditGlobalProductRequestBodySkus.class);
    }

    public EditGlobalProductRequestBodySkus externalGlobalSkuId(String externalGlobalSkuId) {
        this.externalGlobalSkuId = externalGlobalSkuId;
        return this;
    }

    /**
     * An external identifier used in an external ecommerce platform. This is used to associate the global SKU between TikTok Shop and the external ecommerce platform.  Max length: 999 characters
     *
     * @return externalGlobalSkuId
     **/
    @javax.annotation.Nullable
    public String getExternalGlobalSkuId() {
        return externalGlobalSkuId;
    }

    public void setExternalGlobalSkuId(String externalGlobalSkuId) {
        this.externalGlobalSkuId = externalGlobalSkuId;
    }

    public EditGlobalProductRequestBodySkus extraIdentifierCodes(List<String> extraIdentifierCodes) {
        this.extraIdentifierCodes = extraIdentifierCodes;
        return this;
    }

    public EditGlobalProductRequestBodySkus addExtraIdentifierCodesItem(String extraIdentifierCodesItem) {
        if (this.extraIdentifierCodes == null) {
            this.extraIdentifierCodes = new ArrayList<>();
        }
        this.extraIdentifierCodes.add(extraIdentifierCodesItem);
        return this;
    }

    /**
     * If the SKU is a combined listing (in other words, a product bundle) containing multiple individual SKUs, you can add up to 10 additional identifier codes here for the SKUs included in the bundle. Delimit the codes with commas.  **Format**: GTIN: 14 digits  EAN: 8, 13, or 14 digits  UPC: 12 digits  ISBN: 13 digits (supports &#39;X&#39; in uppercase as the last digit)  **Note**:  - Applicable only for the EU market.  - The identifier code must be unique for each SKU, with no repetition allowed.
     *
     * @return extraIdentifierCodes
     **/
    @javax.annotation.Nullable
    public List<String> getExtraIdentifierCodes() {
        return extraIdentifierCodes;
    }

    public void setExtraIdentifierCodes(List<String> extraIdentifierCodes) {
        this.extraIdentifierCodes = extraIdentifierCodes;
    }

    public EditGlobalProductRequestBodySkus globalQuantity(Integer globalQuantity) {
        this.globalQuantity = globalQuantity;
        return this;
    }

    /**
     * The total SKU inventory quantity across all shops globally.   The inventory for each local shop is automatically calculated when a product is first published. After publishing, this global quantity cannot be manually changed. You can only modify the inventory quantity in each local shop.
     *
     * @return globalQuantity
     **/
    @javax.annotation.Nullable
    public Integer getGlobalQuantity() {
        return globalQuantity;
    }

    public void setGlobalQuantity(Integer globalQuantity) {
        this.globalQuantity = globalQuantity;
    }

    public EditGlobalProductRequestBodySkus id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The global SKU ID in TikTok Shop. One product can contain multiple SKU IDs.  **Note**:  - To edit an existing SKU, include its SKU ID. - Any existing SKU IDs not listed here will result in the deletion of those SKUs. For example, if this product contains 5 SKUs and you only provide 2 SKU IDs, the remaining 3 will be deleted. - To create new SKUs, leave the SKU ID blank and complete the other fields.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public EditGlobalProductRequestBodySkus identifierCode(EditGlobalProductRequestBodySkusIdentifierCode identifierCode) {
        this.identifierCode = identifierCode;
        return this;
    }

    /**
     * Get identifierCode
     *
     * @return identifierCode
     **/
    @javax.annotation.Nullable
    public EditGlobalProductRequestBodySkusIdentifierCode getIdentifierCode() {
        return identifierCode;
    }

    public void setIdentifierCode(EditGlobalProductRequestBodySkusIdentifierCode identifierCode) {
        this.identifierCode = identifierCode;
    }

    public EditGlobalProductRequestBodySkus inventory(List<EditGlobalProductRequestBodySkusInventory> inventory) {
        this.inventory = inventory;
        return this;
    }

    public EditGlobalProductRequestBodySkus addInventoryItem(EditGlobalProductRequestBodySkusInventory inventoryItem) {
        if (this.inventory == null) {
            this.inventory = new ArrayList<>();
        }
        this.inventory.add(inventoryItem);
        return this;
    }

    /**
     * SKU inventory information per warehouse. If multi-warehouse is enabled in Seller Center, you must provide the inventory details for each warehouse.  Max count: 50  **Note**: &#x60;global_quantity&#x60; will not take effect if inventory details are provided for each warehouse.
     *
     * @return inventory
     **/
    @javax.annotation.Nullable
    public List<EditGlobalProductRequestBodySkusInventory> getInventory() {
        return inventory;
    }

    public void setInventory(List<EditGlobalProductRequestBodySkusInventory> inventory) {
        this.inventory = inventory;
    }

    public EditGlobalProductRequestBodySkus price(EditGlobalProductRequestBodySkusPrice price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     **/
    @javax.annotation.Nullable
    public EditGlobalProductRequestBodySkusPrice getPrice() {
        return price;
    }

    public void setPrice(EditGlobalProductRequestBodySkusPrice price) {
        this.price = price;
    }

    public EditGlobalProductRequestBodySkus salePrices(List<EditGlobalProductRequestBodySkusSalePrices> salePrices) {
        this.salePrices = salePrices;
        return this;
    }

    public EditGlobalProductRequestBodySkus addSalePricesItem(EditGlobalProductRequestBodySkusSalePrices salePricesItem) {
        if (this.salePrices == null) {
            this.salePrices = new ArrayList<>();
        }
        this.salePrices.add(salePricesItem);
        return this;
    }

    /**
     * The SKU&#39;s **local display price** shown on the product page before any discounts.   **Note**:  -  Required for JP and US shops using China warehouses, optional for others. - This is the definitive final price shown on the product page, all other prices will be ignored.
     *
     * @return salePrices
     **/
    @javax.annotation.Nullable
    public List<EditGlobalProductRequestBodySkusSalePrices> getSalePrices() {
        return salePrices;
    }

    public void setSalePrices(List<EditGlobalProductRequestBodySkusSalePrices> salePrices) {
        this.salePrices = salePrices;
    }

    public EditGlobalProductRequestBodySkus salesAttributes(List<EditGlobalProductRequestBodySkusSalesAttributes> salesAttributes) {
        this.salesAttributes = salesAttributes;
        return this;
    }

    public EditGlobalProductRequestBodySkus addSalesAttributesItem(EditGlobalProductRequestBodySkusSalesAttributes salesAttributesItem) {
        if (this.salesAttributes == null) {
            this.salesAttributes = new ArrayList<>();
        }
        this.salesAttributes.add(salesAttributesItem);
        return this;
    }

    /**
     * A list of attributes  (e.g. size, color, length) that define each variant of a product.  **Note**:  - If your product is straightforward without any sales attributes, you can omit this object. - You can only have up to 3 types of sales attributes per product. - Each SKU must include the same number and type of sales attributes. For example, you cannot have one SKU that has only a Color attribute, while another SKU has both Color and Size attributes. - Provide either a built-in ID or a custom name; if both are provided, the ID takes priority. - The &#x60;id/name&#x60; and &#x60;value_id/value_name&#x60; pairs must be unique in each SKU. For example, you cannot repeat &#x60;\&quot;name\&quot;: \&quot;Color\&quot;&#x60;, &#x60;\&quot;value_name\&quot;: \&quot;Red\&quot;&#x60; in different SKUs.
     *
     * @return salesAttributes
     **/
    @javax.annotation.Nullable
    public List<EditGlobalProductRequestBodySkusSalesAttributes> getSalesAttributes() {
        return salesAttributes;
    }

    public void setSalesAttributes(List<EditGlobalProductRequestBodySkusSalesAttributes> salesAttributes) {
        this.salesAttributes = salesAttributes;
    }

    public EditGlobalProductRequestBodySkus sellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
        return this;
    }

    /**
     * An internal code/name for managing SKUs, not visible to buyers.   - Valid length: 1-50 characters - Format: Text without spaces
     *
     * @return sellerSku
     **/
    @javax.annotation.Nullable
    public String getSellerSku() {
        return sellerSku;
    }

    public void setSellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
    }

    public EditGlobalProductRequestBodySkus skuUnitCount(String skuUnitCount) {
        this.skuUnitCount = skuUnitCount;
        return this;
    }

    /**
     * The total quantity/volume of the product represented by the SKU. For example, if the SKU represents 500ml of water, this value would be 500 if the unit type is defined as ml. Valid range: [0.01, 99,999.9999]  Applicable only for the EU market.  **Note**:  - This is mainly used to calculate the unit price of the SKU, and is required only if you wish to display the unit price to facilitate easier price comparisons across different products and packaging sizes. - Unit price &#x3D; Selling price/(SKU unit count/base unit count). Therefore if you want to obtain the unit price, you would also need to define the \&quot;base unit count\&quot; and the \&quot;unit type\&quot; product attributes. Retrieve the relevant information for these product attributes by using the [Get Global Attributes API](https://partner.tiktokshop.com/docv2/page/650a0483c16ffe02b8dfc80a). The unit price would then be returned in the [Get Global Product API](https://partner.tiktokshop.com/docv2/page/6509e2b0bace3e02b7490c96).
     *
     * @return skuUnitCount
     **/
    @javax.annotation.Nullable
    public String getSkuUnitCount() {
        return skuUnitCount;
    }

    public void setSkuUnitCount(String skuUnitCount) {
        this.skuUnitCount = skuUnitCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EditGlobalProductRequestBodySkus product202309EditGlobalProductRequestBodySkus = (EditGlobalProductRequestBodySkus) o;
        return Objects.equals(this.externalGlobalSkuId, product202309EditGlobalProductRequestBodySkus.externalGlobalSkuId) &&
            Objects.equals(this.extraIdentifierCodes, product202309EditGlobalProductRequestBodySkus.extraIdentifierCodes) &&
            Objects.equals(this.globalQuantity, product202309EditGlobalProductRequestBodySkus.globalQuantity) &&
            Objects.equals(this.id, product202309EditGlobalProductRequestBodySkus.id) &&
            Objects.equals(this.identifierCode, product202309EditGlobalProductRequestBodySkus.identifierCode) &&
            Objects.equals(this.inventory, product202309EditGlobalProductRequestBodySkus.inventory) &&
            Objects.equals(this.price, product202309EditGlobalProductRequestBodySkus.price) &&
            Objects.equals(this.salePrices, product202309EditGlobalProductRequestBodySkus.salePrices) &&
            Objects.equals(this.salesAttributes, product202309EditGlobalProductRequestBodySkus.salesAttributes) &&
            Objects.equals(this.sellerSku, product202309EditGlobalProductRequestBodySkus.sellerSku) &&
            Objects.equals(this.skuUnitCount, product202309EditGlobalProductRequestBodySkus.skuUnitCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(externalGlobalSkuId, extraIdentifierCodes, globalQuantity, id, identifierCode, inventory, price, salePrices, salesAttributes, sellerSku, skuUnitCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EditGlobalProductRequestBodySkus {\n");
        sb.append("    externalGlobalSkuId: ").append(toIndentedString(externalGlobalSkuId)).append("\n");
        sb.append("    extraIdentifierCodes: ").append(toIndentedString(extraIdentifierCodes)).append("\n");
        sb.append("    globalQuantity: ").append(toIndentedString(globalQuantity)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    identifierCode: ").append(toIndentedString(identifierCode)).append("\n");
        sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    salePrices: ").append(toIndentedString(salePrices)).append("\n");
        sb.append("    salesAttributes: ").append(toIndentedString(salesAttributes)).append("\n");
        sb.append("    sellerSku: ").append(toIndentedString(sellerSku)).append("\n");
        sb.append("    skuUnitCount: ").append(toIndentedString(skuUnitCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of EditGlobalProductRequestBodySkus to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EditGlobalProductRequestBodySkus.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EditGlobalProductRequestBodySkus' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EditGlobalProductRequestBodySkus> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(EditGlobalProductRequestBodySkus.class));

            return (TypeAdapter<T>) new TypeAdapter<EditGlobalProductRequestBodySkus>() {
                @Override
                public void write(JsonWriter out, EditGlobalProductRequestBodySkus value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public EditGlobalProductRequestBodySkus read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

