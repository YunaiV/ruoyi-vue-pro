/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * PublishGlobalProductRequestBodyPublishTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class PublishGlobalProductRequestBodyPublishTarget {
    public static final String SERIALIZED_NAME_MANUFACTURER_IDS = "manufacturer_ids";
    public static final String SERIALIZED_NAME_REGION = "region";
    public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS = "responsible_person_ids";
    public static final String SERIALIZED_NAME_SKUS = "skus";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("manufacturer_ids");
        openapiFields.add("region");
        openapiFields.add("responsible_person_ids");
        openapiFields.add("skus");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_MANUFACTURER_IDS)
    private List<String> manufacturerIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_REGION)
    private String region;
    @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS)
    private List<String> responsiblePersonIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SKUS)
    private List<PublishGlobalProductRequestBodyPublishTargetSkus> skus = new ArrayList<>();

    public PublishGlobalProductRequestBodyPublishTarget() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PublishGlobalProductRequestBodyPublishTarget
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PublishGlobalProductRequestBodyPublishTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in PublishGlobalProductRequestBodyPublishTarget is not found in the empty JSON string", PublishGlobalProductRequestBodyPublishTarget.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PublishGlobalProductRequestBodyPublishTarget.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishGlobalProductRequestBodyPublishTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("manufacturer_ids") != null && !jsonObj.get("manufacturer_ids").isJsonNull() && !jsonObj.get("manufacturer_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manufacturer_ids` to be an array in the JSON string but got `%s`", jsonObj.get("manufacturer_ids").toString()));
        }
        if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("responsible_person_ids") != null && !jsonObj.get("responsible_person_ids").isJsonNull() && !jsonObj.get("responsible_person_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responsible_person_ids` to be an array in the JSON string but got `%s`", jsonObj.get("responsible_person_ids").toString()));
        }
        if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonNull()) {
            JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
            if (jsonArrayskus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
                }

                // validate the optional field `skus` (array)
                for (int i = 0; i < jsonArrayskus.size(); i++) {
                    PublishGlobalProductRequestBodyPublishTargetSkus.validateJsonElement(jsonArrayskus.get(i));
                }
                ;
            }
        }
    }

    /**
     * Create an instance of PublishGlobalProductRequestBodyPublishTarget given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PublishGlobalProductRequestBodyPublishTarget
     * @throws IOException if the JSON string is invalid with respect to PublishGlobalProductRequestBodyPublishTarget
     */
    public static PublishGlobalProductRequestBodyPublishTarget fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PublishGlobalProductRequestBodyPublishTarget.class);
    }

    public PublishGlobalProductRequestBodyPublishTarget manufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
        return this;
    }

    public PublishGlobalProductRequestBodyPublishTarget addManufacturerIdsItem(String manufacturerIdsItem) {
        if (this.manufacturerIds == null) {
            this.manufacturerIds = new ArrayList<>();
        }
        this.manufacturerIds.add(manufacturerIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of manufacturer IDs. Retrieve the IDs from the [Search Manufacturers API](67066a580dcee902fa03ccf9). Default: The IDs provided when the global product was created. **Note**: Applicable only for the EU market in certain categories. Use the [Get Global Category Rules API](650a056df1fd3102b91b5b8e) to check the requirements.
     *
     * @return manufacturerIds
     **/
    @javax.annotation.Nullable
    public List<String> getManufacturerIds() {
        return manufacturerIds;
    }

    public void setManufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
    }

    public PublishGlobalProductRequestBodyPublishTarget region(String region) {
        this.region = region;
        return this;
    }

    /**
     * The new market where you want to publish the global product. Possible values: - DE: Germany - ES: Spain - FR: France - GB: United Kingdom - ID: Indonesia - IE: Ireland - IT: Italy - JP: Japan - MY: Malaysia - PH: Philippines - SG: Singapore - TH: Thailand - US: United States - VN: Vietnam  **Note**: You can only publish in each market once.
     *
     * @return region
     **/
    @javax.annotation.Nullable
    public String getRegion() {
        return region;
    }

    public void setRegion(String region) {
        this.region = region;
    }

    public PublishGlobalProductRequestBodyPublishTarget responsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
        return this;
    }

    public PublishGlobalProductRequestBodyPublishTarget addResponsiblePersonIdsItem(String responsiblePersonIdsItem) {
        if (this.responsiblePersonIds == null) {
            this.responsiblePersonIds = new ArrayList<>();
        }
        this.responsiblePersonIds.add(responsiblePersonIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of responsible person IDs. Retrieve the IDs from the [Search Responsible Persons API](67066a55f17b7d02f95d2fb1). Default: The IDs provided when the global product was created. **Note**: Applicable only for the EU market in certain categories. Use the [Get Global Category Rules API](650a056df1fd3102b91b5b8e) to check the requirements.
     *
     * @return responsiblePersonIds
     **/
    @javax.annotation.Nullable
    public List<String> getResponsiblePersonIds() {
        return responsiblePersonIds;
    }

    public void setResponsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
    }

    public PublishGlobalProductRequestBodyPublishTarget skus(List<PublishGlobalProductRequestBodyPublishTargetSkus> skus) {
        this.skus = skus;
        return this;
    }

    public PublishGlobalProductRequestBodyPublishTarget addSkusItem(PublishGlobalProductRequestBodyPublishTargetSkus skusItem) {
        if (this.skus == null) {
            this.skus = new ArrayList<>();
        }
        this.skus.add(skusItem);
        return this;
    }

    /**
     * The SKUs to be published in the specified market. - Max SKUs for EU, JP, UK, US: 300 - Max SKUs for other regions: 100
     *
     * @return skus
     **/
    @javax.annotation.Nullable
    public List<PublishGlobalProductRequestBodyPublishTargetSkus> getSkus() {
        return skus;
    }

    public void setSkus(List<PublishGlobalProductRequestBodyPublishTargetSkus> skus) {
        this.skus = skus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PublishGlobalProductRequestBodyPublishTarget product202309PublishGlobalProductRequestBodyPublishTarget = (PublishGlobalProductRequestBodyPublishTarget) o;
        return Objects.equals(this.manufacturerIds, product202309PublishGlobalProductRequestBodyPublishTarget.manufacturerIds) &&
            Objects.equals(this.region, product202309PublishGlobalProductRequestBodyPublishTarget.region) &&
            Objects.equals(this.responsiblePersonIds, product202309PublishGlobalProductRequestBodyPublishTarget.responsiblePersonIds) &&
            Objects.equals(this.skus, product202309PublishGlobalProductRequestBodyPublishTarget.skus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(manufacturerIds, region, responsiblePersonIds, skus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PublishGlobalProductRequestBodyPublishTarget {\n");
        sb.append("    manufacturerIds: ").append(toIndentedString(manufacturerIds)).append("\n");
        sb.append("    region: ").append(toIndentedString(region)).append("\n");
        sb.append("    responsiblePersonIds: ").append(toIndentedString(responsiblePersonIds)).append("\n");
        sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of PublishGlobalProductRequestBodyPublishTarget to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PublishGlobalProductRequestBodyPublishTarget.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PublishGlobalProductRequestBodyPublishTarget' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PublishGlobalProductRequestBodyPublishTarget> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(PublishGlobalProductRequestBodyPublishTarget.class));

            return (TypeAdapter<T>) new TypeAdapter<PublishGlobalProductRequestBodyPublishTarget>() {
                @Override
                public void write(JsonWriter out, PublishGlobalProductRequestBodyPublishTarget value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public PublishGlobalProductRequestBodyPublishTarget read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

