/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * EditProductRequestBodySizeChart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class EditProductRequestBodySizeChart {
    public static final String SERIALIZED_NAME_IMAGE = "image";
    public static final String SERIALIZED_NAME_TEMPLATE = "template";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("image");
        openapiFields.add("template");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_IMAGE)
    private EditProductRequestBodySizeChartImage image;
    @SerializedName(SERIALIZED_NAME_TEMPLATE)
    private EditProductRequestBodySizeChartTemplate template;

    public EditProductRequestBodySizeChart() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EditProductRequestBodySizeChart
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EditProductRequestBodySizeChart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in EditProductRequestBodySizeChart is not found in the empty JSON string", EditProductRequestBodySizeChart.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EditProductRequestBodySizeChart.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditProductRequestBodySizeChart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `image`
        if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
            EditProductRequestBodySizeChartImage.validateJsonElement(jsonObj.get("image"));
        }
        // validate the optional field `template`
        if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
            EditProductRequestBodySizeChartTemplate.validateJsonElement(jsonObj.get("template"));
        }
    }

    /**
     * Create an instance of EditProductRequestBodySizeChart given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EditProductRequestBodySizeChart
     * @throws IOException if the JSON string is invalid with respect to EditProductRequestBodySizeChart
     */
    public static EditProductRequestBodySizeChart fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EditProductRequestBodySizeChart.class);
    }

    public EditProductRequestBodySizeChart image(EditProductRequestBodySizeChartImage image) {
        this.image = image;
        return this;
    }

    /**
     * Get image
     *
     * @return image
     **/
    @javax.annotation.Nullable
    public EditProductRequestBodySizeChartImage getImage() {
        return image;
    }

    public void setImage(EditProductRequestBodySizeChartImage image) {
        this.image = image;
    }

    public EditProductRequestBodySizeChart template(EditProductRequestBodySizeChartTemplate template) {
        this.template = template;
        return this;
    }

    /**
     * Get template
     *
     * @return template
     **/
    @javax.annotation.Nullable
    public EditProductRequestBodySizeChartTemplate getTemplate() {
        return template;
    }

    public void setTemplate(EditProductRequestBodySizeChartTemplate template) {
        this.template = template;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EditProductRequestBodySizeChart product202309EditProductRequestBodySizeChart = (EditProductRequestBodySizeChart) o;
        return Objects.equals(this.image, product202309EditProductRequestBodySizeChart.image) &&
            Objects.equals(this.template, product202309EditProductRequestBodySizeChart.template);
    }

    @Override
    public int hashCode() {
        return Objects.hash(image, template);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EditProductRequestBodySizeChart {\n");
        sb.append("    image: ").append(toIndentedString(image)).append("\n");
        sb.append("    template: ").append(toIndentedString(template)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of EditProductRequestBodySizeChart to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EditProductRequestBodySizeChart.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EditProductRequestBodySizeChart' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EditProductRequestBodySizeChart> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(EditProductRequestBodySizeChart.class));

            return (TypeAdapter<T>) new TypeAdapter<EditProductRequestBodySizeChart>() {
                @Override
                public void write(JsonWriter out, EditProductRequestBodySizeChart value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public EditProductRequestBodySizeChart read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

