/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CheckProductListingResponseDataDiagnosesDiagnosisResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingResponseDataDiagnosesDiagnosisResults {
    public static final String SERIALIZED_NAME_CODE = "code";
    public static final String SERIALIZED_NAME_HOW_TO_SOLVE = "how_to_solve";
    public static final String SERIALIZED_NAME_QUALITY_TIER = "quality_tier";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("code");
        openapiFields.add("how_to_solve");
        openapiFields.add("quality_tier");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_CODE)
    private String code;
    @SerializedName(SERIALIZED_NAME_HOW_TO_SOLVE)
    private String howToSolve;
    @SerializedName(SERIALIZED_NAME_QUALITY_TIER)
    private String qualityTier;

    public CheckProductListingResponseDataDiagnosesDiagnosisResults() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingResponseDataDiagnosesDiagnosisResults
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingResponseDataDiagnosesDiagnosisResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingResponseDataDiagnosesDiagnosisResults is not found in the empty JSON string", CheckProductListingResponseDataDiagnosesDiagnosisResults.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingResponseDataDiagnosesDiagnosisResults.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingResponseDataDiagnosesDiagnosisResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
        }
        if ((jsonObj.get("how_to_solve") != null && !jsonObj.get("how_to_solve").isJsonNull()) && !jsonObj.get("how_to_solve").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `how_to_solve` to be a primitive type in the JSON string but got `%s`", jsonObj.get("how_to_solve").toString()));
        }
        if ((jsonObj.get("quality_tier") != null && !jsonObj.get("quality_tier").isJsonNull()) && !jsonObj.get("quality_tier").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `quality_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality_tier").toString()));
        }
    }

    /**
     * Create an instance of CheckProductListingResponseDataDiagnosesDiagnosisResults given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingResponseDataDiagnosesDiagnosisResults
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingResponseDataDiagnosesDiagnosisResults
     */
    public static CheckProductListingResponseDataDiagnosesDiagnosisResults fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingResponseDataDiagnosesDiagnosisResults.class);
    }

    public CheckProductListingResponseDataDiagnosesDiagnosisResults code(String code) {
        this.code = code;
        return this;
    }

    /**
     * A machine-readable code that represents an identified issue. Refer to [Listing quality diagnosis](https://partner.tiktokshop.com/docv2/page/66eb8f5c6f2da702e96a49dd) for the full list of identified issues and the corresponding recommendations.
     *
     * @return code
     **/
    @javax.annotation.Nullable
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public CheckProductListingResponseDataDiagnosesDiagnosisResults howToSolve(String howToSolve) {
        this.howToSolve = howToSolve;
        return this;
    }

    /**
     * The recommendation for resolving the identified issue, returned in the default locale language of the shop. Refer to [Listing quality diagnosis](https://partner.tiktokshop.com/docv2/page/66eb8f5c6f2da702e96a49dd) for the full list of recommendations.
     *
     * @return howToSolve
     **/
    @javax.annotation.Nullable
    public String getHowToSolve() {
        return howToSolve;
    }

    public void setHowToSolve(String howToSolve) {
        this.howToSolve = howToSolve;
    }

    public CheckProductListingResponseDataDiagnosesDiagnosisResults qualityTier(String qualityTier) {
        this.qualityTier = qualityTier;
        return this;
    }

    /**
     * The listing quality tier you can reach by implementing the recommendation. Possible values: - FAIR - GOOD  **Note**:  - To reach a higher tier, you must implement all recommendations from the destination tier and all preceding tiers. For example, a product will reach the \&quot;GOOD\&quot; tier once all \&quot;FAIR\&quot; and \&quot;GOOD\&quot; recommendations are addressed or implemented. - Available only for the US market.
     *
     * @return qualityTier
     **/
    @javax.annotation.Nullable
    public String getQualityTier() {
        return qualityTier;
    }

    public void setQualityTier(String qualityTier) {
        this.qualityTier = qualityTier;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingResponseDataDiagnosesDiagnosisResults product202309CheckProductListingResponseDataDiagnosesDiagnosisResults = (CheckProductListingResponseDataDiagnosesDiagnosisResults) o;
        return Objects.equals(this.code, product202309CheckProductListingResponseDataDiagnosesDiagnosisResults.code) &&
            Objects.equals(this.howToSolve, product202309CheckProductListingResponseDataDiagnosesDiagnosisResults.howToSolve) &&
            Objects.equals(this.qualityTier, product202309CheckProductListingResponseDataDiagnosesDiagnosisResults.qualityTier);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code, howToSolve, qualityTier);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingResponseDataDiagnosesDiagnosisResults {\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    howToSolve: ").append(toIndentedString(howToSolve)).append("\n");
        sb.append("    qualityTier: ").append(toIndentedString(qualityTier)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingResponseDataDiagnosesDiagnosisResults to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingResponseDataDiagnosesDiagnosisResults.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingResponseDataDiagnosesDiagnosisResults' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingResponseDataDiagnosesDiagnosisResults> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingResponseDataDiagnosesDiagnosisResults.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingResponseDataDiagnosesDiagnosisResults>() {
                @Override
                public void write(JsonWriter out, CheckProductListingResponseDataDiagnosesDiagnosisResults value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingResponseDataDiagnosesDiagnosisResults read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

