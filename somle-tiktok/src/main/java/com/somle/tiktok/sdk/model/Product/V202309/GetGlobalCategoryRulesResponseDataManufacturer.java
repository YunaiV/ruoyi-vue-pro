/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetGlobalCategoryRulesResponseDataManufacturer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetGlobalCategoryRulesResponseDataManufacturer {
    public static final String SERIALIZED_NAME_IS_REQUIRED = "is_required";
    public static final String SERIALIZED_NAME_OPTIONAL_REGIONS = "optional_regions";
    public static final String SERIALIZED_NAME_REQUIRED_REGIONS = "required_regions";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("is_required");
        openapiFields.add("optional_regions");
        openapiFields.add("required_regions");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
    private Boolean isRequired;
    @SerializedName(SERIALIZED_NAME_OPTIONAL_REGIONS)
    private List<String> optionalRegions = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_REQUIRED_REGIONS)
    private List<String> requiredRegions = new ArrayList<>();

    public GetGlobalCategoryRulesResponseDataManufacturer() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetGlobalCategoryRulesResponseDataManufacturer
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetGlobalCategoryRulesResponseDataManufacturer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetGlobalCategoryRulesResponseDataManufacturer is not found in the empty JSON string", GetGlobalCategoryRulesResponseDataManufacturer.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetGlobalCategoryRulesResponseDataManufacturer.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGlobalCategoryRulesResponseDataManufacturer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("optional_regions") != null && !jsonObj.get("optional_regions").isJsonNull() && !jsonObj.get("optional_regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `optional_regions` to be an array in the JSON string but got `%s`", jsonObj.get("optional_regions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("required_regions") != null && !jsonObj.get("required_regions").isJsonNull() && !jsonObj.get("required_regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `required_regions` to be an array in the JSON string but got `%s`", jsonObj.get("required_regions").toString()));
        }
    }

    /**
     * Create an instance of GetGlobalCategoryRulesResponseDataManufacturer given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetGlobalCategoryRulesResponseDataManufacturer
     * @throws IOException if the JSON string is invalid with respect to GetGlobalCategoryRulesResponseDataManufacturer
     */
    public static GetGlobalCategoryRulesResponseDataManufacturer fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetGlobalCategoryRulesResponseDataManufacturer.class);
    }

    public GetGlobalCategoryRulesResponseDataManufacturer isRequired(Boolean isRequired) {
        this.isRequired = isRequired;
        return this;
    }

    /**
     * A flag to indicate whether the manufacturer is required for **all EU markets**. - true: The manufacturer is required in all EU markets. - false: The manufacturer is required only in some EU markets. Refer to &#x60;required_regions&#x60; and &#x60;optional_regions&#x60; for details.
     *
     * @return isRequired
     **/
    @javax.annotation.Nullable
    public Boolean getIsRequired() {
        return isRequired;
    }

    public void setIsRequired(Boolean isRequired) {
        this.isRequired = isRequired;
    }

    public GetGlobalCategoryRulesResponseDataManufacturer optionalRegions(List<String> optionalRegions) {
        this.optionalRegions = optionalRegions;
        return this;
    }

    public GetGlobalCategoryRulesResponseDataManufacturer addOptionalRegionsItem(String optionalRegionsItem) {
        if (this.optionalRegions == null) {
            this.optionalRegions = new ArrayList<>();
        }
        this.optionalRegions.add(optionalRegionsItem);
        return this;
    }

    /**
     * The markets where the manufacturer is optional. Possible values: - DE: Germany - ES: Spain - FR: France - IT: Italy - IE: Ireland
     *
     * @return optionalRegions
     **/
    @javax.annotation.Nullable
    public List<String> getOptionalRegions() {
        return optionalRegions;
    }

    public void setOptionalRegions(List<String> optionalRegions) {
        this.optionalRegions = optionalRegions;
    }

    public GetGlobalCategoryRulesResponseDataManufacturer requiredRegions(List<String> requiredRegions) {
        this.requiredRegions = requiredRegions;
        return this;
    }

    public GetGlobalCategoryRulesResponseDataManufacturer addRequiredRegionsItem(String requiredRegionsItem) {
        if (this.requiredRegions == null) {
            this.requiredRegions = new ArrayList<>();
        }
        this.requiredRegions.add(requiredRegionsItem);
        return this;
    }

    /**
     * The markets where the manufacturer is required. Possible values: - DE: Germany - ES: Spain - FR: France - IT: Italy - IE: Ireland
     *
     * @return requiredRegions
     **/
    @javax.annotation.Nullable
    public List<String> getRequiredRegions() {
        return requiredRegions;
    }

    public void setRequiredRegions(List<String> requiredRegions) {
        this.requiredRegions = requiredRegions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetGlobalCategoryRulesResponseDataManufacturer product202309GetGlobalCategoryRulesResponseDataManufacturer = (GetGlobalCategoryRulesResponseDataManufacturer) o;
        return Objects.equals(this.isRequired, product202309GetGlobalCategoryRulesResponseDataManufacturer.isRequired) &&
            Objects.equals(this.optionalRegions, product202309GetGlobalCategoryRulesResponseDataManufacturer.optionalRegions) &&
            Objects.equals(this.requiredRegions, product202309GetGlobalCategoryRulesResponseDataManufacturer.requiredRegions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(isRequired, optionalRegions, requiredRegions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetGlobalCategoryRulesResponseDataManufacturer {\n");
        sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
        sb.append("    optionalRegions: ").append(toIndentedString(optionalRegions)).append("\n");
        sb.append("    requiredRegions: ").append(toIndentedString(requiredRegions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetGlobalCategoryRulesResponseDataManufacturer to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetGlobalCategoryRulesResponseDataManufacturer.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetGlobalCategoryRulesResponseDataManufacturer' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetGlobalCategoryRulesResponseDataManufacturer> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetGlobalCategoryRulesResponseDataManufacturer.class));

            return (TypeAdapter<T>) new TypeAdapter<GetGlobalCategoryRulesResponseDataManufacturer>() {
                @Override
                public void write(JsonWriter out, GetGlobalCategoryRulesResponseDataManufacturer value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetGlobalCategoryRulesResponseDataManufacturer read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

