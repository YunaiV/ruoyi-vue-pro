/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetGlobalCategoryRulesResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetGlobalCategoryRulesResponseData {
    public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
    public static final String SERIALIZED_NAME_PRODUCT_CERTIFICATIONS = "product_certifications";
    public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON = "responsible_person";
    public static final String SERIALIZED_NAME_SIZE_CHART = "size_chart";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("manufacturer");
        openapiFields.add("product_certifications");
        openapiFields.add("responsible_person");
        openapiFields.add("size_chart");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_MANUFACTURER)
    private GetGlobalCategoryRulesResponseDataManufacturer manufacturer;
    @SerializedName(SERIALIZED_NAME_PRODUCT_CERTIFICATIONS)
    private List<GetGlobalCategoryRulesResponseDataProductCertifications> productCertifications = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON)
    private GetGlobalCategoryRulesResponseDataResponsiblePerson responsiblePerson;
    @SerializedName(SERIALIZED_NAME_SIZE_CHART)
    private GetGlobalCategoryRulesResponseDataSizeChart sizeChart;

    public GetGlobalCategoryRulesResponseData() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetGlobalCategoryRulesResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetGlobalCategoryRulesResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetGlobalCategoryRulesResponseData is not found in the empty JSON string", GetGlobalCategoryRulesResponseData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetGlobalCategoryRulesResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGlobalCategoryRulesResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `manufacturer`
        if (jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) {
            GetGlobalCategoryRulesResponseDataManufacturer.validateJsonElement(jsonObj.get("manufacturer"));
        }
        if (jsonObj.get("product_certifications") != null && !jsonObj.get("product_certifications").isJsonNull()) {
            JsonArray jsonArrayproductCertifications = jsonObj.getAsJsonArray("product_certifications");
            if (jsonArrayproductCertifications != null) {
                // ensure the json data is an array
                if (!jsonObj.get("product_certifications").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `product_certifications` to be an array in the JSON string but got `%s`", jsonObj.get("product_certifications").toString()));
                }

                // validate the optional field `product_certifications` (array)
                for (int i = 0; i < jsonArrayproductCertifications.size(); i++) {
                    GetGlobalCategoryRulesResponseDataProductCertifications.validateJsonElement(jsonArrayproductCertifications.get(i));
                }
                ;
            }
        }
        // validate the optional field `responsible_person`
        if (jsonObj.get("responsible_person") != null && !jsonObj.get("responsible_person").isJsonNull()) {
            GetGlobalCategoryRulesResponseDataResponsiblePerson.validateJsonElement(jsonObj.get("responsible_person"));
        }
        // validate the optional field `size_chart`
        if (jsonObj.get("size_chart") != null && !jsonObj.get("size_chart").isJsonNull()) {
            GetGlobalCategoryRulesResponseDataSizeChart.validateJsonElement(jsonObj.get("size_chart"));
        }
    }

    /**
     * Create an instance of GetGlobalCategoryRulesResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetGlobalCategoryRulesResponseData
     * @throws IOException if the JSON string is invalid with respect to GetGlobalCategoryRulesResponseData
     */
    public static GetGlobalCategoryRulesResponseData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetGlobalCategoryRulesResponseData.class);
    }

    public GetGlobalCategoryRulesResponseData manufacturer(GetGlobalCategoryRulesResponseDataManufacturer manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get manufacturer
     *
     * @return manufacturer
     **/
    @javax.annotation.Nullable
    public GetGlobalCategoryRulesResponseDataManufacturer getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(GetGlobalCategoryRulesResponseDataManufacturer manufacturer) {
        this.manufacturer = manufacturer;
    }

    public GetGlobalCategoryRulesResponseData productCertifications(List<GetGlobalCategoryRulesResponseDataProductCertifications> productCertifications) {
        this.productCertifications = productCertifications;
        return this;
    }

    public GetGlobalCategoryRulesResponseData addProductCertificationsItem(GetGlobalCategoryRulesResponseDataProductCertifications productCertificationsItem) {
        if (this.productCertifications == null) {
            this.productCertifications = new ArrayList<>();
        }
        this.productCertifications.add(productCertificationsItem);
        return this;
    }

    /**
     * Certification related rules. As per TikTok Shop guidelines, certifications are required for certain restricted product categories. Refer to [TikTok Shop Restricted Products Policy](https://seller-us.tiktok.com/university/essay?identity&#x3D;1&amp;role&#x3D;1&amp;knowledge_id&#x3D;3238037484275457&amp;from&#x3D;policy) for information on product category restrictions.  If this is empty, it means certifications are not required for this category.
     *
     * @return productCertifications
     **/
    @javax.annotation.Nullable
    public List<GetGlobalCategoryRulesResponseDataProductCertifications> getProductCertifications() {
        return productCertifications;
    }

    public void setProductCertifications(List<GetGlobalCategoryRulesResponseDataProductCertifications> productCertifications) {
        this.productCertifications = productCertifications;
    }

    public GetGlobalCategoryRulesResponseData responsiblePerson(GetGlobalCategoryRulesResponseDataResponsiblePerson responsiblePerson) {
        this.responsiblePerson = responsiblePerson;
        return this;
    }

    /**
     * Get responsiblePerson
     *
     * @return responsiblePerson
     **/
    @javax.annotation.Nullable
    public GetGlobalCategoryRulesResponseDataResponsiblePerson getResponsiblePerson() {
        return responsiblePerson;
    }

    public void setResponsiblePerson(GetGlobalCategoryRulesResponseDataResponsiblePerson responsiblePerson) {
        this.responsiblePerson = responsiblePerson;
    }

    public GetGlobalCategoryRulesResponseData sizeChart(GetGlobalCategoryRulesResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
        return this;
    }

    /**
     * Get sizeChart
     *
     * @return sizeChart
     **/
    @javax.annotation.Nullable
    public GetGlobalCategoryRulesResponseDataSizeChart getSizeChart() {
        return sizeChart;
    }

    public void setSizeChart(GetGlobalCategoryRulesResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetGlobalCategoryRulesResponseData product202309GetGlobalCategoryRulesResponseData = (GetGlobalCategoryRulesResponseData) o;
        return Objects.equals(this.manufacturer, product202309GetGlobalCategoryRulesResponseData.manufacturer) &&
            Objects.equals(this.productCertifications, product202309GetGlobalCategoryRulesResponseData.productCertifications) &&
            Objects.equals(this.responsiblePerson, product202309GetGlobalCategoryRulesResponseData.responsiblePerson) &&
            Objects.equals(this.sizeChart, product202309GetGlobalCategoryRulesResponseData.sizeChart);
    }

    @Override
    public int hashCode() {
        return Objects.hash(manufacturer, productCertifications, responsiblePerson, sizeChart);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetGlobalCategoryRulesResponseData {\n");
        sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
        sb.append("    productCertifications: ").append(toIndentedString(productCertifications)).append("\n");
        sb.append("    responsiblePerson: ").append(toIndentedString(responsiblePerson)).append("\n");
        sb.append("    sizeChart: ").append(toIndentedString(sizeChart)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetGlobalCategoryRulesResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetGlobalCategoryRulesResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetGlobalCategoryRulesResponseData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetGlobalCategoryRulesResponseData> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetGlobalCategoryRulesResponseData.class));

            return (TypeAdapter<T>) new TypeAdapter<GetGlobalCategoryRulesResponseData>() {
                @Override
                public void write(JsonWriter out, GetGlobalCategoryRulesResponseData value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetGlobalCategoryRulesResponseData read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

