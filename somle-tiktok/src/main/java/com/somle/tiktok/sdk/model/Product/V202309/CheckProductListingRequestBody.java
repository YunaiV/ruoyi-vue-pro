/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * CheckProductListingRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingRequestBody {
    public static final String SERIALIZED_NAME_BRAND_ID = "brand_id";
    public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
    public static final String SERIALIZED_NAME_CERTIFICATIONS = "certifications";
    public static final String SERIALIZED_NAME_DELIVERY_OPTION_IDS = "delivery_option_ids";
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    public static final String SERIALIZED_NAME_EXTERNAL_PRODUCT_ID = "external_product_id";
    public static final String SERIALIZED_NAME_IS_COD_ALLOWED = "is_cod_allowed";
    public static final String SERIALIZED_NAME_IS_PRE_OWNED = "is_pre_owned";
    public static final String SERIALIZED_NAME_LISTING_PLATFORMS = "listing_platforms";
    public static final String SERIALIZED_NAME_MAIN_IMAGES = "main_images";
    public static final String SERIALIZED_NAME_MANUFACTURER_IDS = "manufacturer_ids";
    public static final String SERIALIZED_NAME_MINIMUM_ORDER_QUANTITY = "minimum_order_quantity";
    public static final String SERIALIZED_NAME_PACKAGE_DIMENSIONS = "package_dimensions";
    public static final String SERIALIZED_NAME_PACKAGE_WEIGHT = "package_weight";
    public static final String SERIALIZED_NAME_PRIMARY_COMBINED_PRODUCT_ID = "primary_combined_product_id";
    public static final String SERIALIZED_NAME_PRODUCT_ATTRIBUTES = "product_attributes";
    public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS = "responsible_person_ids";
    public static final String SERIALIZED_NAME_SHIPPING_INSURANCE_REQUIREMENT = "shipping_insurance_requirement";
    public static final String SERIALIZED_NAME_SIZE_CHART = "size_chart";
    public static final String SERIALIZED_NAME_SKUS = "skus";
    public static final String SERIALIZED_NAME_TITLE = "title";
    public static final String SERIALIZED_NAME_VIDEO = "video";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("brand_id");
        openapiFields.add("category_id");
        openapiFields.add("certifications");
        openapiFields.add("delivery_option_ids");
        openapiFields.add("description");
        openapiFields.add("external_product_id");
        openapiFields.add("is_cod_allowed");
        openapiFields.add("is_pre_owned");
        openapiFields.add("listing_platforms");
        openapiFields.add("main_images");
        openapiFields.add("manufacturer_ids");
        openapiFields.add("minimum_order_quantity");
        openapiFields.add("package_dimensions");
        openapiFields.add("package_weight");
        openapiFields.add("primary_combined_product_id");
        openapiFields.add("product_attributes");
        openapiFields.add("responsible_person_ids");
        openapiFields.add("shipping_insurance_requirement");
        openapiFields.add("size_chart");
        openapiFields.add("skus");
        openapiFields.add("title");
        openapiFields.add("video");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_BRAND_ID)
    private String brandId;
    @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
    private String categoryId;
    @SerializedName(SERIALIZED_NAME_CERTIFICATIONS)
    private List<CheckProductListingRequestBodyCertifications> certifications = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_DELIVERY_OPTION_IDS)
    private List<String> deliveryOptionIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    @SerializedName(SERIALIZED_NAME_EXTERNAL_PRODUCT_ID)
    private String externalProductId;
    @SerializedName(SERIALIZED_NAME_IS_COD_ALLOWED)
    private Boolean isCodAllowed;
    @SerializedName(SERIALIZED_NAME_IS_PRE_OWNED)
    private Boolean isPreOwned;
    @SerializedName(SERIALIZED_NAME_LISTING_PLATFORMS)
    private List<String> listingPlatforms = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_MAIN_IMAGES)
    private List<CheckProductListingRequestBodyMainImages> mainImages = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_MANUFACTURER_IDS)
    private List<String> manufacturerIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_MINIMUM_ORDER_QUANTITY)
    private Integer minimumOrderQuantity;
    @SerializedName(SERIALIZED_NAME_PACKAGE_DIMENSIONS)
    private CheckProductListingRequestBodyPackageDimensions packageDimensions;
    @SerializedName(SERIALIZED_NAME_PACKAGE_WEIGHT)
    private CheckProductListingRequestBodyPackageWeight packageWeight;
    @SerializedName(SERIALIZED_NAME_PRIMARY_COMBINED_PRODUCT_ID)
    private String primaryCombinedProductId;
    @SerializedName(SERIALIZED_NAME_PRODUCT_ATTRIBUTES)
    private List<CheckProductListingRequestBodyProductAttributes> productAttributes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS)
    private List<String> responsiblePersonIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SHIPPING_INSURANCE_REQUIREMENT)
    private String shippingInsuranceRequirement;
    @SerializedName(SERIALIZED_NAME_SIZE_CHART)
    private CheckProductListingRequestBodySizeChart sizeChart;
    @SerializedName(SERIALIZED_NAME_SKUS)
    private List<CheckProductListingRequestBodySkus> skus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;
    @SerializedName(SERIALIZED_NAME_VIDEO)
    private CheckProductListingRequestBodyVideo video;

    public CheckProductListingRequestBody() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingRequestBody is not found in the empty JSON string", CheckProductListingRequestBody.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingRequestBody.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("brand_id") != null && !jsonObj.get("brand_id").isJsonNull()) && !jsonObj.get("brand_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `brand_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_id").toString()));
        }
        if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
        }
        if (jsonObj.get("certifications") != null && !jsonObj.get("certifications").isJsonNull()) {
            JsonArray jsonArraycertifications = jsonObj.getAsJsonArray("certifications");
            if (jsonArraycertifications != null) {
                // ensure the json data is an array
                if (!jsonObj.get("certifications").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `certifications` to be an array in the JSON string but got `%s`", jsonObj.get("certifications").toString()));
                }

                // validate the optional field `certifications` (array)
                for (int i = 0; i < jsonArraycertifications.size(); i++) {
                    CheckProductListingRequestBodyCertifications.validateJsonElement(jsonArraycertifications.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("delivery_option_ids") != null && !jsonObj.get("delivery_option_ids").isJsonNull() && !jsonObj.get("delivery_option_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `delivery_option_ids` to be an array in the JSON string but got `%s`", jsonObj.get("delivery_option_ids").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("external_product_id") != null && !jsonObj.get("external_product_id").isJsonNull()) && !jsonObj.get("external_product_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_product_id").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("listing_platforms") != null && !jsonObj.get("listing_platforms").isJsonNull() && !jsonObj.get("listing_platforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listing_platforms` to be an array in the JSON string but got `%s`", jsonObj.get("listing_platforms").toString()));
        }
        if (jsonObj.get("main_images") != null && !jsonObj.get("main_images").isJsonNull()) {
            JsonArray jsonArraymainImages = jsonObj.getAsJsonArray("main_images");
            if (jsonArraymainImages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("main_images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `main_images` to be an array in the JSON string but got `%s`", jsonObj.get("main_images").toString()));
                }

                // validate the optional field `main_images` (array)
                for (int i = 0; i < jsonArraymainImages.size(); i++) {
                    CheckProductListingRequestBodyMainImages.validateJsonElement(jsonArraymainImages.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("manufacturer_ids") != null && !jsonObj.get("manufacturer_ids").isJsonNull() && !jsonObj.get("manufacturer_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manufacturer_ids` to be an array in the JSON string but got `%s`", jsonObj.get("manufacturer_ids").toString()));
        }
        // validate the optional field `package_dimensions`
        if (jsonObj.get("package_dimensions") != null && !jsonObj.get("package_dimensions").isJsonNull()) {
            CheckProductListingRequestBodyPackageDimensions.validateJsonElement(jsonObj.get("package_dimensions"));
        }
        // validate the optional field `package_weight`
        if (jsonObj.get("package_weight") != null && !jsonObj.get("package_weight").isJsonNull()) {
            CheckProductListingRequestBodyPackageWeight.validateJsonElement(jsonObj.get("package_weight"));
        }
        if ((jsonObj.get("primary_combined_product_id") != null && !jsonObj.get("primary_combined_product_id").isJsonNull()) && !jsonObj.get("primary_combined_product_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `primary_combined_product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_combined_product_id").toString()));
        }
        if (jsonObj.get("product_attributes") != null && !jsonObj.get("product_attributes").isJsonNull()) {
            JsonArray jsonArrayproductAttributes = jsonObj.getAsJsonArray("product_attributes");
            if (jsonArrayproductAttributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("product_attributes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `product_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("product_attributes").toString()));
                }

                // validate the optional field `product_attributes` (array)
                for (int i = 0; i < jsonArrayproductAttributes.size(); i++) {
                    CheckProductListingRequestBodyProductAttributes.validateJsonElement(jsonArrayproductAttributes.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("responsible_person_ids") != null && !jsonObj.get("responsible_person_ids").isJsonNull() && !jsonObj.get("responsible_person_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responsible_person_ids` to be an array in the JSON string but got `%s`", jsonObj.get("responsible_person_ids").toString()));
        }
        if ((jsonObj.get("shipping_insurance_requirement") != null && !jsonObj.get("shipping_insurance_requirement").isJsonNull()) && !jsonObj.get("shipping_insurance_requirement").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_insurance_requirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_insurance_requirement").toString()));
        }
        // validate the optional field `size_chart`
        if (jsonObj.get("size_chart") != null && !jsonObj.get("size_chart").isJsonNull()) {
            CheckProductListingRequestBodySizeChart.validateJsonElement(jsonObj.get("size_chart"));
        }
        if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonNull()) {
            JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
            if (jsonArrayskus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
                }

                // validate the optional field `skus` (array)
                for (int i = 0; i < jsonArrayskus.size(); i++) {
                    CheckProductListingRequestBodySkus.validateJsonElement(jsonArrayskus.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
        }
        // validate the optional field `video`
        if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
            CheckProductListingRequestBodyVideo.validateJsonElement(jsonObj.get("video"));
        }
    }

    /**
     * Create an instance of CheckProductListingRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingRequestBody
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingRequestBody
     */
    public static CheckProductListingRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingRequestBody.class);
    }

    public CheckProductListingRequestBody brandId(String brandId) {
        this.brandId = brandId;
        return this;
    }

    /**
     * The ID of the brand of this product.  Use the [Get Brands API](https://partner.tiktokshop.com/docv2/page/6503075656e2bb0289dd5d01) to get the list of available brands for a shop. **Note**: Unauthorized brands won&#39;t be displayed on TikTok Shop.
     *
     * @return brandId
     **/
    @javax.annotation.Nullable
    public String getBrandId() {
        return brandId;
    }

    public void setBrandId(String brandId) {
        this.brandId = brandId;
    }

    public CheckProductListingRequestBody categoryId(String categoryId) {
        this.categoryId = categoryId;
        return this;
    }

    /**
     * The ID of the category of this product. It must be a leaf category that corresponds to the category tree type specified in the &#x60;category_version&#x60; property. Use the [Get Categories API](https://partner.tiktokshop.com/docv2/page/6509c89d0fcef602bf1acd9b) to obtain the available categories.   **Note**: - Refer to TikTok Shop Academy for information on product category restrictions. - For the US market, if you are creating products in &#x60;INVITE_ONLY&#x60; categories, you must submit a separate application through the Qualification Center on TikTok Shop Seller Center to gain access. Otherwise, even if the product audit is passed, the product will not be listed and made available to buyers. (The product status will be &#x60;PENDING&#x60; and the audit status will be &#x60;PRE_APPROVED&#x60;) - For the Indonesia market, to list a product on both TikTok Shop and Tokopedia, you must use only categories that are available on both platforms.
     *
     * @return categoryId
     **/
    @javax.annotation.Nullable
    public String getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(String categoryId) {
        this.categoryId = categoryId;
    }

    public CheckProductListingRequestBody certifications(List<CheckProductListingRequestBodyCertifications> certifications) {
        this.certifications = certifications;
        return this;
    }

    public CheckProductListingRequestBody addCertificationsItem(CheckProductListingRequestBodyCertifications certificationsItem) {
        if (this.certifications == null) {
            this.certifications = new ArrayList<>();
        }
        this.certifications.add(certificationsItem);
        return this;
    }

    /**
     * The list of certifications for your product. Max count: 10  As per TikTok Shop guidelines, certifications are required for certain restricted product categories. Retrieve the certification requirements for your product from the  [Get Category Rules API](https://partner.tiktokshop.com/docv2/page/6509c0febace3e02b74594a9). Refer to [TikTok Shop Restricted Products Policy](https://seller-us.tiktok.com/university/essay?identity&#x3D;1&amp;role&#x3D;1&amp;knowledge_id&#x3D;3238037484275457&amp;from&#x3D;policy) for information on product category restrictions.
     *
     * @return certifications
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodyCertifications> getCertifications() {
        return certifications;
    }

    public void setCertifications(List<CheckProductListingRequestBodyCertifications> certifications) {
        this.certifications = certifications;
    }

    public CheckProductListingRequestBody deliveryOptionIds(List<String> deliveryOptionIds) {
        this.deliveryOptionIds = deliveryOptionIds;
        return this;
    }

    public CheckProductListingRequestBody addDeliveryOptionIdsItem(String deliveryOptionIdsItem) {
        if (this.deliveryOptionIds == null) {
            this.deliveryOptionIds = new ArrayList<>();
        }
        this.deliveryOptionIds.add(deliveryOptionIdsItem);
        return this;
    }

    /**
     * The ID of the delivery options available for your product, delimited by commas. Retrieve the ID from [Get Warehouse Delivery Options](https://partner.tiktokshop.com/docv2/page/650aa46ebace3e02b75d9afa)
     *
     * @return deliveryOptionIds
     **/
    @javax.annotation.Nullable
    public List<String> getDeliveryOptionIds() {
        return deliveryOptionIds;
    }

    public void setDeliveryOptionIds(List<String> deliveryOptionIds) {
        this.deliveryOptionIds = deliveryOptionIds;
    }

    public CheckProductListingRequestBody description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The product description in HTML format.  **Note**: - The content must conform to the [HTML syntax](https://html.spec.whatwg.org/). All HTML tags are accepted but to optimize display on the TikTok Shop product detail page, the system will automatically convert certain tags into alternative formats, such as rendering &#x60;&lt;table&gt;&#x60; tags as images. - Max length: 10,000 characters. - Image guidelines: You must use [TikTok Shop image URLs](6509df95defece02be598a22). Max 30 &#x60;&lt;img&gt;&#x60; tags, each under 4000px with &#x60;src&#x60;, &#x60;width&#x60;, and &#x60;height&#x60; attributes.  **Recommendations**:  - If you are syncing a pre-existing description from another platform, include the full HTML source description here. - Provide a detailed description, ideally over 300 characters. - Include 3-5 key selling points, each under 250 characters, with supporting images. - Use 1600x1600 px for the image dimensions.
     *
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CheckProductListingRequestBody externalProductId(String externalProductId) {
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * An external identifier used in an external ecommerce platform. This is used to associate the product between TikTok Shop and the external ecommerce platform.  Max length: 999 characters
     *
     * @return externalProductId
     **/
    @javax.annotation.Nullable
    public String getExternalProductId() {
        return externalProductId;
    }

    public void setExternalProductId(String externalProductId) {
        this.externalProductId = externalProductId;
    }

    public CheckProductListingRequestBody isCodAllowed(Boolean isCodAllowed) {
        this.isCodAllowed = isCodAllowed;
        return this;
    }

    /**
     * A flag indicating whether to show the Cash On Delivery (COD) payment option during checkout. Use the [Get Category Rules API](https://partner.tiktokshop.com/docv2/page/6509c0febace3e02b74594a9) to check if COD is supported for your product category.  Applicable only for the following markets: - Global sellers: MY, PH, SA, TH, VN - Local sellers: ID, MY, PH, SA, TH, VN  **Note**: If COD is not supported, the listing will fail if you set this to &#x60;true&#x60;.
     *
     * @return isCodAllowed
     **/
    @javax.annotation.Nullable
    public Boolean getIsCodAllowed() {
        return isCodAllowed;
    }

    public void setIsCodAllowed(Boolean isCodAllowed) {
        this.isCodAllowed = isCodAllowed;
    }

    public CheckProductListingRequestBody isPreOwned(Boolean isPreOwned) {
        this.isPreOwned = isPreOwned;
        return this;
    }

    /**
     * A flag to indicate if the product is pre-owned.  Applicable only if TOKOPEDIA is the sole listing platform. **Note**: To list pre-owned products on the TikTok Shop platform, please specify the ID of one of the designated pre-owned product categories (e.g. pre-owned luxury bags, luggage, and accessories) in &#x60;category_id&#x60;.
     *
     * @return isPreOwned
     **/
    @javax.annotation.Nullable
    public Boolean getIsPreOwned() {
        return isPreOwned;
    }

    public void setIsPreOwned(Boolean isPreOwned) {
        this.isPreOwned = isPreOwned;
    }

    public CheckProductListingRequestBody listingPlatforms(List<String> listingPlatforms) {
        this.listingPlatforms = listingPlatforms;
        return this;
    }

    public CheckProductListingRequestBody addListingPlatformsItem(String listingPlatformsItem) {
        if (this.listingPlatforms == null) {
            this.listingPlatforms = new ArrayList<>();
        }
        this.listingPlatforms.add(listingPlatformsItem);
        return this;
    }

    /**
     * The platforms for listing the product. Possible values: - TOKOPEDIA - TIKTOK_SHOP Default: TIKTOK_SHOP  Applicable only for sellers that migrated from Tokopedia.
     *
     * @return listingPlatforms
     **/
    @javax.annotation.Nullable
    public List<String> getListingPlatforms() {
        return listingPlatforms;
    }

    public void setListingPlatforms(List<String> listingPlatforms) {
        this.listingPlatforms = listingPlatforms;
    }

    public CheckProductListingRequestBody mainImages(List<CheckProductListingRequestBodyMainImages> mainImages) {
        this.mainImages = mainImages;
        return this;
    }

    public CheckProductListingRequestBody addMainImagesItem(CheckProductListingRequestBodyMainImages mainImagesItem) {
        if (this.mainImages == null) {
            this.mainImages = new ArrayList<>();
        }
        this.mainImages.add(mainImagesItem);
        return this;
    }

    /**
     * A list of images to display in the product image gallery. - Max count: 9 - Arrange your image URIs in the sequence that they should appear on TikTok Shop. - Image dimensions: [300x300 px, 4000x4000 px]  **Recommendations**: - Use a minimum of 5 images. - The first image should have a white background. Use the [Optimize Images API](https://partner.tiktokshop.com/docv2/page/665692b35d39dc02deb49a97) to change the background to white.
     *
     * @return mainImages
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodyMainImages> getMainImages() {
        return mainImages;
    }

    public void setMainImages(List<CheckProductListingRequestBodyMainImages> mainImages) {
        this.mainImages = mainImages;
    }

    public CheckProductListingRequestBody manufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
        return this;
    }

    public CheckProductListingRequestBody addManufacturerIdsItem(String manufacturerIdsItem) {
        if (this.manufacturerIds == null) {
            this.manufacturerIds = new ArrayList<>();
        }
        this.manufacturerIds.add(manufacturerIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of manufacturer IDs. Retrieve the IDs from the [Search Manufacturers API](67066a580dcee902fa03ccf9).  **Note**: Applicable only for the EU market in certain categories. Use the [Get Category Rules API](6509c0febace3e02b74594a9) to check the requirements.
     *
     * @return manufacturerIds
     **/
    @javax.annotation.Nullable
    public List<String> getManufacturerIds() {
        return manufacturerIds;
    }

    public void setManufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
    }

    public CheckProductListingRequestBody minimumOrderQuantity(Integer minimumOrderQuantity) {
        this.minimumOrderQuantity = minimumOrderQuantity;
        return this;
    }

    /**
     * The minimum order quantity for the product. Valid range: [1, 20]  Applicable only for the Indonesia market and selected sellers in other SEA markets. Contact your account manager for more information about gaining access to this field.
     *
     * @return minimumOrderQuantity
     **/
    @javax.annotation.Nullable
    public Integer getMinimumOrderQuantity() {
        return minimumOrderQuantity;
    }

    public void setMinimumOrderQuantity(Integer minimumOrderQuantity) {
        this.minimumOrderQuantity = minimumOrderQuantity;
    }

    public CheckProductListingRequestBody packageDimensions(CheckProductListingRequestBodyPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
        return this;
    }

    /**
     * Get packageDimensions
     *
     * @return packageDimensions
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodyPackageDimensions getPackageDimensions() {
        return packageDimensions;
    }

    public void setPackageDimensions(CheckProductListingRequestBodyPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
    }

    public CheckProductListingRequestBody packageWeight(CheckProductListingRequestBodyPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
        return this;
    }

    /**
     * Get packageWeight
     *
     * @return packageWeight
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodyPackageWeight getPackageWeight() {
        return packageWeight;
    }

    public void setPackageWeight(CheckProductListingRequestBodyPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
    }

    public CheckProductListingRequestBody primaryCombinedProductId(String primaryCombinedProductId) {
        this.primaryCombinedProductId = primaryCombinedProductId;
        return this;
    }

    /**
     * If this is a combined listing product, this is the ID of the primary product.  **Note**:  - All products in a combined listing must belong to the same category as the primary product. - Required only for combined listing products.
     *
     * @return primaryCombinedProductId
     **/
    @javax.annotation.Nullable
    public String getPrimaryCombinedProductId() {
        return primaryCombinedProductId;
    }

    public void setPrimaryCombinedProductId(String primaryCombinedProductId) {
        this.primaryCombinedProductId = primaryCombinedProductId;
    }

    public CheckProductListingRequestBody productAttributes(List<CheckProductListingRequestBodyProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
        return this;
    }

    public CheckProductListingRequestBody addProductAttributesItem(CheckProductListingRequestBodyProductAttributes productAttributesItem) {
        if (this.productAttributes == null) {
            this.productAttributes = new ArrayList<>();
        }
        this.productAttributes.add(productAttributesItem);
        return this;
    }

    /**
     * A list of general attributes (e.g. manufacturer, country of origin, materials used) that describe the product as a whole, regardless of variant.   **Important**: The attributes available for use are determined by the system based on the product&#39;s assigned category, with some being mandatory. You must provide the product attributes marked as &#x60;is_required&#x60; in the response of the [Get Attributes API](6509c5784a0bb702c0561cc8) to avoid listing failure.
     *
     * @return productAttributes
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodyProductAttributes> getProductAttributes() {
        return productAttributes;
    }

    public void setProductAttributes(List<CheckProductListingRequestBodyProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
    }

    public CheckProductListingRequestBody responsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
        return this;
    }

    public CheckProductListingRequestBody addResponsiblePersonIdsItem(String responsiblePersonIdsItem) {
        if (this.responsiblePersonIds == null) {
            this.responsiblePersonIds = new ArrayList<>();
        }
        this.responsiblePersonIds.add(responsiblePersonIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of responsible person IDs. Retrieve the IDs from the [Search Responsible Persons API](67066a55f17b7d02f95d2fb1).  **Note**: Applicable only for the EU market in certain categories. Use the [Get Category Rules API](6509c0febace3e02b74594a9) to check the requirements.
     *
     * @return responsiblePersonIds
     **/
    @javax.annotation.Nullable
    public List<String> getResponsiblePersonIds() {
        return responsiblePersonIds;
    }

    public void setResponsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
    }

    public CheckProductListingRequestBody shippingInsuranceRequirement(String shippingInsuranceRequirement) {
        this.shippingInsuranceRequirement = shippingInsuranceRequirement;
        return this;
    }

    /**
     * The shipping insurance purchase requirement imposed on buyers for the product.  Possible values: - REQUIRED: Shipping insurance is mandatory and buyers can&#39;t opt out. - OPTIONAL: Buyers can choose to purchase shipping insurance through the platform. - NOT_SUPPORTED: Shipping insurance is not supported for the product. Default: OPTIONAL  Applicable only if the listing platforms include TOKOPEDIA.
     *
     * @return shippingInsuranceRequirement
     **/
    @javax.annotation.Nullable
    public String getShippingInsuranceRequirement() {
        return shippingInsuranceRequirement;
    }

    public void setShippingInsuranceRequirement(String shippingInsuranceRequirement) {
        this.shippingInsuranceRequirement = shippingInsuranceRequirement;
    }

    public CheckProductListingRequestBody sizeChart(CheckProductListingRequestBodySizeChart sizeChart) {
        this.sizeChart = sizeChart;
        return this;
    }

    /**
     * Get sizeChart
     *
     * @return sizeChart
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodySizeChart getSizeChart() {
        return sizeChart;
    }

    public void setSizeChart(CheckProductListingRequestBodySizeChart sizeChart) {
        this.sizeChart = sizeChart;
    }

    public CheckProductListingRequestBody skus(List<CheckProductListingRequestBodySkus> skus) {
        this.skus = skus;
        return this;
    }

    public CheckProductListingRequestBody addSkusItem(CheckProductListingRequestBodySkus skusItem) {
        if (this.skus == null) {
            this.skus = new ArrayList<>();
        }
        this.skus.add(skusItem);
        return this;
    }

    /**
     * A list of Stock Keeping Units (SKUs) used to identify distinct variants of the product.  **Note**: - Max SKUs for BR, EU, JP, MX, UK, US: 300 - Max SKUs for other regions: 100  **Recommendations**: Place the most important variant at the beginning of the array.
     *
     * @return skus
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodySkus> getSkus() {
        return skus;
    }

    public void setSkus(List<CheckProductListingRequestBodySkus> skus) {
        this.skus = skus;
    }

    public CheckProductListingRequestBody title(String title) {
        this.title = title;
        return this;
    }

    /**
     * The product title.  Title length: - DE, ES, FR, IE, IT, JP, UK, US: [1, 255]  - BR, MX: [1, 300]  - Other regions: [25, 255]
     *
     * @return title
     **/
    @javax.annotation.Nullable
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public CheckProductListingRequestBody video(CheckProductListingRequestBodyVideo video) {
        this.video = video;
        return this;
    }

    /**
     * Get video
     *
     * @return video
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodyVideo getVideo() {
        return video;
    }

    public void setVideo(CheckProductListingRequestBodyVideo video) {
        this.video = video;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingRequestBody product202309CheckProductListingRequestBody = (CheckProductListingRequestBody) o;
        return Objects.equals(this.brandId, product202309CheckProductListingRequestBody.brandId) &&
            Objects.equals(this.categoryId, product202309CheckProductListingRequestBody.categoryId) &&
            Objects.equals(this.certifications, product202309CheckProductListingRequestBody.certifications) &&
            Objects.equals(this.deliveryOptionIds, product202309CheckProductListingRequestBody.deliveryOptionIds) &&
            Objects.equals(this.description, product202309CheckProductListingRequestBody.description) &&
            Objects.equals(this.externalProductId, product202309CheckProductListingRequestBody.externalProductId) &&
            Objects.equals(this.isCodAllowed, product202309CheckProductListingRequestBody.isCodAllowed) &&
            Objects.equals(this.isPreOwned, product202309CheckProductListingRequestBody.isPreOwned) &&
            Objects.equals(this.listingPlatforms, product202309CheckProductListingRequestBody.listingPlatforms) &&
            Objects.equals(this.mainImages, product202309CheckProductListingRequestBody.mainImages) &&
            Objects.equals(this.manufacturerIds, product202309CheckProductListingRequestBody.manufacturerIds) &&
            Objects.equals(this.minimumOrderQuantity, product202309CheckProductListingRequestBody.minimumOrderQuantity) &&
            Objects.equals(this.packageDimensions, product202309CheckProductListingRequestBody.packageDimensions) &&
            Objects.equals(this.packageWeight, product202309CheckProductListingRequestBody.packageWeight) &&
            Objects.equals(this.primaryCombinedProductId, product202309CheckProductListingRequestBody.primaryCombinedProductId) &&
            Objects.equals(this.productAttributes, product202309CheckProductListingRequestBody.productAttributes) &&
            Objects.equals(this.responsiblePersonIds, product202309CheckProductListingRequestBody.responsiblePersonIds) &&
            Objects.equals(this.shippingInsuranceRequirement, product202309CheckProductListingRequestBody.shippingInsuranceRequirement) &&
            Objects.equals(this.sizeChart, product202309CheckProductListingRequestBody.sizeChart) &&
            Objects.equals(this.skus, product202309CheckProductListingRequestBody.skus) &&
            Objects.equals(this.title, product202309CheckProductListingRequestBody.title) &&
            Objects.equals(this.video, product202309CheckProductListingRequestBody.video);
    }

    @Override
    public int hashCode() {
        return Objects.hash(brandId, categoryId, certifications, deliveryOptionIds, description, externalProductId, isCodAllowed, isPreOwned, listingPlatforms, mainImages, manufacturerIds, minimumOrderQuantity, packageDimensions, packageWeight, primaryCombinedProductId, productAttributes, responsiblePersonIds, shippingInsuranceRequirement, sizeChart, skus, title, video);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingRequestBody {\n");
        sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
        sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
        sb.append("    certifications: ").append(toIndentedString(certifications)).append("\n");
        sb.append("    deliveryOptionIds: ").append(toIndentedString(deliveryOptionIds)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    externalProductId: ").append(toIndentedString(externalProductId)).append("\n");
        sb.append("    isCodAllowed: ").append(toIndentedString(isCodAllowed)).append("\n");
        sb.append("    isPreOwned: ").append(toIndentedString(isPreOwned)).append("\n");
        sb.append("    listingPlatforms: ").append(toIndentedString(listingPlatforms)).append("\n");
        sb.append("    mainImages: ").append(toIndentedString(mainImages)).append("\n");
        sb.append("    manufacturerIds: ").append(toIndentedString(manufacturerIds)).append("\n");
        sb.append("    minimumOrderQuantity: ").append(toIndentedString(minimumOrderQuantity)).append("\n");
        sb.append("    packageDimensions: ").append(toIndentedString(packageDimensions)).append("\n");
        sb.append("    packageWeight: ").append(toIndentedString(packageWeight)).append("\n");
        sb.append("    primaryCombinedProductId: ").append(toIndentedString(primaryCombinedProductId)).append("\n");
        sb.append("    productAttributes: ").append(toIndentedString(productAttributes)).append("\n");
        sb.append("    responsiblePersonIds: ").append(toIndentedString(responsiblePersonIds)).append("\n");
        sb.append("    shippingInsuranceRequirement: ").append(toIndentedString(shippingInsuranceRequirement)).append("\n");
        sb.append("    sizeChart: ").append(toIndentedString(sizeChart)).append("\n");
        sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    video: ").append(toIndentedString(video)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingRequestBody> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingRequestBody.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingRequestBody>() {
                @Override
                public void write(JsonWriter out, CheckProductListingRequestBody value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingRequestBody read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

