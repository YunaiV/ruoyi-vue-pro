/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetGlobalProductResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetGlobalProductResponseData {
    public static final String SERIALIZED_NAME_BRAND = "brand";
    public static final String SERIALIZED_NAME_CATEGORY = "category";
    public static final String SERIALIZED_NAME_CERTIFICATIONS = "certifications";
    public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    public static final String SERIALIZED_NAME_EXTERNAL_GLOBAL_PRODUCT_ID = "external_global_product_id";
    public static final String SERIALIZED_NAME_GLOBAL_SELLER_ID = "global_seller_id";
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_MAIN_IMAGES = "main_images";
    public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
    public static final String SERIALIZED_NAME_MANUFACTURER_IDS = "manufacturer_ids";
    public static final String SERIALIZED_NAME_PACKAGE_DIMENSIONS = "package_dimensions";
    public static final String SERIALIZED_NAME_PACKAGE_WEIGHT = "package_weight";
    public static final String SERIALIZED_NAME_PRODUCT_ATTRIBUTES = "product_attributes";
    public static final String SERIALIZED_NAME_PRODUCTS = "products";
    public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS = "responsible_person_ids";
    public static final String SERIALIZED_NAME_SIZE_CHART = "size_chart";
    public static final String SERIALIZED_NAME_SKUS = "skus";
    public static final String SERIALIZED_NAME_SOURCE_LOCALE = "source_locale";
    public static final String SERIALIZED_NAME_TITLE = "title";
    public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
    public static final String SERIALIZED_NAME_VIDEO = "video";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("brand");
        openapiFields.add("category");
        openapiFields.add("certifications");
        openapiFields.add("create_time");
        openapiFields.add("description");
        openapiFields.add("external_global_product_id");
        openapiFields.add("global_seller_id");
        openapiFields.add("id");
        openapiFields.add("main_images");
        openapiFields.add("manufacturer");
        openapiFields.add("manufacturer_ids");
        openapiFields.add("package_dimensions");
        openapiFields.add("package_weight");
        openapiFields.add("product_attributes");
        openapiFields.add("products");
        openapiFields.add("responsible_person_ids");
        openapiFields.add("size_chart");
        openapiFields.add("skus");
        openapiFields.add("source_locale");
        openapiFields.add("title");
        openapiFields.add("update_time");
        openapiFields.add("video");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_BRAND)
    private GetGlobalProductResponseDataBrand brand;
    @SerializedName(SERIALIZED_NAME_CATEGORY)
    private GetGlobalProductResponseDataCategory category;
    @SerializedName(SERIALIZED_NAME_CERTIFICATIONS)
    private List<GetGlobalProductResponseDataCertifications> certifications = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    private Long createTime;
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    @SerializedName(SERIALIZED_NAME_EXTERNAL_GLOBAL_PRODUCT_ID)
    private String externalGlobalProductId;
    @SerializedName(SERIALIZED_NAME_GLOBAL_SELLER_ID)
    private String globalSellerId;
    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_MAIN_IMAGES)
    private List<GetGlobalProductResponseDataMainImages> mainImages = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_MANUFACTURER)
    private GetGlobalProductResponseDataManufacturer manufacturer;
    @SerializedName(SERIALIZED_NAME_MANUFACTURER_IDS)
    private List<String> manufacturerIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_PACKAGE_DIMENSIONS)
    private GetGlobalProductResponseDataPackageDimensions packageDimensions;
    @SerializedName(SERIALIZED_NAME_PACKAGE_WEIGHT)
    private GetGlobalProductResponseDataPackageWeight packageWeight;
    @SerializedName(SERIALIZED_NAME_PRODUCT_ATTRIBUTES)
    private List<GetGlobalProductResponseDataProductAttributes> productAttributes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_PRODUCTS)
    private List<GetGlobalProductResponseDataProducts> products = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS)
    private List<String> responsiblePersonIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SIZE_CHART)
    private GetGlobalProductResponseDataSizeChart sizeChart;
    @SerializedName(SERIALIZED_NAME_SKUS)
    private List<GetGlobalProductResponseDataSkus> skus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SOURCE_LOCALE)
    private String sourceLocale;
    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;
    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    private Long updateTime;
    @SerializedName(SERIALIZED_NAME_VIDEO)
    private GetGlobalProductResponseDataVideo video;

    public GetGlobalProductResponseData() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetGlobalProductResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetGlobalProductResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetGlobalProductResponseData is not found in the empty JSON string", GetGlobalProductResponseData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetGlobalProductResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGlobalProductResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `brand`
        if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
            GetGlobalProductResponseDataBrand.validateJsonElement(jsonObj.get("brand"));
        }
        // validate the optional field `category`
        if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
            GetGlobalProductResponseDataCategory.validateJsonElement(jsonObj.get("category"));
        }
        if (jsonObj.get("certifications") != null && !jsonObj.get("certifications").isJsonNull()) {
            JsonArray jsonArraycertifications = jsonObj.getAsJsonArray("certifications");
            if (jsonArraycertifications != null) {
                // ensure the json data is an array
                if (!jsonObj.get("certifications").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `certifications` to be an array in the JSON string but got `%s`", jsonObj.get("certifications").toString()));
                }

                // validate the optional field `certifications` (array)
                for (int i = 0; i < jsonArraycertifications.size(); i++) {
                    GetGlobalProductResponseDataCertifications.validateJsonElement(jsonArraycertifications.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("external_global_product_id") != null && !jsonObj.get("external_global_product_id").isJsonNull()) && !jsonObj.get("external_global_product_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_global_product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_global_product_id").toString()));
        }
        if ((jsonObj.get("global_seller_id") != null && !jsonObj.get("global_seller_id").isJsonNull()) && !jsonObj.get("global_seller_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `global_seller_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("global_seller_id").toString()));
        }
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if (jsonObj.get("main_images") != null && !jsonObj.get("main_images").isJsonNull()) {
            JsonArray jsonArraymainImages = jsonObj.getAsJsonArray("main_images");
            if (jsonArraymainImages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("main_images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `main_images` to be an array in the JSON string but got `%s`", jsonObj.get("main_images").toString()));
                }

                // validate the optional field `main_images` (array)
                for (int i = 0; i < jsonArraymainImages.size(); i++) {
                    GetGlobalProductResponseDataMainImages.validateJsonElement(jsonArraymainImages.get(i));
                }
                ;
            }
        }
        // validate the optional field `manufacturer`
        if (jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) {
            GetGlobalProductResponseDataManufacturer.validateJsonElement(jsonObj.get("manufacturer"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("manufacturer_ids") != null && !jsonObj.get("manufacturer_ids").isJsonNull() && !jsonObj.get("manufacturer_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manufacturer_ids` to be an array in the JSON string but got `%s`", jsonObj.get("manufacturer_ids").toString()));
        }
        // validate the optional field `package_dimensions`
        if (jsonObj.get("package_dimensions") != null && !jsonObj.get("package_dimensions").isJsonNull()) {
            GetGlobalProductResponseDataPackageDimensions.validateJsonElement(jsonObj.get("package_dimensions"));
        }
        // validate the optional field `package_weight`
        if (jsonObj.get("package_weight") != null && !jsonObj.get("package_weight").isJsonNull()) {
            GetGlobalProductResponseDataPackageWeight.validateJsonElement(jsonObj.get("package_weight"));
        }
        if (jsonObj.get("product_attributes") != null && !jsonObj.get("product_attributes").isJsonNull()) {
            JsonArray jsonArrayproductAttributes = jsonObj.getAsJsonArray("product_attributes");
            if (jsonArrayproductAttributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("product_attributes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `product_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("product_attributes").toString()));
                }

                // validate the optional field `product_attributes` (array)
                for (int i = 0; i < jsonArrayproductAttributes.size(); i++) {
                    GetGlobalProductResponseDataProductAttributes.validateJsonElement(jsonArrayproductAttributes.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
            JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
            if (jsonArrayproducts != null) {
                // ensure the json data is an array
                if (!jsonObj.get("products").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
                }

                // validate the optional field `products` (array)
                for (int i = 0; i < jsonArrayproducts.size(); i++) {
                    GetGlobalProductResponseDataProducts.validateJsonElement(jsonArrayproducts.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("responsible_person_ids") != null && !jsonObj.get("responsible_person_ids").isJsonNull() && !jsonObj.get("responsible_person_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responsible_person_ids` to be an array in the JSON string but got `%s`", jsonObj.get("responsible_person_ids").toString()));
        }
        // validate the optional field `size_chart`
        if (jsonObj.get("size_chart") != null && !jsonObj.get("size_chart").isJsonNull()) {
            GetGlobalProductResponseDataSizeChart.validateJsonElement(jsonObj.get("size_chart"));
        }
        if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonNull()) {
            JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
            if (jsonArrayskus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
                }

                // validate the optional field `skus` (array)
                for (int i = 0; i < jsonArrayskus.size(); i++) {
                    GetGlobalProductResponseDataSkus.validateJsonElement(jsonArrayskus.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("source_locale") != null && !jsonObj.get("source_locale").isJsonNull()) && !jsonObj.get("source_locale").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `source_locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_locale").toString()));
        }
        if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
        }
        // validate the optional field `video`
        if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
            GetGlobalProductResponseDataVideo.validateJsonElement(jsonObj.get("video"));
        }
    }

    /**
     * Create an instance of GetGlobalProductResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetGlobalProductResponseData
     * @throws IOException if the JSON string is invalid with respect to GetGlobalProductResponseData
     */
    public static GetGlobalProductResponseData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetGlobalProductResponseData.class);
    }

    public GetGlobalProductResponseData brand(GetGlobalProductResponseDataBrand brand) {
        this.brand = brand;
        return this;
    }

    /**
     * Get brand
     *
     * @return brand
     **/
    @javax.annotation.Nullable
    public GetGlobalProductResponseDataBrand getBrand() {
        return brand;
    }

    public void setBrand(GetGlobalProductResponseDataBrand brand) {
        this.brand = brand;
    }

    public GetGlobalProductResponseData category(GetGlobalProductResponseDataCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get category
     *
     * @return category
     **/
    @javax.annotation.Nullable
    public GetGlobalProductResponseDataCategory getCategory() {
        return category;
    }

    public void setCategory(GetGlobalProductResponseDataCategory category) {
        this.category = category;
    }

    public GetGlobalProductResponseData certifications(List<GetGlobalProductResponseDataCertifications> certifications) {
        this.certifications = certifications;
        return this;
    }

    public GetGlobalProductResponseData addCertificationsItem(GetGlobalProductResponseDataCertifications certificationsItem) {
        if (this.certifications == null) {
            this.certifications = new ArrayList<>();
        }
        this.certifications.add(certificationsItem);
        return this;
    }

    /**
     * The list of certifications for your product.
     *
     * @return certifications
     **/
    @javax.annotation.Nullable
    public List<GetGlobalProductResponseDataCertifications> getCertifications() {
        return certifications;
    }

    public void setCertifications(List<GetGlobalProductResponseDataCertifications> certifications) {
        this.certifications = certifications;
    }

    public GetGlobalProductResponseData createTime(Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * The time when the product is created. Unix timestamp.
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public GetGlobalProductResponseData description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The product description in HTML format.
     *
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public GetGlobalProductResponseData externalGlobalProductId(String externalGlobalProductId) {
        this.externalGlobalProductId = externalGlobalProductId;
        return this;
    }

    /**
     * An external identifier used in an external ecommerce platform. This is used to associate the product between TikTok Shop and the external ecommerce platform.
     *
     * @return externalGlobalProductId
     **/
    @javax.annotation.Nullable
    public String getExternalGlobalProductId() {
        return externalGlobalProductId;
    }

    public void setExternalGlobalProductId(String externalGlobalProductId) {
        this.externalGlobalProductId = externalGlobalProductId;
    }

    public GetGlobalProductResponseData globalSellerId(String globalSellerId) {
        this.globalSellerId = globalSellerId;
        return this;
    }

    /**
     * The cross-border seller ID.
     *
     * @return globalSellerId
     **/
    @javax.annotation.Nullable
    public String getGlobalSellerId() {
        return globalSellerId;
    }

    public void setGlobalSellerId(String globalSellerId) {
        this.globalSellerId = globalSellerId;
    }

    public GetGlobalProductResponseData id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The global product ID in TikTok Shop.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public GetGlobalProductResponseData mainImages(List<GetGlobalProductResponseDataMainImages> mainImages) {
        this.mainImages = mainImages;
        return this;
    }

    public GetGlobalProductResponseData addMainImagesItem(GetGlobalProductResponseDataMainImages mainImagesItem) {
        if (this.mainImages == null) {
            this.mainImages = new ArrayList<>();
        }
        this.mainImages.add(mainImagesItem);
        return this;
    }

    /**
     * A list of images to display in the product image gallery.
     *
     * @return mainImages
     **/
    @javax.annotation.Nullable
    public List<GetGlobalProductResponseDataMainImages> getMainImages() {
        return mainImages;
    }

    public void setMainImages(List<GetGlobalProductResponseDataMainImages> mainImages) {
        this.mainImages = mainImages;
    }

    public GetGlobalProductResponseData manufacturer(GetGlobalProductResponseDataManufacturer manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Get manufacturer
     *
     * @return manufacturer
     **/
    @javax.annotation.Nullable
    public GetGlobalProductResponseDataManufacturer getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(GetGlobalProductResponseDataManufacturer manufacturer) {
        this.manufacturer = manufacturer;
    }

    public GetGlobalProductResponseData manufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
        return this;
    }

    public GetGlobalProductResponseData addManufacturerIdsItem(String manufacturerIdsItem) {
        if (this.manufacturerIds == null) {
            this.manufacturerIds = new ArrayList<>();
        }
        this.manufacturerIds.add(manufacturerIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of manufacturer IDs. Retrieve the IDs from the [Search Manufacturers API](67066a580dcee902fa03ccf9). **Note**: Applicable only for the EU market in certain categories.
     *
     * @return manufacturerIds
     **/
    @javax.annotation.Nullable
    public List<String> getManufacturerIds() {
        return manufacturerIds;
    }

    public void setManufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
    }

    public GetGlobalProductResponseData packageDimensions(GetGlobalProductResponseDataPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
        return this;
    }

    /**
     * Get packageDimensions
     *
     * @return packageDimensions
     **/
    @javax.annotation.Nullable
    public GetGlobalProductResponseDataPackageDimensions getPackageDimensions() {
        return packageDimensions;
    }

    public void setPackageDimensions(GetGlobalProductResponseDataPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
    }

    public GetGlobalProductResponseData packageWeight(GetGlobalProductResponseDataPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
        return this;
    }

    /**
     * Get packageWeight
     *
     * @return packageWeight
     **/
    @javax.annotation.Nullable
    public GetGlobalProductResponseDataPackageWeight getPackageWeight() {
        return packageWeight;
    }

    public void setPackageWeight(GetGlobalProductResponseDataPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
    }

    public GetGlobalProductResponseData productAttributes(List<GetGlobalProductResponseDataProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
        return this;
    }

    public GetGlobalProductResponseData addProductAttributesItem(GetGlobalProductResponseDataProductAttributes productAttributesItem) {
        if (this.productAttributes == null) {
            this.productAttributes = new ArrayList<>();
        }
        this.productAttributes.add(productAttributesItem);
        return this;
    }

    /**
     * A list of general attributes (e.g. manufacturer, country of origin, materials used) that describe the product as a whole, regardless of variant.
     *
     * @return productAttributes
     **/
    @javax.annotation.Nullable
    public List<GetGlobalProductResponseDataProductAttributes> getProductAttributes() {
        return productAttributes;
    }

    public void setProductAttributes(List<GetGlobalProductResponseDataProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
    }

    public GetGlobalProductResponseData products(List<GetGlobalProductResponseDataProducts> products) {
        this.products = products;
        return this;
    }

    public GetGlobalProductResponseData addProductsItem(GetGlobalProductResponseDataProducts productsItem) {
        if (this.products == null) {
            this.products = new ArrayList<>();
        }
        this.products.add(productsItem);
        return this;
    }

    /**
     * The local products associated through global product publishing or manual binding.
     *
     * @return products
     **/
    @javax.annotation.Nullable
    public List<GetGlobalProductResponseDataProducts> getProducts() {
        return products;
    }

    public void setProducts(List<GetGlobalProductResponseDataProducts> products) {
        this.products = products;
    }

    public GetGlobalProductResponseData responsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
        return this;
    }

    public GetGlobalProductResponseData addResponsiblePersonIdsItem(String responsiblePersonIdsItem) {
        if (this.responsiblePersonIds == null) {
            this.responsiblePersonIds = new ArrayList<>();
        }
        this.responsiblePersonIds.add(responsiblePersonIdsItem);
        return this;
    }

    /**
     * A comma-delimited list of responsible person IDs. Retrieve the IDs from the [Search Responsible Persons API](67066a55f17b7d02f95d2fb1). **Note**: Applicable only for the EU market in certain categories.
     *
     * @return responsiblePersonIds
     **/
    @javax.annotation.Nullable
    public List<String> getResponsiblePersonIds() {
        return responsiblePersonIds;
    }

    public void setResponsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
    }

    public GetGlobalProductResponseData sizeChart(GetGlobalProductResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
        return this;
    }

    /**
     * Get sizeChart
     *
     * @return sizeChart
     **/
    @javax.annotation.Nullable
    public GetGlobalProductResponseDataSizeChart getSizeChart() {
        return sizeChart;
    }

    public void setSizeChart(GetGlobalProductResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
    }

    public GetGlobalProductResponseData skus(List<GetGlobalProductResponseDataSkus> skus) {
        this.skus = skus;
        return this;
    }

    public GetGlobalProductResponseData addSkusItem(GetGlobalProductResponseDataSkus skusItem) {
        if (this.skus == null) {
            this.skus = new ArrayList<>();
        }
        this.skus.add(skusItem);
        return this;
    }

    /**
     * A list of global Stock Keeping Units (SKUs) used to identify distinct variants of the product.
     *
     * @return skus
     **/
    @javax.annotation.Nullable
    public List<GetGlobalProductResponseDataSkus> getSkus() {
        return skus;
    }

    public void setSkus(List<GetGlobalProductResponseDataSkus> skus) {
        this.skus = skus;
    }

    public GetGlobalProductResponseData sourceLocale(String sourceLocale) {
        this.sourceLocale = sourceLocale;
        return this;
    }

    /**
     * The BCP-47 locale code representing the source language used for specifying the product information. Default: en-US Possible values: - de-DE - en-IE - es-ES - fr-FR - it-IT  **Note**: Applicable only for intra-EU sellers.
     *
     * @return sourceLocale
     **/
    @javax.annotation.Nullable
    public String getSourceLocale() {
        return sourceLocale;
    }

    public void setSourceLocale(String sourceLocale) {
        this.sourceLocale = sourceLocale;
    }

    public GetGlobalProductResponseData title(String title) {
        this.title = title;
        return this;
    }

    /**
     * The product title.
     *
     * @return title
     **/
    @javax.annotation.Nullable
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public GetGlobalProductResponseData updateTime(Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * The time when the product is last updated. Unix timestamp.
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
    }

    public GetGlobalProductResponseData video(GetGlobalProductResponseDataVideo video) {
        this.video = video;
        return this;
    }

    /**
     * Get video
     *
     * @return video
     **/
    @javax.annotation.Nullable
    public GetGlobalProductResponseDataVideo getVideo() {
        return video;
    }

    public void setVideo(GetGlobalProductResponseDataVideo video) {
        this.video = video;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetGlobalProductResponseData product202309GetGlobalProductResponseData = (GetGlobalProductResponseData) o;
        return Objects.equals(this.brand, product202309GetGlobalProductResponseData.brand) &&
            Objects.equals(this.category, product202309GetGlobalProductResponseData.category) &&
            Objects.equals(this.certifications, product202309GetGlobalProductResponseData.certifications) &&
            Objects.equals(this.createTime, product202309GetGlobalProductResponseData.createTime) &&
            Objects.equals(this.description, product202309GetGlobalProductResponseData.description) &&
            Objects.equals(this.externalGlobalProductId, product202309GetGlobalProductResponseData.externalGlobalProductId) &&
            Objects.equals(this.globalSellerId, product202309GetGlobalProductResponseData.globalSellerId) &&
            Objects.equals(this.id, product202309GetGlobalProductResponseData.id) &&
            Objects.equals(this.mainImages, product202309GetGlobalProductResponseData.mainImages) &&
            Objects.equals(this.manufacturer, product202309GetGlobalProductResponseData.manufacturer) &&
            Objects.equals(this.manufacturerIds, product202309GetGlobalProductResponseData.manufacturerIds) &&
            Objects.equals(this.packageDimensions, product202309GetGlobalProductResponseData.packageDimensions) &&
            Objects.equals(this.packageWeight, product202309GetGlobalProductResponseData.packageWeight) &&
            Objects.equals(this.productAttributes, product202309GetGlobalProductResponseData.productAttributes) &&
            Objects.equals(this.products, product202309GetGlobalProductResponseData.products) &&
            Objects.equals(this.responsiblePersonIds, product202309GetGlobalProductResponseData.responsiblePersonIds) &&
            Objects.equals(this.sizeChart, product202309GetGlobalProductResponseData.sizeChart) &&
            Objects.equals(this.skus, product202309GetGlobalProductResponseData.skus) &&
            Objects.equals(this.sourceLocale, product202309GetGlobalProductResponseData.sourceLocale) &&
            Objects.equals(this.title, product202309GetGlobalProductResponseData.title) &&
            Objects.equals(this.updateTime, product202309GetGlobalProductResponseData.updateTime) &&
            Objects.equals(this.video, product202309GetGlobalProductResponseData.video);
    }

    @Override
    public int hashCode() {
        return Objects.hash(brand, category, certifications, createTime, description, externalGlobalProductId, globalSellerId, id, mainImages, manufacturer, manufacturerIds, packageDimensions, packageWeight, productAttributes, products, responsiblePersonIds, sizeChart, skus, sourceLocale, title, updateTime, video);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetGlobalProductResponseData {\n");
        sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    certifications: ").append(toIndentedString(certifications)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    externalGlobalProductId: ").append(toIndentedString(externalGlobalProductId)).append("\n");
        sb.append("    globalSellerId: ").append(toIndentedString(globalSellerId)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    mainImages: ").append(toIndentedString(mainImages)).append("\n");
        sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
        sb.append("    manufacturerIds: ").append(toIndentedString(manufacturerIds)).append("\n");
        sb.append("    packageDimensions: ").append(toIndentedString(packageDimensions)).append("\n");
        sb.append("    packageWeight: ").append(toIndentedString(packageWeight)).append("\n");
        sb.append("    productAttributes: ").append(toIndentedString(productAttributes)).append("\n");
        sb.append("    products: ").append(toIndentedString(products)).append("\n");
        sb.append("    responsiblePersonIds: ").append(toIndentedString(responsiblePersonIds)).append("\n");
        sb.append("    sizeChart: ").append(toIndentedString(sizeChart)).append("\n");
        sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
        sb.append("    sourceLocale: ").append(toIndentedString(sourceLocale)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    video: ").append(toIndentedString(video)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetGlobalProductResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetGlobalProductResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetGlobalProductResponseData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetGlobalProductResponseData> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetGlobalProductResponseData.class));

            return (TypeAdapter<T>) new TypeAdapter<GetGlobalProductResponseData>() {
                @Override
                public void write(JsonWriter out, GetGlobalProductResponseData value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetGlobalProductResponseData read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

