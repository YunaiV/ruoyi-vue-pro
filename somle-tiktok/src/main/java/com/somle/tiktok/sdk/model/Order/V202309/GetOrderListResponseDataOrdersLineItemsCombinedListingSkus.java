/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Order.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * GetOrderListResponseDataOrdersLineItemsCombinedListingSkus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetOrderListResponseDataOrdersLineItemsCombinedListingSkus {
    public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
    public static final String SERIALIZED_NAME_SELLER_SKU = "seller_sku";
    public static final String SERIALIZED_NAME_SKU_COUNT = "sku_count";
    public static final String SERIALIZED_NAME_SKU_ID = "sku_id";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("product_id");
        openapiFields.add("seller_sku");
        openapiFields.add("sku_count");
        openapiFields.add("sku_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
    private String productId;
    @SerializedName(SERIALIZED_NAME_SELLER_SKU)
    private String sellerSku;
    @SerializedName(SERIALIZED_NAME_SKU_COUNT)
    private Integer skuCount;
    @SerializedName(SERIALIZED_NAME_SKU_ID)
    private String skuId;

    public GetOrderListResponseDataOrdersLineItemsCombinedListingSkus() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetOrderListResponseDataOrdersLineItemsCombinedListingSkus
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrderListResponseDataOrdersLineItemsCombinedListingSkus is not found in the empty JSON string", GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrderListResponseDataOrdersLineItemsCombinedListingSkus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("product_id") != null && !jsonObj.get("product_id").isJsonNull()) && !jsonObj.get("product_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
        }
        if ((jsonObj.get("seller_sku") != null && !jsonObj.get("seller_sku").isJsonNull()) && !jsonObj.get("seller_sku").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_sku").toString()));
        }
        if ((jsonObj.get("sku_id") != null && !jsonObj.get("sku_id").isJsonNull()) && !jsonObj.get("sku_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sku_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_id").toString()));
        }
    }

    /**
     * Create an instance of GetOrderListResponseDataOrdersLineItemsCombinedListingSkus given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetOrderListResponseDataOrdersLineItemsCombinedListingSkus
     * @throws IOException if the JSON string is invalid with respect to GetOrderListResponseDataOrdersLineItemsCombinedListingSkus
     */
    public static GetOrderListResponseDataOrdersLineItemsCombinedListingSkus fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.class);
    }

    public GetOrderListResponseDataOrdersLineItemsCombinedListingSkus productId(String productId) {
        this.productId = productId;
        return this;
    }

    /**
     * The original product ID related to the combined listing SKU.
     *
     * @return productId
     **/
    @javax.annotation.Nullable
    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public GetOrderListResponseDataOrdersLineItemsCombinedListingSkus sellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
        return this;
    }

    /**
     * The original seller SKU (which is defined by the seller) related to the combined listing SKU.
     *
     * @return sellerSku
     **/
    @javax.annotation.Nullable
    public String getSellerSku() {
        return sellerSku;
    }

    public void setSellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
    }

    public GetOrderListResponseDataOrdersLineItemsCombinedListingSkus skuCount(Integer skuCount) {
        this.skuCount = skuCount;
        return this;
    }

    /**
     * The quantity of original SKUs that compose the combined listing SKU.
     *
     * @return skuCount
     **/
    @javax.annotation.Nullable
    public Integer getSkuCount() {
        return skuCount;
    }

    public void setSkuCount(Integer skuCount) {
        this.skuCount = skuCount;
    }

    public GetOrderListResponseDataOrdersLineItemsCombinedListingSkus skuId(String skuId) {
        this.skuId = skuId;
        return this;
    }

    /**
     * The original SKU ID related to the combined listing SKU.
     *
     * @return skuId
     **/
    @javax.annotation.Nullable
    public String getSkuId() {
        return skuId;
    }

    public void setSkuId(String skuId) {
        this.skuId = skuId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOrderListResponseDataOrdersLineItemsCombinedListingSkus order202309GetOrderListResponseDataOrdersLineItemsCombinedListingSkus = (GetOrderListResponseDataOrdersLineItemsCombinedListingSkus) o;
        return Objects.equals(this.productId, order202309GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.productId) &&
            Objects.equals(this.sellerSku, order202309GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.sellerSku) &&
            Objects.equals(this.skuCount, order202309GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.skuCount) &&
            Objects.equals(this.skuId, order202309GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.skuId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(productId, sellerSku, skuCount, skuId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetOrderListResponseDataOrdersLineItemsCombinedListingSkus {\n");
        sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
        sb.append("    sellerSku: ").append(toIndentedString(sellerSku)).append("\n");
        sb.append("    skuCount: ").append(toIndentedString(skuCount)).append("\n");
        sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetOrderListResponseDataOrdersLineItemsCombinedListingSkus to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetOrderListResponseDataOrdersLineItemsCombinedListingSkus' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetOrderListResponseDataOrdersLineItemsCombinedListingSkus> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.class));

            return (TypeAdapter<T>) new TypeAdapter<GetOrderListResponseDataOrdersLineItemsCombinedListingSkus>() {
                @Override
                public void write(JsonWriter out, GetOrderListResponseDataOrdersLineItemsCombinedListingSkus value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetOrderListResponseDataOrdersLineItemsCombinedListingSkus read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

