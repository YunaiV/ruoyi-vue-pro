/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * CheckProductListingResponseDataDiagnosesSuggestions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingResponseDataDiagnosesSuggestions {
    public static final String SERIALIZED_NAME_IMAGES = "images";
    public static final String SERIALIZED_NAME_SEO_WORDS = "seo_words";
    public static final String SERIALIZED_NAME_SMART_TEXTS = "smart_texts";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("images");
        openapiFields.add("seo_words");
        openapiFields.add("smart_texts");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_IMAGES)
    private List<CheckProductListingResponseDataDiagnosesSuggestionsImages> images = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SEO_WORDS)
    private List<CheckProductListingResponseDataDiagnosesSuggestionsSeoWords> seoWords = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SMART_TEXTS)
    private List<CheckProductListingResponseDataDiagnosesSuggestionsSmartTexts> smartTexts = new ArrayList<>();

    public CheckProductListingResponseDataDiagnosesSuggestions() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingResponseDataDiagnosesSuggestions
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingResponseDataDiagnosesSuggestions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingResponseDataDiagnosesSuggestions is not found in the empty JSON string", CheckProductListingResponseDataDiagnosesSuggestions.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingResponseDataDiagnosesSuggestions.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingResponseDataDiagnosesSuggestions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
            JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
            if (jsonArrayimages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
                }

                // validate the optional field `images` (array)
                for (int i = 0; i < jsonArrayimages.size(); i++) {
                    CheckProductListingResponseDataDiagnosesSuggestionsImages.validateJsonElement(jsonArrayimages.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("seo_words") != null && !jsonObj.get("seo_words").isJsonNull()) {
            JsonArray jsonArrayseoWords = jsonObj.getAsJsonArray("seo_words");
            if (jsonArrayseoWords != null) {
                // ensure the json data is an array
                if (!jsonObj.get("seo_words").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `seo_words` to be an array in the JSON string but got `%s`", jsonObj.get("seo_words").toString()));
                }

                // validate the optional field `seo_words` (array)
                for (int i = 0; i < jsonArrayseoWords.size(); i++) {
                    CheckProductListingResponseDataDiagnosesSuggestionsSeoWords.validateJsonElement(jsonArrayseoWords.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("smart_texts") != null && !jsonObj.get("smart_texts").isJsonNull()) {
            JsonArray jsonArraysmartTexts = jsonObj.getAsJsonArray("smart_texts");
            if (jsonArraysmartTexts != null) {
                // ensure the json data is an array
                if (!jsonObj.get("smart_texts").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `smart_texts` to be an array in the JSON string but got `%s`", jsonObj.get("smart_texts").toString()));
                }

                // validate the optional field `smart_texts` (array)
                for (int i = 0; i < jsonArraysmartTexts.size(); i++) {
                    CheckProductListingResponseDataDiagnosesSuggestionsSmartTexts.validateJsonElement(jsonArraysmartTexts.get(i));
                }
                ;
            }
        }
    }

    /**
     * Create an instance of CheckProductListingResponseDataDiagnosesSuggestions given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingResponseDataDiagnosesSuggestions
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingResponseDataDiagnosesSuggestions
     */
    public static CheckProductListingResponseDataDiagnosesSuggestions fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingResponseDataDiagnosesSuggestions.class);
    }

    public CheckProductListingResponseDataDiagnosesSuggestions images(List<CheckProductListingResponseDataDiagnosesSuggestionsImages> images) {
        this.images = images;
        return this;
    }

    public CheckProductListingResponseDataDiagnosesSuggestions addImagesItem(CheckProductListingResponseDataDiagnosesSuggestionsImages imagesItem) {
        if (this.images == null) {
            this.images = new ArrayList<>();
        }
        this.images.add(imagesItem);
        return this;
    }

    /**
     * The optimized main image. Only the first image in the main image set will be optimized.
     *
     * @return images
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingResponseDataDiagnosesSuggestionsImages> getImages() {
        return images;
    }

    public void setImages(List<CheckProductListingResponseDataDiagnosesSuggestionsImages> images) {
        this.images = images;
    }

    public CheckProductListingResponseDataDiagnosesSuggestions seoWords(List<CheckProductListingResponseDataDiagnosesSuggestionsSeoWords> seoWords) {
        this.seoWords = seoWords;
        return this;
    }

    public CheckProductListingResponseDataDiagnosesSuggestions addSeoWordsItem(CheckProductListingResponseDataDiagnosesSuggestionsSeoWords seoWordsItem) {
        if (this.seoWords == null) {
            this.seoWords = new ArrayList<>();
        }
        this.seoWords.add(seoWordsItem);
        return this;
    }

    /**
     * The SEO keyword suggestions if &#x60;diagnoses.field&#x60; is \&quot;TITLE\&quot;.
     *
     * @return seoWords
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingResponseDataDiagnosesSuggestionsSeoWords> getSeoWords() {
        return seoWords;
    }

    public void setSeoWords(List<CheckProductListingResponseDataDiagnosesSuggestionsSeoWords> seoWords) {
        this.seoWords = seoWords;
    }

    public CheckProductListingResponseDataDiagnosesSuggestions smartTexts(List<CheckProductListingResponseDataDiagnosesSuggestionsSmartTexts> smartTexts) {
        this.smartTexts = smartTexts;
        return this;
    }

    public CheckProductListingResponseDataDiagnosesSuggestions addSmartTextsItem(CheckProductListingResponseDataDiagnosesSuggestionsSmartTexts smartTextsItem) {
        if (this.smartTexts == null) {
            this.smartTexts = new ArrayList<>();
        }
        this.smartTexts.add(smartTextsItem);
        return this;
    }

    /**
     * The intelligent text suggestions for titles and descriptions.
     *
     * @return smartTexts
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingResponseDataDiagnosesSuggestionsSmartTexts> getSmartTexts() {
        return smartTexts;
    }

    public void setSmartTexts(List<CheckProductListingResponseDataDiagnosesSuggestionsSmartTexts> smartTexts) {
        this.smartTexts = smartTexts;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingResponseDataDiagnosesSuggestions product202309CheckProductListingResponseDataDiagnosesSuggestions = (CheckProductListingResponseDataDiagnosesSuggestions) o;
        return Objects.equals(this.images, product202309CheckProductListingResponseDataDiagnosesSuggestions.images) &&
            Objects.equals(this.seoWords, product202309CheckProductListingResponseDataDiagnosesSuggestions.seoWords) &&
            Objects.equals(this.smartTexts, product202309CheckProductListingResponseDataDiagnosesSuggestions.smartTexts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(images, seoWords, smartTexts);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingResponseDataDiagnosesSuggestions {\n");
        sb.append("    images: ").append(toIndentedString(images)).append("\n");
        sb.append("    seoWords: ").append(toIndentedString(seoWords)).append("\n");
        sb.append("    smartTexts: ").append(toIndentedString(smartTexts)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingResponseDataDiagnosesSuggestions to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingResponseDataDiagnosesSuggestions.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingResponseDataDiagnosesSuggestions' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingResponseDataDiagnosesSuggestions> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingResponseDataDiagnosesSuggestions.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingResponseDataDiagnosesSuggestions>() {
                @Override
                public void write(JsonWriter out, CheckProductListingResponseDataDiagnosesSuggestions value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingResponseDataDiagnosesSuggestions read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

