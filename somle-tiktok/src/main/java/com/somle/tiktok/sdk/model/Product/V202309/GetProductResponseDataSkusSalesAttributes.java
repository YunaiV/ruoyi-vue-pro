/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetProductResponseDataSkusSalesAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetProductResponseDataSkusSalesAttributes {
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_NAME = "name";
    public static final String SERIALIZED_NAME_SKU_IMG = "sku_img";
    public static final String SERIALIZED_NAME_SUPPLEMENTARY_SKU_IMAGES = "supplementary_sku_images";
    public static final String SERIALIZED_NAME_VALUE_ID = "value_id";
    public static final String SERIALIZED_NAME_VALUE_NAME = "value_name";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("sku_img");
        openapiFields.add("supplementary_sku_images");
        openapiFields.add("value_id");
        openapiFields.add("value_name");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    @SerializedName(SERIALIZED_NAME_SKU_IMG)
    private GetProductResponseDataSkusSalesAttributesSkuImg skuImg;
    @SerializedName(SERIALIZED_NAME_SUPPLEMENTARY_SKU_IMAGES)
    private List<GetProductResponseDataSkusSalesAttributesSupplementarySkuImages> supplementarySkuImages = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_VALUE_ID)
    private String valueId;
    @SerializedName(SERIALIZED_NAME_VALUE_NAME)
    private String valueName;

    public GetProductResponseDataSkusSalesAttributes() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetProductResponseDataSkusSalesAttributes
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetProductResponseDataSkusSalesAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetProductResponseDataSkusSalesAttributes is not found in the empty JSON string", GetProductResponseDataSkusSalesAttributes.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetProductResponseDataSkusSalesAttributes.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetProductResponseDataSkusSalesAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        // validate the optional field `sku_img`
        if (jsonObj.get("sku_img") != null && !jsonObj.get("sku_img").isJsonNull()) {
            GetProductResponseDataSkusSalesAttributesSkuImg.validateJsonElement(jsonObj.get("sku_img"));
        }
        if (jsonObj.get("supplementary_sku_images") != null && !jsonObj.get("supplementary_sku_images").isJsonNull()) {
            JsonArray jsonArraysupplementarySkuImages = jsonObj.getAsJsonArray("supplementary_sku_images");
            if (jsonArraysupplementarySkuImages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("supplementary_sku_images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `supplementary_sku_images` to be an array in the JSON string but got `%s`", jsonObj.get("supplementary_sku_images").toString()));
                }

                // validate the optional field `supplementary_sku_images` (array)
                for (int i = 0; i < jsonArraysupplementarySkuImages.size(); i++) {
                    GetProductResponseDataSkusSalesAttributesSupplementarySkuImages.validateJsonElement(jsonArraysupplementarySkuImages.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("value_id") != null && !jsonObj.get("value_id").isJsonNull()) && !jsonObj.get("value_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `value_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_id").toString()));
        }
        if ((jsonObj.get("value_name") != null && !jsonObj.get("value_name").isJsonNull()) && !jsonObj.get("value_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `value_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_name").toString()));
        }
    }

    /**
     * Create an instance of GetProductResponseDataSkusSalesAttributes given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetProductResponseDataSkusSalesAttributes
     * @throws IOException if the JSON string is invalid with respect to GetProductResponseDataSkusSalesAttributes
     */
    public static GetProductResponseDataSkusSalesAttributes fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetProductResponseDataSkusSalesAttributes.class);
    }

    public GetProductResponseDataSkusSalesAttributes id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The sales attribute ID.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public GetProductResponseDataSkusSalesAttributes name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The sales attribute name.
     *
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public GetProductResponseDataSkusSalesAttributes skuImg(GetProductResponseDataSkusSalesAttributesSkuImg skuImg) {
        this.skuImg = skuImg;
        return this;
    }

    /**
     * Get skuImg
     *
     * @return skuImg
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataSkusSalesAttributesSkuImg getSkuImg() {
        return skuImg;
    }

    public void setSkuImg(GetProductResponseDataSkusSalesAttributesSkuImg skuImg) {
        this.skuImg = skuImg;
    }

    public GetProductResponseDataSkusSalesAttributes supplementarySkuImages(List<GetProductResponseDataSkusSalesAttributesSupplementarySkuImages> supplementarySkuImages) {
        this.supplementarySkuImages = supplementarySkuImages;
        return this;
    }

    public GetProductResponseDataSkusSalesAttributes addSupplementarySkuImagesItem(GetProductResponseDataSkusSalesAttributesSupplementarySkuImages supplementarySkuImagesItem) {
        if (this.supplementarySkuImages == null) {
            this.supplementarySkuImages = new ArrayList<>();
        }
        this.supplementarySkuImages.add(supplementarySkuImagesItem);
        return this;
    }

    /**
     * A list of supplementary images for each value (e.g. red) of the primary sales attribute (e.g. color) to provide multiple views or details of the product for that attribute value. These appear in the product options gallery on TikTok Shop.  Applicable only for the US market.
     *
     * @return supplementarySkuImages
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataSkusSalesAttributesSupplementarySkuImages> getSupplementarySkuImages() {
        return supplementarySkuImages;
    }

    public void setSupplementarySkuImages(List<GetProductResponseDataSkusSalesAttributesSupplementarySkuImages> supplementarySkuImages) {
        this.supplementarySkuImages = supplementarySkuImages;
    }

    public GetProductResponseDataSkusSalesAttributes valueId(String valueId) {
        this.valueId = valueId;
        return this;
    }

    /**
     * The sales attribute value ID.
     *
     * @return valueId
     **/
    @javax.annotation.Nullable
    public String getValueId() {
        return valueId;
    }

    public void setValueId(String valueId) {
        this.valueId = valueId;
    }

    public GetProductResponseDataSkusSalesAttributes valueName(String valueName) {
        this.valueName = valueName;
        return this;
    }

    /**
     * The sales attribute value name.
     *
     * @return valueName
     **/
    @javax.annotation.Nullable
    public String getValueName() {
        return valueName;
    }

    public void setValueName(String valueName) {
        this.valueName = valueName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetProductResponseDataSkusSalesAttributes product202309GetProductResponseDataSkusSalesAttributes = (GetProductResponseDataSkusSalesAttributes) o;
        return Objects.equals(this.id, product202309GetProductResponseDataSkusSalesAttributes.id) &&
            Objects.equals(this.name, product202309GetProductResponseDataSkusSalesAttributes.name) &&
            Objects.equals(this.skuImg, product202309GetProductResponseDataSkusSalesAttributes.skuImg) &&
            Objects.equals(this.supplementarySkuImages, product202309GetProductResponseDataSkusSalesAttributes.supplementarySkuImages) &&
            Objects.equals(this.valueId, product202309GetProductResponseDataSkusSalesAttributes.valueId) &&
            Objects.equals(this.valueName, product202309GetProductResponseDataSkusSalesAttributes.valueName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, skuImg, supplementarySkuImages, valueId, valueName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetProductResponseDataSkusSalesAttributes {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    skuImg: ").append(toIndentedString(skuImg)).append("\n");
        sb.append("    supplementarySkuImages: ").append(toIndentedString(supplementarySkuImages)).append("\n");
        sb.append("    valueId: ").append(toIndentedString(valueId)).append("\n");
        sb.append("    valueName: ").append(toIndentedString(valueName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetProductResponseDataSkusSalesAttributes to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetProductResponseDataSkusSalesAttributes.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetProductResponseDataSkusSalesAttributes' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetProductResponseDataSkusSalesAttributes> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetProductResponseDataSkusSalesAttributes.class));

            return (TypeAdapter<T>) new TypeAdapter<GetProductResponseDataSkusSalesAttributes>() {
                @Override
                public void write(JsonWriter out, GetProductResponseDataSkusSalesAttributes value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetProductResponseDataSkusSalesAttributes read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

