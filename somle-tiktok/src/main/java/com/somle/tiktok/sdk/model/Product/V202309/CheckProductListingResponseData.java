/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * CheckProductListingResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingResponseData {
    public static final String SERIALIZED_NAME_CHECK_RESULT = "check_result";
    public static final String SERIALIZED_NAME_DIAGNOSES = "diagnoses";
    public static final String SERIALIZED_NAME_FAIL_REASONS = "fail_reasons";
    public static final String SERIALIZED_NAME_LISTING_QUALITY = "listing_quality";
    public static final String SERIALIZED_NAME_WARNINGS = "warnings";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("check_result");
        openapiFields.add("diagnoses");
        openapiFields.add("fail_reasons");
        openapiFields.add("listing_quality");
        openapiFields.add("warnings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_CHECK_RESULT)
    private String checkResult;
    @SerializedName(SERIALIZED_NAME_DIAGNOSES)
    private List<CheckProductListingResponseDataDiagnoses> diagnoses = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_FAIL_REASONS)
    private List<CheckProductListingResponseDataFailReasons> failReasons = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_LISTING_QUALITY)
    private CheckProductListingResponseDataListingQuality listingQuality;
    @SerializedName(SERIALIZED_NAME_WARNINGS)
    private CheckProductListingResponseDataWarnings warnings;

    public CheckProductListingResponseData() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingResponseData is not found in the empty JSON string", CheckProductListingResponseData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("check_result") != null && !jsonObj.get("check_result").isJsonNull()) && !jsonObj.get("check_result").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `check_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_result").toString()));
        }
        if (jsonObj.get("diagnoses") != null && !jsonObj.get("diagnoses").isJsonNull()) {
            JsonArray jsonArraydiagnoses = jsonObj.getAsJsonArray("diagnoses");
            if (jsonArraydiagnoses != null) {
                // ensure the json data is an array
                if (!jsonObj.get("diagnoses").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `diagnoses` to be an array in the JSON string but got `%s`", jsonObj.get("diagnoses").toString()));
                }

                // validate the optional field `diagnoses` (array)
                for (int i = 0; i < jsonArraydiagnoses.size(); i++) {
                    CheckProductListingResponseDataDiagnoses.validateJsonElement(jsonArraydiagnoses.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("fail_reasons") != null && !jsonObj.get("fail_reasons").isJsonNull()) {
            JsonArray jsonArrayfailReasons = jsonObj.getAsJsonArray("fail_reasons");
            if (jsonArrayfailReasons != null) {
                // ensure the json data is an array
                if (!jsonObj.get("fail_reasons").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `fail_reasons` to be an array in the JSON string but got `%s`", jsonObj.get("fail_reasons").toString()));
                }

                // validate the optional field `fail_reasons` (array)
                for (int i = 0; i < jsonArrayfailReasons.size(); i++) {
                    CheckProductListingResponseDataFailReasons.validateJsonElement(jsonArrayfailReasons.get(i));
                }
                ;
            }
        }
        // validate the optional field `listing_quality`
        if (jsonObj.get("listing_quality") != null && !jsonObj.get("listing_quality").isJsonNull()) {
            CheckProductListingResponseDataListingQuality.validateJsonElement(jsonObj.get("listing_quality"));
        }
        // validate the optional field `warnings`
        if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
            CheckProductListingResponseDataWarnings.validateJsonElement(jsonObj.get("warnings"));
        }
    }

    /**
     * Create an instance of CheckProductListingResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingResponseData
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingResponseData
     */
    public static CheckProductListingResponseData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingResponseData.class);
    }

    public CheckProductListingResponseData checkResult(String checkResult) {
        this.checkResult = checkResult;
        return this;
    }

    /**
     * The result of the product diagnosis (PASS, FAILED).
     *
     * @return checkResult
     **/
    @javax.annotation.Nullable
    public String getCheckResult() {
        return checkResult;
    }

    public void setCheckResult(String checkResult) {
        this.checkResult = checkResult;
    }

    public CheckProductListingResponseData diagnoses(List<CheckProductListingResponseDataDiagnoses> diagnoses) {
        this.diagnoses = diagnoses;
        return this;
    }

    public CheckProductListingResponseData addDiagnosesItem(CheckProductListingResponseDataDiagnoses diagnosesItem) {
        if (this.diagnoses == null) {
            this.diagnoses = new ArrayList<>();
        }
        this.diagnoses.add(diagnosesItem);
        return this;
    }

    /**
     * (**Deprecated**: This field is deprecated and will be removed in a future API version. Use [Diagnose and Optimize Product](677c9523f7765c0308b3d68d) API instead to get product diagnosis related information.) Product optimization diagnosis information.
     *
     * @return diagnoses
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingResponseDataDiagnoses> getDiagnoses() {
        return diagnoses;
    }

    public void setDiagnoses(List<CheckProductListingResponseDataDiagnoses> diagnoses) {
        this.diagnoses = diagnoses;
    }

    public CheckProductListingResponseData failReasons(List<CheckProductListingResponseDataFailReasons> failReasons) {
        this.failReasons = failReasons;
        return this;
    }

    public CheckProductListingResponseData addFailReasonsItem(CheckProductListingResponseDataFailReasons failReasonsItem) {
        if (this.failReasons == null) {
            this.failReasons = new ArrayList<>();
        }
        this.failReasons.add(failReasonsItem);
        return this;
    }

    /**
     * A list of failure reasons if &#x60;check_result&#x60; is FAILED.
     *
     * @return failReasons
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingResponseDataFailReasons> getFailReasons() {
        return failReasons;
    }

    public void setFailReasons(List<CheckProductListingResponseDataFailReasons> failReasons) {
        this.failReasons = failReasons;
    }

    public CheckProductListingResponseData listingQuality(CheckProductListingResponseDataListingQuality listingQuality) {
        this.listingQuality = listingQuality;
        return this;
    }

    /**
     * Get listingQuality
     *
     * @return listingQuality
     **/
    @javax.annotation.Nullable
    public CheckProductListingResponseDataListingQuality getListingQuality() {
        return listingQuality;
    }

    public void setListingQuality(CheckProductListingResponseDataListingQuality listingQuality) {
        this.listingQuality = listingQuality;
    }

    public CheckProductListingResponseData warnings(CheckProductListingResponseDataWarnings warnings) {
        this.warnings = warnings;
        return this;
    }

    /**
     * Get warnings
     *
     * @return warnings
     **/
    @javax.annotation.Nullable
    public CheckProductListingResponseDataWarnings getWarnings() {
        return warnings;
    }

    public void setWarnings(CheckProductListingResponseDataWarnings warnings) {
        this.warnings = warnings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingResponseData product202309CheckProductListingResponseData = (CheckProductListingResponseData) o;
        return Objects.equals(this.checkResult, product202309CheckProductListingResponseData.checkResult) &&
            Objects.equals(this.diagnoses, product202309CheckProductListingResponseData.diagnoses) &&
            Objects.equals(this.failReasons, product202309CheckProductListingResponseData.failReasons) &&
            Objects.equals(this.listingQuality, product202309CheckProductListingResponseData.listingQuality) &&
            Objects.equals(this.warnings, product202309CheckProductListingResponseData.warnings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(checkResult, diagnoses, failReasons, listingQuality, warnings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingResponseData {\n");
        sb.append("    checkResult: ").append(toIndentedString(checkResult)).append("\n");
        sb.append("    diagnoses: ").append(toIndentedString(diagnoses)).append("\n");
        sb.append("    failReasons: ").append(toIndentedString(failReasons)).append("\n");
        sb.append("    listingQuality: ").append(toIndentedString(listingQuality)).append("\n");
        sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingResponseData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingResponseData> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingResponseData.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingResponseData>() {
                @Override
                public void write(JsonWriter out, CheckProductListingResponseData value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingResponseData read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

