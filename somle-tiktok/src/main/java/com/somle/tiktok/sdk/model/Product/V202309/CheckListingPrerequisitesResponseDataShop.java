/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CheckListingPrerequisitesResponseDataShop
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckListingPrerequisitesResponseDataShop {
    public static final String SERIALIZED_NAME_BANK_ACCOUNT = "bank_account";
    public static final String SERIALIZED_NAME_CONTACT_INFO = "contact_info";
    public static final String SERIALIZED_NAME_GNE = "gne";
    public static final String SERIALIZED_NAME_LOGISTICS = "logistics";
    public static final String SERIALIZED_NAME_STATUS = "status";
    public static final String SERIALIZED_NAME_TAX_INFO = "tax_info";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("bank_account");
        openapiFields.add("contact_info");
        openapiFields.add("gne");
        openapiFields.add("logistics");
        openapiFields.add("status");
        openapiFields.add("tax_info");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
    private String bankAccount;
    @SerializedName(SERIALIZED_NAME_CONTACT_INFO)
    private String contactInfo;
    @SerializedName(SERIALIZED_NAME_GNE)
    private CheckListingPrerequisitesResponseDataShopGne gne;
    @SerializedName(SERIALIZED_NAME_LOGISTICS)
    private CheckListingPrerequisitesResponseDataShopLogistics logistics;
    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;
    @SerializedName(SERIALIZED_NAME_TAX_INFO)
    private String taxInfo;

    public CheckListingPrerequisitesResponseDataShop() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckListingPrerequisitesResponseDataShop
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckListingPrerequisitesResponseDataShop.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckListingPrerequisitesResponseDataShop is not found in the empty JSON string", CheckListingPrerequisitesResponseDataShop.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckListingPrerequisitesResponseDataShop.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckListingPrerequisitesResponseDataShop` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("bank_account") != null && !jsonObj.get("bank_account").isJsonNull()) && !jsonObj.get("bank_account").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `bank_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_account").toString()));
        }
        if ((jsonObj.get("contact_info") != null && !jsonObj.get("contact_info").isJsonNull()) && !jsonObj.get("contact_info").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `contact_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_info").toString()));
        }
        // validate the optional field `gne`
        if (jsonObj.get("gne") != null && !jsonObj.get("gne").isJsonNull()) {
            CheckListingPrerequisitesResponseDataShopGne.validateJsonElement(jsonObj.get("gne"));
        }
        // validate the optional field `logistics`
        if (jsonObj.get("logistics") != null && !jsonObj.get("logistics").isJsonNull()) {
            CheckListingPrerequisitesResponseDataShopLogistics.validateJsonElement(jsonObj.get("logistics"));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("tax_info") != null && !jsonObj.get("tax_info").isJsonNull()) && !jsonObj.get("tax_info").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_info").toString()));
        }
    }

    /**
     * Create an instance of CheckListingPrerequisitesResponseDataShop given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckListingPrerequisitesResponseDataShop
     * @throws IOException if the JSON string is invalid with respect to CheckListingPrerequisitesResponseDataShop
     */
    public static CheckListingPrerequisitesResponseDataShop fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckListingPrerequisitesResponseDataShop.class);
    }

    public CheckListingPrerequisitesResponseDataShop bankAccount(String bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }

    /**
     * Listing Prerequisites check: Whether the shop has configured a bank account. If it is not prepared, return a check failure and the product will not be sent to audition.  Detailed explanation of JSON return results： - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met, and the detailed failure reasons will be returned through the \&quot;fail_reasons\&quot; field.
     *
     * @return bankAccount
     **/
    @javax.annotation.Nullable
    public String getBankAccount() {
        return bankAccount;
    }

    public void setBankAccount(String bankAccount) {
        this.bankAccount = bankAccount;
    }

    public CheckListingPrerequisitesResponseDataShop contactInfo(String contactInfo) {
        this.contactInfo = contactInfo;
        return this;
    }

    /**
     * Listing Prerequisites check: Whether the shop has provided contact info. If it is not prepared, return a check failure and the product will not be created.  Detailed explanation of JSON return results： - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met, and the detailed failure reasons will be returned through the \&quot;fail_reasons\&quot; field.
     *
     * @return contactInfo
     **/
    @javax.annotation.Nullable
    public String getContactInfo() {
        return contactInfo;
    }

    public void setContactInfo(String contactInfo) {
        this.contactInfo = contactInfo;
    }

    public CheckListingPrerequisitesResponseDataShop gne(CheckListingPrerequisitesResponseDataShopGne gne) {
        this.gne = gne;
        return this;
    }

    /**
     * Get gne
     *
     * @return gne
     **/
    @javax.annotation.Nullable
    public CheckListingPrerequisitesResponseDataShopGne getGne() {
        return gne;
    }

    public void setGne(CheckListingPrerequisitesResponseDataShopGne gne) {
        this.gne = gne;
    }

    public CheckListingPrerequisitesResponseDataShop logistics(CheckListingPrerequisitesResponseDataShopLogistics logistics) {
        this.logistics = logistics;
        return this;
    }

    /**
     * Get logistics
     *
     * @return logistics
     **/
    @javax.annotation.Nullable
    public CheckListingPrerequisitesResponseDataShopLogistics getLogistics() {
        return logistics;
    }

    public void setLogistics(CheckListingPrerequisitesResponseDataShopLogistics logistics) {
        this.logistics = logistics;
    }

    public CheckListingPrerequisitesResponseDataShop status(String status) {
        this.status = status;
        return this;
    }

    /**
     * Listing Prerequisites check: Whether the shop status allows normal publishing. If the shop status is abnormal, return a check failure and do not allow publishing\&quot; Detailed explanation of JSON return results： - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met
     *
     * @return status
     **/
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public CheckListingPrerequisitesResponseDataShop taxInfo(String taxInfo) {
        this.taxInfo = taxInfo;
        return this;
    }

    /**
     * Listing Prerequisites check: Whether the shop has configured tax-related information. In some regions, if it is not prepared, return a check failure and do not allow listing product. In the US, if it is not prepared, return a check failure and the product will not be sent to audition. Detailed explanation of JSON return results： - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met, and the detailed failure reasons will be returned through the \&quot;fail_reasons\&quot; field.
     *
     * @return taxInfo
     **/
    @javax.annotation.Nullable
    public String getTaxInfo() {
        return taxInfo;
    }

    public void setTaxInfo(String taxInfo) {
        this.taxInfo = taxInfo;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckListingPrerequisitesResponseDataShop product202309CheckListingPrerequisitesResponseDataShop = (CheckListingPrerequisitesResponseDataShop) o;
        return Objects.equals(this.bankAccount, product202309CheckListingPrerequisitesResponseDataShop.bankAccount) &&
            Objects.equals(this.contactInfo, product202309CheckListingPrerequisitesResponseDataShop.contactInfo) &&
            Objects.equals(this.gne, product202309CheckListingPrerequisitesResponseDataShop.gne) &&
            Objects.equals(this.logistics, product202309CheckListingPrerequisitesResponseDataShop.logistics) &&
            Objects.equals(this.status, product202309CheckListingPrerequisitesResponseDataShop.status) &&
            Objects.equals(this.taxInfo, product202309CheckListingPrerequisitesResponseDataShop.taxInfo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bankAccount, contactInfo, gne, logistics, status, taxInfo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckListingPrerequisitesResponseDataShop {\n");
        sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
        sb.append("    contactInfo: ").append(toIndentedString(contactInfo)).append("\n");
        sb.append("    gne: ").append(toIndentedString(gne)).append("\n");
        sb.append("    logistics: ").append(toIndentedString(logistics)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    taxInfo: ").append(toIndentedString(taxInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckListingPrerequisitesResponseDataShop to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckListingPrerequisitesResponseDataShop.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckListingPrerequisitesResponseDataShop' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckListingPrerequisitesResponseDataShop> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckListingPrerequisitesResponseDataShop.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckListingPrerequisitesResponseDataShop>() {
                @Override
                public void write(JsonWriter out, CheckListingPrerequisitesResponseDataShop value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckListingPrerequisitesResponseDataShop read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

