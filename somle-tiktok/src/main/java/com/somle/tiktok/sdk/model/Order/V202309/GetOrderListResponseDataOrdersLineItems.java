/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Order.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;


/**
 * GetOrderListResponseDataOrdersLineItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetOrderListResponseDataOrdersLineItems {
    public static final String SERIALIZED_NAME_BUYER_SERVICE_FEE = "buyer_service_fee";
    public static final String SERIALIZED_NAME_CANCEL_REASON = "cancel_reason";
    public static final String SERIALIZED_NAME_CANCEL_USER = "cancel_user";
    public static final String SERIALIZED_NAME_COMBINED_LISTING_SKUS = "combined_listing_skus";
    public static final String SERIALIZED_NAME_CURRENCY = "currency";
    public static final String SERIALIZED_NAME_DISPLAY_STATUS = "display_status";
    public static final String SERIALIZED_NAME_HANDLING_DURATION_DAYS = "handling_duration_days";
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_IS_DANGEROUS_GOOD = "is_dangerous_good";
    public static final String SERIALIZED_NAME_IS_GIFT = "is_gift";
    public static final String SERIALIZED_NAME_ITEM_TAX = "item_tax";
    public static final String SERIALIZED_NAME_NEEDS_PRESCRIPTION = "needs_prescription";
    public static final String SERIALIZED_NAME_ORIGINAL_PRICE = "original_price";
    public static final String SERIALIZED_NAME_PACKAGE_ID = "package_id";
    public static final String SERIALIZED_NAME_PACKAGE_STATUS = "package_status";
    public static final String SERIALIZED_NAME_PLATFORM_DISCOUNT = "platform_discount";
    public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
    public static final String SERIALIZED_NAME_PRODUCT_NAME = "product_name";
    public static final String SERIALIZED_NAME_RETAIL_DELIVERY_FEE = "retail_delivery_fee";
    public static final String SERIALIZED_NAME_RTS_TIME = "rts_time";
    public static final String SERIALIZED_NAME_SALE_PRICE = "sale_price";
    public static final String SERIALIZED_NAME_SELLER_DISCOUNT = "seller_discount";
    public static final String SERIALIZED_NAME_SELLER_SKU = "seller_sku";
    public static final String SERIALIZED_NAME_SHIPPING_PROVIDER_ID = "shipping_provider_id";
    public static final String SERIALIZED_NAME_SHIPPING_PROVIDER_NAME = "shipping_provider_name";
    public static final String SERIALIZED_NAME_SKU_ID = "sku_id";
    public static final String SERIALIZED_NAME_SKU_IMAGE = "sku_image";
    public static final String SERIALIZED_NAME_SKU_NAME = "sku_name";
    public static final String SERIALIZED_NAME_SKU_TYPE = "sku_type";
    public static final String SERIALIZED_NAME_SMALL_ORDER_FEE = "small_order_fee";
    public static final String SERIALIZED_NAME_TRACKING_NUMBER = "tracking_number";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("buyer_service_fee");
        openapiFields.add("cancel_reason");
        openapiFields.add("cancel_user");
        openapiFields.add("combined_listing_skus");
        openapiFields.add("currency");
        openapiFields.add("display_status");
        openapiFields.add("handling_duration_days");
        openapiFields.add("id");
        openapiFields.add("is_dangerous_good");
        openapiFields.add("is_gift");
        openapiFields.add("item_tax");
        openapiFields.add("needs_prescription");
        openapiFields.add("original_price");
        openapiFields.add("package_id");
        openapiFields.add("package_status");
        openapiFields.add("platform_discount");
        openapiFields.add("product_id");
        openapiFields.add("product_name");
        openapiFields.add("retail_delivery_fee");
        openapiFields.add("rts_time");
        openapiFields.add("sale_price");
        openapiFields.add("seller_discount");
        openapiFields.add("seller_sku");
        openapiFields.add("shipping_provider_id");
        openapiFields.add("shipping_provider_name");
        openapiFields.add("sku_id");
        openapiFields.add("sku_image");
        openapiFields.add("sku_name");
        openapiFields.add("sku_type");
        openapiFields.add("small_order_fee");
        openapiFields.add("tracking_number");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_BUYER_SERVICE_FEE)
    private String buyerServiceFee;
    @SerializedName(SERIALIZED_NAME_CANCEL_REASON)
    private String cancelReason;
    @SerializedName(SERIALIZED_NAME_CANCEL_USER)
    private String cancelUser;
    @SerializedName(SERIALIZED_NAME_COMBINED_LISTING_SKUS)
    private List<GetOrderListResponseDataOrdersLineItemsCombinedListingSkus> combinedListingSkus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_CURRENCY)
    private String currency;
    @SerializedName(SERIALIZED_NAME_DISPLAY_STATUS)
    private String displayStatus;
    @SerializedName(SERIALIZED_NAME_HANDLING_DURATION_DAYS)
    private String handlingDurationDays;
    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_IS_DANGEROUS_GOOD)
    private Boolean isDangerousGood;
    @SerializedName(SERIALIZED_NAME_IS_GIFT)
    private Boolean isGift;
    @SerializedName(SERIALIZED_NAME_ITEM_TAX)
    private List<GetOrderListResponseDataOrdersLineItemsItemTax> itemTax = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_NEEDS_PRESCRIPTION)
    private Boolean needsPrescription;
    @SerializedName(SERIALIZED_NAME_ORIGINAL_PRICE)
    private String originalPrice;
    @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
    private String packageId;
    @SerializedName(SERIALIZED_NAME_PACKAGE_STATUS)
    private String packageStatus;
    @SerializedName(SERIALIZED_NAME_PLATFORM_DISCOUNT)
    private String platformDiscount;
    @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
    private String productId;
    @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
    private String productName;
    @SerializedName(SERIALIZED_NAME_RETAIL_DELIVERY_FEE)
    private String retailDeliveryFee;
    @SerializedName(SERIALIZED_NAME_RTS_TIME)
    private Long rtsTime;
    @SerializedName(SERIALIZED_NAME_SALE_PRICE)
    private String salePrice;
    @SerializedName(SERIALIZED_NAME_SELLER_DISCOUNT)
    private String sellerDiscount;
    @SerializedName(SERIALIZED_NAME_SELLER_SKU)
    private String sellerSku;
    @SerializedName(SERIALIZED_NAME_SHIPPING_PROVIDER_ID)
    private String shippingProviderId;
    @SerializedName(SERIALIZED_NAME_SHIPPING_PROVIDER_NAME)
    private String shippingProviderName;
    @SerializedName(SERIALIZED_NAME_SKU_ID)
    private String skuId;
    @SerializedName(SERIALIZED_NAME_SKU_IMAGE)
    private String skuImage;
    @SerializedName(SERIALIZED_NAME_SKU_NAME)
    private String skuName;
    @SerializedName(SERIALIZED_NAME_SKU_TYPE)
    private String skuType;
    @SerializedName(SERIALIZED_NAME_SMALL_ORDER_FEE)
    private String smallOrderFee;
    @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
    private String trackingNumber;

    public GetOrderListResponseDataOrdersLineItems() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetOrderListResponseDataOrdersLineItems
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetOrderListResponseDataOrdersLineItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrderListResponseDataOrdersLineItems is not found in the empty JSON string", GetOrderListResponseDataOrdersLineItems.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetOrderListResponseDataOrdersLineItems.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrderListResponseDataOrdersLineItems` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("buyer_service_fee") != null && !jsonObj.get("buyer_service_fee").isJsonNull()) && !jsonObj.get("buyer_service_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `buyer_service_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_service_fee").toString()));
        }
        if ((jsonObj.get("cancel_reason") != null && !jsonObj.get("cancel_reason").isJsonNull()) && !jsonObj.get("cancel_reason").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancel_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_reason").toString()));
        }
        if ((jsonObj.get("cancel_user") != null && !jsonObj.get("cancel_user").isJsonNull()) && !jsonObj.get("cancel_user").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancel_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_user").toString()));
        }
        if (jsonObj.get("combined_listing_skus") != null && !jsonObj.get("combined_listing_skus").isJsonNull()) {
            JsonArray jsonArraycombinedListingSkus = jsonObj.getAsJsonArray("combined_listing_skus");
            if (jsonArraycombinedListingSkus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("combined_listing_skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `combined_listing_skus` to be an array in the JSON string but got `%s`", jsonObj.get("combined_listing_skus").toString()));
                }

                // validate the optional field `combined_listing_skus` (array)
                for (int i = 0; i < jsonArraycombinedListingSkus.size(); i++) {
                    GetOrderListResponseDataOrdersLineItemsCombinedListingSkus.validateJsonElement(jsonArraycombinedListingSkus.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
        }
        if ((jsonObj.get("display_status") != null && !jsonObj.get("display_status").isJsonNull()) && !jsonObj.get("display_status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `display_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_status").toString()));
        }
        if ((jsonObj.get("handling_duration_days") != null && !jsonObj.get("handling_duration_days").isJsonNull()) && !jsonObj.get("handling_duration_days").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `handling_duration_days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handling_duration_days").toString()));
        }
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if (jsonObj.get("item_tax") != null && !jsonObj.get("item_tax").isJsonNull()) {
            JsonArray jsonArrayitemTax = jsonObj.getAsJsonArray("item_tax");
            if (jsonArrayitemTax != null) {
                // ensure the json data is an array
                if (!jsonObj.get("item_tax").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `item_tax` to be an array in the JSON string but got `%s`", jsonObj.get("item_tax").toString()));
                }

                // validate the optional field `item_tax` (array)
                for (int i = 0; i < jsonArrayitemTax.size(); i++) {
                    GetOrderListResponseDataOrdersLineItemsItemTax.validateJsonElement(jsonArrayitemTax.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("original_price") != null && !jsonObj.get("original_price").isJsonNull()) && !jsonObj.get("original_price").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `original_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_price").toString()));
        }
        if ((jsonObj.get("package_id") != null && !jsonObj.get("package_id").isJsonNull()) && !jsonObj.get("package_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `package_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_id").toString()));
        }
        if ((jsonObj.get("package_status") != null && !jsonObj.get("package_status").isJsonNull()) && !jsonObj.get("package_status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `package_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_status").toString()));
        }
        if ((jsonObj.get("platform_discount") != null && !jsonObj.get("platform_discount").isJsonNull()) && !jsonObj.get("platform_discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `platform_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform_discount").toString()));
        }
        if ((jsonObj.get("product_id") != null && !jsonObj.get("product_id").isJsonNull()) && !jsonObj.get("product_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
        }
        if ((jsonObj.get("product_name") != null && !jsonObj.get("product_name").isJsonNull()) && !jsonObj.get("product_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_name").toString()));
        }
        if ((jsonObj.get("retail_delivery_fee") != null && !jsonObj.get("retail_delivery_fee").isJsonNull()) && !jsonObj.get("retail_delivery_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `retail_delivery_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retail_delivery_fee").toString()));
        }
        if ((jsonObj.get("sale_price") != null && !jsonObj.get("sale_price").isJsonNull()) && !jsonObj.get("sale_price").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sale_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sale_price").toString()));
        }
        if ((jsonObj.get("seller_discount") != null && !jsonObj.get("seller_discount").isJsonNull()) && !jsonObj.get("seller_discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_discount").toString()));
        }
        if ((jsonObj.get("seller_sku") != null && !jsonObj.get("seller_sku").isJsonNull()) && !jsonObj.get("seller_sku").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_sku").toString()));
        }
        if ((jsonObj.get("shipping_provider_id") != null && !jsonObj.get("shipping_provider_id").isJsonNull()) && !jsonObj.get("shipping_provider_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_provider_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_provider_id").toString()));
        }
        if ((jsonObj.get("shipping_provider_name") != null && !jsonObj.get("shipping_provider_name").isJsonNull()) && !jsonObj.get("shipping_provider_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_provider_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_provider_name").toString()));
        }
        if ((jsonObj.get("sku_id") != null && !jsonObj.get("sku_id").isJsonNull()) && !jsonObj.get("sku_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sku_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_id").toString()));
        }
        if ((jsonObj.get("sku_image") != null && !jsonObj.get("sku_image").isJsonNull()) && !jsonObj.get("sku_image").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sku_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_image").toString()));
        }
        if ((jsonObj.get("sku_name") != null && !jsonObj.get("sku_name").isJsonNull()) && !jsonObj.get("sku_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sku_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_name").toString()));
        }
        if ((jsonObj.get("sku_type") != null && !jsonObj.get("sku_type").isJsonNull()) && !jsonObj.get("sku_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sku_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_type").toString()));
        }
        if ((jsonObj.get("small_order_fee") != null && !jsonObj.get("small_order_fee").isJsonNull()) && !jsonObj.get("small_order_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `small_order_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small_order_fee").toString()));
        }
        if ((jsonObj.get("tracking_number") != null && !jsonObj.get("tracking_number").isJsonNull()) && !jsonObj.get("tracking_number").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_number").toString()));
        }
    }

    /**
     * Create an instance of GetOrderListResponseDataOrdersLineItems given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetOrderListResponseDataOrdersLineItems
     * @throws IOException if the JSON string is invalid with respect to GetOrderListResponseDataOrdersLineItems
     */
    public static GetOrderListResponseDataOrdersLineItems fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetOrderListResponseDataOrdersLineItems.class);
    }

    public GetOrderListResponseDataOrdersLineItems buyerServiceFee(String buyerServiceFee) {
        this.buyerServiceFee = buyerServiceFee;
        return this;
    }

    /**
     * A service fee is charged on every transaction made. The charge is applied from the fifth order onwards and collected directly from customers during checkout.   **Note**: Only available in the Indonesia market.
     *
     * @return buyerServiceFee
     **/
    @javax.annotation.Nullable
    public String getBuyerServiceFee() {
        return buyerServiceFee;
    }

    public void setBuyerServiceFee(String buyerServiceFee) {
        this.buyerServiceFee = buyerServiceFee;
    }

    public GetOrderListResponseDataOrdersLineItems cancelReason(String cancelReason) {
        this.cancelReason = cancelReason;
        return this;
    }

    /**
     * The cancellation reason. Please visit [our list of cancel reasons](https://partner.tiktokshop.com/docv2/page/67e61eee427345048595487d) for more information.
     *
     * @return cancelReason
     **/
    @javax.annotation.Nullable
    public String getCancelReason() {
        return cancelReason;
    }

    public void setCancelReason(String cancelReason) {
        this.cancelReason = cancelReason;
    }

    public GetOrderListResponseDataOrdersLineItems cancelUser(String cancelUser) {
        this.cancelUser = cancelUser;
        return this;
    }

    /**
     * Cancellation request initiator. Available values: - &#x60;BUYER&#x60; - &#x60;SELLER&#x60; - &#x60;OPERATOR&#x60; - &#x60;SYSTEM&#x60;
     *
     * @return cancelUser
     **/
    @javax.annotation.Nullable
    public String getCancelUser() {
        return cancelUser;
    }

    public void setCancelUser(String cancelUser) {
        this.cancelUser = cancelUser;
    }

    public GetOrderListResponseDataOrdersLineItems combinedListingSkus(List<GetOrderListResponseDataOrdersLineItemsCombinedListingSkus> combinedListingSkus) {
        this.combinedListingSkus = combinedListingSkus;
        return this;
    }

    public GetOrderListResponseDataOrdersLineItems addCombinedListingSkusItem(GetOrderListResponseDataOrdersLineItemsCombinedListingSkus combinedListingSkusItem) {
        if (this.combinedListingSkus == null) {
            this.combinedListingSkus = new ArrayList<>();
        }
        this.combinedListingSkus.add(combinedListingSkusItem);
        return this;
    }

    /**
     * For a combined listing SKU, returns an array of related product SKUs that compose the combined listing SKU.
     *
     * @return combinedListingSkus
     **/
    @javax.annotation.Nullable
    public List<GetOrderListResponseDataOrdersLineItemsCombinedListingSkus> getCombinedListingSkus() {
        return combinedListingSkus;
    }

    public void setCombinedListingSkus(List<GetOrderListResponseDataOrdersLineItemsCombinedListingSkus> combinedListingSkus) {
        this.combinedListingSkus = combinedListingSkus;
    }

    public GetOrderListResponseDataOrdersLineItems currency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Currency for payment.
     *
     * @return currency
     **/
    @javax.annotation.Nullable
    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public GetOrderListResponseDataOrdersLineItems displayStatus(String displayStatus) {
        this.displayStatus = displayStatus;
        return this;
    }

    /**
     * Available values: - &#x60;UNPAID&#x60;: The order has been placed, but payment has not yet completed. - &#x60;AWAITING_SHIPMENT&#x60;: The order is ready for shipment, but no items have been shipped yet. - &#x60;AWAITING_COLLECTION&#x60;: Shipping has been arranged, but the package is waiting to be collected by the carrier. - &#x60;IN_TRANSIT&#x60;: The package has been collected by the carrier and delivery is in progress. - &#x60;DELIVERED&#x60;: The package has been delivered to the buyer. - &#x60;COMPLETED&#x60;: The order has been completed, and no further returns or refunds are allowed. - &#x60;CANCELLED&#x60;: The order has been cancelled.
     *
     * @return displayStatus
     **/
    @javax.annotation.Nullable
    public String getDisplayStatus() {
        return displayStatus;
    }

    public void setDisplayStatus(String displayStatus) {
        this.displayStatus = displayStatus;
    }

    public GetOrderListResponseDataOrdersLineItems handlingDurationDays(String handlingDurationDays) {
        this.handlingDurationDays = handlingDurationDays;
        return this;
    }

    /**
     * [**Deprecated**: This field is deprecated and will be removed in a future API version. Use &#x60;handling_duration&#x60; instead.]  The number of business days required for the seller to process the order and hand it over to a shipping carrier after the order is placed.  Applicable only if the value for &#x60;sku_type&#x60; is &#x60;MADE_TO_ORDER&#x60;.
     *
     * @return handlingDurationDays
     **/
    @javax.annotation.Nullable
    public String getHandlingDurationDays() {
        return handlingDurationDays;
    }

    public void setHandlingDurationDays(String handlingDurationDays) {
        this.handlingDurationDays = handlingDurationDays;
    }

    public GetOrderListResponseDataOrdersLineItems id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Line item ID.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public GetOrderListResponseDataOrdersLineItems isDangerousGood(Boolean isDangerousGood) {
        this.isDangerousGood = isDangerousGood;
        return this;
    }

    /**
     * Whether the SKU is a hazmat item. When creating the label for a hazmat item, you must follow the platform rules to put certain items into one package. Please refer to the relationship between &#x60;sku_id&#x60; and &#x60;package_id&#x60; to determine how to follow platform rules.
     *
     * @return isDangerousGood
     **/
    @javax.annotation.Nullable
    public Boolean getIsDangerousGood() {
        return isDangerousGood;
    }

    public void setIsDangerousGood(Boolean isDangerousGood) {
        this.isDangerousGood = isDangerousGood;
    }

    public GetOrderListResponseDataOrdersLineItems isGift(Boolean isGift) {
        this.isGift = isGift;
        return this;
    }

    /**
     * Indicates whether the current order line item is a gift.
     *
     * @return isGift
     **/
    @javax.annotation.Nullable
    public Boolean getIsGift() {
        return isGift;
    }

    public void setIsGift(Boolean isGift) {
        this.isGift = isGift;
    }

    public GetOrderListResponseDataOrdersLineItems itemTax(List<GetOrderListResponseDataOrdersLineItemsItemTax> itemTax) {
        this.itemTax = itemTax;
        return this;
    }

    public GetOrderListResponseDataOrdersLineItems addItemTaxItem(GetOrderListResponseDataOrdersLineItemsItemTax itemTaxItem) {
        if (this.itemTax == null) {
            this.itemTax = new ArrayList<>();
        }
        this.itemTax.add(itemTaxItem);
        return this;
    }

    /**
     * Item tax detail.
     *
     * @return itemTax
     **/
    @javax.annotation.Nullable
    public List<GetOrderListResponseDataOrdersLineItemsItemTax> getItemTax() {
        return itemTax;
    }

    public void setItemTax(List<GetOrderListResponseDataOrdersLineItemsItemTax> itemTax) {
        this.itemTax = itemTax;
    }

    public GetOrderListResponseDataOrdersLineItems needsPrescription(Boolean needsPrescription) {
        this.needsPrescription = needsPrescription;
        return this;
    }

    /**
     * A flag to indicate whether the included product requires a prescription.
     *
     * @return needsPrescription
     **/
    @javax.annotation.Nullable
    public Boolean getNeedsPrescription() {
        return needsPrescription;
    }

    public void setNeedsPrescription(Boolean needsPrescription) {
        this.needsPrescription = needsPrescription;
    }

    public GetOrderListResponseDataOrdersLineItems originalPrice(String originalPrice) {
        this.originalPrice = originalPrice;
        return this;
    }

    /**
     * Item original price. Please refer to the currency of &#x60;payment_info&#x60;.
     *
     * @return originalPrice
     **/
    @javax.annotation.Nullable
    public String getOriginalPrice() {
        return originalPrice;
    }

    public void setOriginalPrice(String originalPrice) {
        this.originalPrice = originalPrice;
    }

    public GetOrderListResponseDataOrdersLineItems packageId(String packageId) {
        this.packageId = packageId;
        return this;
    }

    /**
     * An order can contain one or more packages based on how the seller chooses to ship. Each package has a unique &#x60;package_id&#x60; and &#x60;tracking_id&#x60;.
     *
     * @return packageId
     **/
    @javax.annotation.Nullable
    public String getPackageId() {
        return packageId;
    }

    public void setPackageId(String packageId) {
        this.packageId = packageId;
    }

    public GetOrderListResponseDataOrdersLineItems packageStatus(String packageStatus) {
        this.packageStatus = packageStatus;
        return this;
    }

    /**
     * The package status of the item. Available values: - &#x60;TO_FULFILL&#x60;: Package awaiting seller to arrange shipment. - &#x60;PROCESSING&#x60;: Shipping has been arranged by the seller. Awaiting carrier collection. - &#x60;FULFILLING&#x60;: Package has been collected by carrier and is in transit. - &#x60;COMPLETED&#x60;: Package has been delivered. - &#x60;CANCELLED&#x60;: Package has been canceled. Normally, the package is canceled due to the package being lost or damaged.
     *
     * @return packageStatus
     **/
    @javax.annotation.Nullable
    public String getPackageStatus() {
        return packageStatus;
    }

    public void setPackageStatus(String packageStatus) {
        this.packageStatus = packageStatus;
    }

    public GetOrderListResponseDataOrdersLineItems platformDiscount(String platformDiscount) {
        this.platformDiscount = platformDiscount;
        return this;
    }

    /**
     * Platform discount amount. Please refer to the currency of &#x60;payment_info&#x60;.
     *
     * @return platformDiscount
     **/
    @javax.annotation.Nullable
    public String getPlatformDiscount() {
        return platformDiscount;
    }

    public void setPlatformDiscount(String platformDiscount) {
        this.platformDiscount = platformDiscount;
    }

    public GetOrderListResponseDataOrdersLineItems productId(String productId) {
        this.productId = productId;
        return this;
    }

    /**
     * Product ID.
     *
     * @return productId
     **/
    @javax.annotation.Nullable
    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public GetOrderListResponseDataOrdersLineItems productName(String productName) {
        this.productName = productName;
        return this;
    }

    /**
     * Product name.
     *
     * @return productName
     **/
    @javax.annotation.Nullable
    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public GetOrderListResponseDataOrdersLineItems retailDeliveryFee(String retailDeliveryFee) {
        this.retailDeliveryFee = retailDeliveryFee;
        return this;
    }

    /**
     * Retail delivery fee (RDF).   **Note**: Only available in the US market.
     *
     * @return retailDeliveryFee
     **/
    @javax.annotation.Nullable
    public String getRetailDeliveryFee() {
        return retailDeliveryFee;
    }

    public void setRetailDeliveryFee(String retailDeliveryFee) {
        this.retailDeliveryFee = retailDeliveryFee;
    }

    public GetOrderListResponseDataOrdersLineItems rtsTime(Long rtsTime) {
        this.rtsTime = rtsTime;
        return this;
    }

    /**
     * The time sellers shipped the order (called [Ship Package API](https://partner.tiktokshop.com/docv2/page/650aa4f1defece02be6e7cb1) successfully). Unix timestamp.
     *
     * @return rtsTime
     **/
    @javax.annotation.Nullable
    public Long getRtsTime() {
        return rtsTime;
    }

    public void setRtsTime(Long rtsTime) {
        this.rtsTime = rtsTime;
    }

    public GetOrderListResponseDataOrdersLineItems salePrice(String salePrice) {
        this.salePrice = salePrice;
        return this;
    }

    /**
     * Item sale price. Please refer to the currency of &#x60;payment_info&#x60;.
     *
     * @return salePrice
     **/
    @javax.annotation.Nullable
    public String getSalePrice() {
        return salePrice;
    }

    public void setSalePrice(String salePrice) {
        this.salePrice = salePrice;
    }

    public GetOrderListResponseDataOrdersLineItems sellerDiscount(String sellerDiscount) {
        this.sellerDiscount = sellerDiscount;
        return this;
    }

    /**
     * Seller discount amount. Please refer to the currency of &#x60;payment_info&#x60;.
     *
     * @return sellerDiscount
     **/
    @javax.annotation.Nullable
    public String getSellerDiscount() {
        return sellerDiscount;
    }

    public void setSellerDiscount(String sellerDiscount) {
        this.sellerDiscount = sellerDiscount;
    }

    public GetOrderListResponseDataOrdersLineItems sellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
        return this;
    }

    /**
     * The seller stock keeping unit (SKU) of the item.
     *
     * @return sellerSku
     **/
    @javax.annotation.Nullable
    public String getSellerSku() {
        return sellerSku;
    }

    public void setSellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
    }

    public GetOrderListResponseDataOrdersLineItems shippingProviderId(String shippingProviderId) {
        this.shippingProviderId = shippingProviderId;
        return this;
    }

    /**
     * The shipping provider ID of the item.
     *
     * @return shippingProviderId
     **/
    @javax.annotation.Nullable
    public String getShippingProviderId() {
        return shippingProviderId;
    }

    public void setShippingProviderId(String shippingProviderId) {
        this.shippingProviderId = shippingProviderId;
    }

    public GetOrderListResponseDataOrdersLineItems shippingProviderName(String shippingProviderName) {
        this.shippingProviderName = shippingProviderName;
        return this;
    }

    /**
     * The shipping provider name.
     *
     * @return shippingProviderName
     **/
    @javax.annotation.Nullable
    public String getShippingProviderName() {
        return shippingProviderName;
    }

    public void setShippingProviderName(String shippingProviderName) {
        this.shippingProviderName = shippingProviderName;
    }

    public GetOrderListResponseDataOrdersLineItems skuId(String skuId) {
        this.skuId = skuId;
        return this;
    }

    /**
     * SKU ID.
     *
     * @return skuId
     **/
    @javax.annotation.Nullable
    public String getSkuId() {
        return skuId;
    }

    public void setSkuId(String skuId) {
        this.skuId = skuId;
    }

    public GetOrderListResponseDataOrdersLineItems skuImage(String skuImage) {
        this.skuImage = skuImage;
        return this;
    }

    /**
     * SKU image.
     *
     * @return skuImage
     **/
    @javax.annotation.Nullable
    public String getSkuImage() {
        return skuImage;
    }

    public void setSkuImage(String skuImage) {
        this.skuImage = skuImage;
    }

    public GetOrderListResponseDataOrdersLineItems skuName(String skuName) {
        this.skuName = skuName;
        return this;
    }

    /**
     * The name of the SKU, combined by product SKU attribute like size or color. e.g. \&quot;Black, 26\&quot;
     *
     * @return skuName
     **/
    @javax.annotation.Nullable
    public String getSkuName() {
        return skuName;
    }

    public void setSkuName(String skuName) {
        this.skuName = skuName;
    }

    public GetOrderListResponseDataOrdersLineItems skuType(String skuType) {
        this.skuType = skuType;
        return this;
    }

    /**
     * [**Deprecated**: This field is deprecated and will be removed in a future API version. Use &#x60;order_type&#x60; instead.]  The order line type. Possible values based on region:  **All regions** - &#x60;NORMAL&#x60;: An item that is in stock and available for immediate purchase and fulfillment. - &#x60;ZERO_LOTTERY&#x60;: An item purchased during a lottery event in TikTok LIVE. - &#x60;SHOP_PARTNER&#x60;: An item purchased from a TikTok Shop partner store.  **US** - &#x60;PRE_ORDER&#x60;: An item that is not yet available or released. Fulfillment starts on a specific date in the future. - &#x60;MADE_TO_ORDER&#x60;: An item that is produced only after the order is received. Fulfillment starts after the product is produced.
     *
     * @return skuType
     **/
    @javax.annotation.Nullable
    public String getSkuType() {
        return skuType;
    }

    public void setSkuType(String skuType) {
        this.skuType = skuType;
    }

    public GetOrderListResponseDataOrdersLineItems smallOrderFee(String smallOrderFee) {
        this.smallOrderFee = smallOrderFee;
        return this;
    }

    /**
     * Small order fee for Thailand (TH).
     *
     * @return smallOrderFee
     **/
    @javax.annotation.Nullable
    public String getSmallOrderFee() {
        return smallOrderFee;
    }

    public void setSmallOrderFee(String smallOrderFee) {
        this.smallOrderFee = smallOrderFee;
    }

    public GetOrderListResponseDataOrdersLineItems trackingNumber(String trackingNumber) {
        this.trackingNumber = trackingNumber;
        return this;
    }

    /**
     * Tracking number. Available after package has been shipped.
     *
     * @return trackingNumber
     **/
    @javax.annotation.Nullable
    public String getTrackingNumber() {
        return trackingNumber;
    }

    public void setTrackingNumber(String trackingNumber) {
        this.trackingNumber = trackingNumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOrderListResponseDataOrdersLineItems order202309GetOrderListResponseDataOrdersLineItems = (GetOrderListResponseDataOrdersLineItems) o;
        return Objects.equals(this.buyerServiceFee, order202309GetOrderListResponseDataOrdersLineItems.buyerServiceFee) &&
            Objects.equals(this.cancelReason, order202309GetOrderListResponseDataOrdersLineItems.cancelReason) &&
            Objects.equals(this.cancelUser, order202309GetOrderListResponseDataOrdersLineItems.cancelUser) &&
            Objects.equals(this.combinedListingSkus, order202309GetOrderListResponseDataOrdersLineItems.combinedListingSkus) &&
            Objects.equals(this.currency, order202309GetOrderListResponseDataOrdersLineItems.currency) &&
            Objects.equals(this.displayStatus, order202309GetOrderListResponseDataOrdersLineItems.displayStatus) &&
            Objects.equals(this.handlingDurationDays, order202309GetOrderListResponseDataOrdersLineItems.handlingDurationDays) &&
            Objects.equals(this.id, order202309GetOrderListResponseDataOrdersLineItems.id) &&
            Objects.equals(this.isDangerousGood, order202309GetOrderListResponseDataOrdersLineItems.isDangerousGood) &&
            Objects.equals(this.isGift, order202309GetOrderListResponseDataOrdersLineItems.isGift) &&
            Objects.equals(this.itemTax, order202309GetOrderListResponseDataOrdersLineItems.itemTax) &&
            Objects.equals(this.needsPrescription, order202309GetOrderListResponseDataOrdersLineItems.needsPrescription) &&
            Objects.equals(this.originalPrice, order202309GetOrderListResponseDataOrdersLineItems.originalPrice) &&
            Objects.equals(this.packageId, order202309GetOrderListResponseDataOrdersLineItems.packageId) &&
            Objects.equals(this.packageStatus, order202309GetOrderListResponseDataOrdersLineItems.packageStatus) &&
            Objects.equals(this.platformDiscount, order202309GetOrderListResponseDataOrdersLineItems.platformDiscount) &&
            Objects.equals(this.productId, order202309GetOrderListResponseDataOrdersLineItems.productId) &&
            Objects.equals(this.productName, order202309GetOrderListResponseDataOrdersLineItems.productName) &&
            Objects.equals(this.retailDeliveryFee, order202309GetOrderListResponseDataOrdersLineItems.retailDeliveryFee) &&
            Objects.equals(this.rtsTime, order202309GetOrderListResponseDataOrdersLineItems.rtsTime) &&
            Objects.equals(this.salePrice, order202309GetOrderListResponseDataOrdersLineItems.salePrice) &&
            Objects.equals(this.sellerDiscount, order202309GetOrderListResponseDataOrdersLineItems.sellerDiscount) &&
            Objects.equals(this.sellerSku, order202309GetOrderListResponseDataOrdersLineItems.sellerSku) &&
            Objects.equals(this.shippingProviderId, order202309GetOrderListResponseDataOrdersLineItems.shippingProviderId) &&
            Objects.equals(this.shippingProviderName, order202309GetOrderListResponseDataOrdersLineItems.shippingProviderName) &&
            Objects.equals(this.skuId, order202309GetOrderListResponseDataOrdersLineItems.skuId) &&
            Objects.equals(this.skuImage, order202309GetOrderListResponseDataOrdersLineItems.skuImage) &&
            Objects.equals(this.skuName, order202309GetOrderListResponseDataOrdersLineItems.skuName) &&
            Objects.equals(this.skuType, order202309GetOrderListResponseDataOrdersLineItems.skuType) &&
            Objects.equals(this.smallOrderFee, order202309GetOrderListResponseDataOrdersLineItems.smallOrderFee) &&
            Objects.equals(this.trackingNumber, order202309GetOrderListResponseDataOrdersLineItems.trackingNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(buyerServiceFee, cancelReason, cancelUser, combinedListingSkus, currency, displayStatus, handlingDurationDays, id, isDangerousGood, isGift, itemTax, needsPrescription, originalPrice, packageId, packageStatus, platformDiscount, productId, productName, retailDeliveryFee, rtsTime, salePrice, sellerDiscount, sellerSku, shippingProviderId, shippingProviderName, skuId, skuImage, skuName, skuType, smallOrderFee, trackingNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetOrderListResponseDataOrdersLineItems {\n");
        sb.append("    buyerServiceFee: ").append(toIndentedString(buyerServiceFee)).append("\n");
        sb.append("    cancelReason: ").append(toIndentedString(cancelReason)).append("\n");
        sb.append("    cancelUser: ").append(toIndentedString(cancelUser)).append("\n");
        sb.append("    combinedListingSkus: ").append(toIndentedString(combinedListingSkus)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    displayStatus: ").append(toIndentedString(displayStatus)).append("\n");
        sb.append("    handlingDurationDays: ").append(toIndentedString(handlingDurationDays)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    isDangerousGood: ").append(toIndentedString(isDangerousGood)).append("\n");
        sb.append("    isGift: ").append(toIndentedString(isGift)).append("\n");
        sb.append("    itemTax: ").append(toIndentedString(itemTax)).append("\n");
        sb.append("    needsPrescription: ").append(toIndentedString(needsPrescription)).append("\n");
        sb.append("    originalPrice: ").append(toIndentedString(originalPrice)).append("\n");
        sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
        sb.append("    packageStatus: ").append(toIndentedString(packageStatus)).append("\n");
        sb.append("    platformDiscount: ").append(toIndentedString(platformDiscount)).append("\n");
        sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
        sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
        sb.append("    retailDeliveryFee: ").append(toIndentedString(retailDeliveryFee)).append("\n");
        sb.append("    rtsTime: ").append(toIndentedString(rtsTime)).append("\n");
        sb.append("    salePrice: ").append(toIndentedString(salePrice)).append("\n");
        sb.append("    sellerDiscount: ").append(toIndentedString(sellerDiscount)).append("\n");
        sb.append("    sellerSku: ").append(toIndentedString(sellerSku)).append("\n");
        sb.append("    shippingProviderId: ").append(toIndentedString(shippingProviderId)).append("\n");
        sb.append("    shippingProviderName: ").append(toIndentedString(shippingProviderName)).append("\n");
        sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
        sb.append("    skuImage: ").append(toIndentedString(skuImage)).append("\n");
        sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
        sb.append("    skuType: ").append(toIndentedString(skuType)).append("\n");
        sb.append("    smallOrderFee: ").append(toIndentedString(smallOrderFee)).append("\n");
        sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetOrderListResponseDataOrdersLineItems to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetOrderListResponseDataOrdersLineItems.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetOrderListResponseDataOrdersLineItems' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetOrderListResponseDataOrdersLineItems> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetOrderListResponseDataOrdersLineItems.class));

            return (TypeAdapter<T>) new TypeAdapter<GetOrderListResponseDataOrdersLineItems>() {
                @Override
                public void write(JsonWriter out, GetOrderListResponseDataOrdersLineItems value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetOrderListResponseDataOrdersLineItems read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

