/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CheckProductListingResponseDataListingQuality
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingResponseDataListingQuality {
    public static final String SERIALIZED_NAME_CURRENT_TIER = "current_tier";
    public static final String SERIALIZED_NAME_REMAINING_RECOMMENDATIONS = "remaining_recommendations";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("current_tier");
        openapiFields.add("remaining_recommendations");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_CURRENT_TIER)
    private String currentTier;
    @SerializedName(SERIALIZED_NAME_REMAINING_RECOMMENDATIONS)
    private Integer remainingRecommendations;

    public CheckProductListingResponseDataListingQuality() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingResponseDataListingQuality
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingResponseDataListingQuality.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingResponseDataListingQuality is not found in the empty JSON string", CheckProductListingResponseDataListingQuality.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingResponseDataListingQuality.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingResponseDataListingQuality` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("current_tier") != null && !jsonObj.get("current_tier").isJsonNull()) && !jsonObj.get("current_tier").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `current_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_tier").toString()));
        }
    }

    /**
     * Create an instance of CheckProductListingResponseDataListingQuality given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingResponseDataListingQuality
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingResponseDataListingQuality
     */
    public static CheckProductListingResponseDataListingQuality fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingResponseDataListingQuality.class);
    }

    public CheckProductListingResponseDataListingQuality currentTier(String currentTier) {
        this.currentTier = currentTier;
        return this;
    }

    /**
     * The current quality tier of this product listing. The quality tier of a product listing depends on the quality of the content in its product fields such as the title, image, attributes etc.  Possible values: - POOR - FAIR - GOOD  **Note**: Available only for the US market.
     *
     * @return currentTier
     **/
    @javax.annotation.Nullable
    public String getCurrentTier() {
        return currentTier;
    }

    public void setCurrentTier(String currentTier) {
        this.currentTier = currentTier;
    }

    public CheckProductListingResponseDataListingQuality remainingRecommendations(Integer remainingRecommendations) {
        this.remainingRecommendations = remainingRecommendations;
        return this;
    }

    /**
     * The remaining number of recommendations (see &#x60;diagnosis_results&#x60;) that must be implemented for the product to reach the highest tier.  **Note**: - To reach the highest tier, you must implement all recommendations listed in &#x60;diagnosis_results&#x60;.  - Available only for the US market.
     *
     * @return remainingRecommendations
     **/
    @javax.annotation.Nullable
    public Integer getRemainingRecommendations() {
        return remainingRecommendations;
    }

    public void setRemainingRecommendations(Integer remainingRecommendations) {
        this.remainingRecommendations = remainingRecommendations;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingResponseDataListingQuality product202309CheckProductListingResponseDataListingQuality = (CheckProductListingResponseDataListingQuality) o;
        return Objects.equals(this.currentTier, product202309CheckProductListingResponseDataListingQuality.currentTier) &&
            Objects.equals(this.remainingRecommendations, product202309CheckProductListingResponseDataListingQuality.remainingRecommendations);
    }

    @Override
    public int hashCode() {
        return Objects.hash(currentTier, remainingRecommendations);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingResponseDataListingQuality {\n");
        sb.append("    currentTier: ").append(toIndentedString(currentTier)).append("\n");
        sb.append("    remainingRecommendations: ").append(toIndentedString(remainingRecommendations)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingResponseDataListingQuality to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingResponseDataListingQuality.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingResponseDataListingQuality' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingResponseDataListingQuality> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingResponseDataListingQuality.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingResponseDataListingQuality>() {
                @Override
                public void write(JsonWriter out, CheckProductListingResponseDataListingQuality value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingResponseDataListingQuality read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

