/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CheckProductListingRequestBodySkusPreSaleFulfillmentType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingRequestBodySkusPreSaleFulfillmentType {
    public static final String SERIALIZED_NAME_HANDLING_DURATION_DAYS = "handling_duration_days";
    public static final String SERIALIZED_NAME_RELEASE_DATE = "release_date";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("handling_duration_days");
        openapiFields.add("release_date");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_HANDLING_DURATION_DAYS)
    private Integer handlingDurationDays;
    @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
    private Long releaseDate;

    public CheckProductListingRequestBodySkusPreSaleFulfillmentType() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingRequestBodySkusPreSaleFulfillmentType
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingRequestBodySkusPreSaleFulfillmentType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingRequestBodySkusPreSaleFulfillmentType is not found in the empty JSON string", CheckProductListingRequestBodySkusPreSaleFulfillmentType.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingRequestBodySkusPreSaleFulfillmentType.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingRequestBodySkusPreSaleFulfillmentType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    /**
     * Create an instance of CheckProductListingRequestBodySkusPreSaleFulfillmentType given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingRequestBodySkusPreSaleFulfillmentType
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingRequestBodySkusPreSaleFulfillmentType
     */
    public static CheckProductListingRequestBodySkusPreSaleFulfillmentType fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingRequestBodySkusPreSaleFulfillmentType.class);
    }

    public CheckProductListingRequestBodySkusPreSaleFulfillmentType handlingDurationDays(Integer handlingDurationDays) {
        this.handlingDurationDays = handlingDurationDays;
        return this;
    }

    /**
     * The desired duration for handling a pre-sale order and handing it over to a shipping carrier.   Applicable only for the following regions and pre-sale type: **US** - &#x60;MADE_TO_ORDER&#x60;: Business days, from 3 to 14 days. - &#x60;CUSTOM&#x60;: Business days, from 3 to 30 days.  **UK and SEA** - &#x60;PRE_ORDER&#x60;: Calendar days, from 3 to 30 days.
     *
     * @return handlingDurationDays
     **/
    @javax.annotation.Nullable
    public Integer getHandlingDurationDays() {
        return handlingDurationDays;
    }

    public void setHandlingDurationDays(Integer handlingDurationDays) {
        this.handlingDurationDays = handlingDurationDays;
    }

    public CheckProductListingRequestBodySkusPreSaleFulfillmentType releaseDate(Long releaseDate) {
        this.releaseDate = releaseDate;
        return this;
    }

    /**
     * The date on which the product gets converted into a regular product and becomes available for general purchase. On this date, order handling will also start, changing the status of the order to [&#x60;AWAITING_SHIPMENT&#x60;](https://partner.tiktokshop.com/docv2/page/650b1b4bbace3e02b76d1011).   Applicable only for &#x60;PRE_ORDER&#x60; in the US. **Note**: - Valid range: The date must fall within 3 - 60 days from the current date. - This date is a unix timestamp (seconds) based on the seller-selected timezone in Seller Center. - This date cannot be modified once the product goes live.
     *
     * @return releaseDate
     **/
    @javax.annotation.Nullable
    public Long getReleaseDate() {
        return releaseDate;
    }

    public void setReleaseDate(Long releaseDate) {
        this.releaseDate = releaseDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingRequestBodySkusPreSaleFulfillmentType product202309CheckProductListingRequestBodySkusPreSaleFulfillmentType = (CheckProductListingRequestBodySkusPreSaleFulfillmentType) o;
        return Objects.equals(this.handlingDurationDays, product202309CheckProductListingRequestBodySkusPreSaleFulfillmentType.handlingDurationDays) &&
            Objects.equals(this.releaseDate, product202309CheckProductListingRequestBodySkusPreSaleFulfillmentType.releaseDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(handlingDurationDays, releaseDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingRequestBodySkusPreSaleFulfillmentType {\n");
        sb.append("    handlingDurationDays: ").append(toIndentedString(handlingDurationDays)).append("\n");
        sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingRequestBodySkusPreSaleFulfillmentType to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingRequestBodySkusPreSaleFulfillmentType.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingRequestBodySkusPreSaleFulfillmentType' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingRequestBodySkusPreSaleFulfillmentType> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingRequestBodySkusPreSaleFulfillmentType.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingRequestBodySkusPreSaleFulfillmentType>() {
                @Override
                public void write(JsonWriter out, CheckProductListingRequestBodySkusPreSaleFulfillmentType value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingRequestBodySkusPreSaleFulfillmentType read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

