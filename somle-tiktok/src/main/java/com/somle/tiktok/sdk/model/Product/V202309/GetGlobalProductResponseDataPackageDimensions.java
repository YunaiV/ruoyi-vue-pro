/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * GetGlobalProductResponseDataPackageDimensions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetGlobalProductResponseDataPackageDimensions {
    public static final String SERIALIZED_NAME_HEIGHT = "height";
    public static final String SERIALIZED_NAME_LENGTH = "length";
    public static final String SERIALIZED_NAME_UNIT = "unit";
    public static final String SERIALIZED_NAME_WIDTH = "width";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("height");
        openapiFields.add("length");
        openapiFields.add("unit");
        openapiFields.add("width");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_HEIGHT)
    private String height;
    @SerializedName(SERIALIZED_NAME_LENGTH)
    private String length;
    @SerializedName(SERIALIZED_NAME_UNIT)
    private String unit;
    @SerializedName(SERIALIZED_NAME_WIDTH)
    private String width;

    public GetGlobalProductResponseDataPackageDimensions() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetGlobalProductResponseDataPackageDimensions
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetGlobalProductResponseDataPackageDimensions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetGlobalProductResponseDataPackageDimensions is not found in the empty JSON string", GetGlobalProductResponseDataPackageDimensions.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetGlobalProductResponseDataPackageDimensions.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGlobalProductResponseDataPackageDimensions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("height") != null && !jsonObj.get("height").isJsonNull()) && !jsonObj.get("height").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("height").toString()));
        }
        if ((jsonObj.get("length") != null && !jsonObj.get("length").isJsonNull()) && !jsonObj.get("length").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("length").toString()));
        }
        if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
        }
        if ((jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) && !jsonObj.get("width").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("width").toString()));
        }
    }

    /**
     * Create an instance of GetGlobalProductResponseDataPackageDimensions given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetGlobalProductResponseDataPackageDimensions
     * @throws IOException if the JSON string is invalid with respect to GetGlobalProductResponseDataPackageDimensions
     */
    public static GetGlobalProductResponseDataPackageDimensions fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetGlobalProductResponseDataPackageDimensions.class);
    }

    public GetGlobalProductResponseDataPackageDimensions height(String height) {
        this.height = height;
        return this;
    }

    /**
     * The package height.
     *
     * @return height
     **/
    @javax.annotation.Nullable
    public String getHeight() {
        return height;
    }

    public void setHeight(String height) {
        this.height = height;
    }

    public GetGlobalProductResponseDataPackageDimensions length(String length) {
        this.length = length;
        return this;
    }

    /**
     * The package length.
     *
     * @return length
     **/
    @javax.annotation.Nullable
    public String getLength() {
        return length;
    }

    public void setLength(String length) {
        this.length = length;
    }

    public GetGlobalProductResponseDataPackageDimensions unit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * The unit for the package dimensions.
     *
     * @return unit
     **/
    @javax.annotation.Nullable
    public String getUnit() {
        return unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    public GetGlobalProductResponseDataPackageDimensions width(String width) {
        this.width = width;
        return this;
    }

    /**
     * The package width.
     *
     * @return width
     **/
    @javax.annotation.Nullable
    public String getWidth() {
        return width;
    }

    public void setWidth(String width) {
        this.width = width;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetGlobalProductResponseDataPackageDimensions product202309GetGlobalProductResponseDataPackageDimensions = (GetGlobalProductResponseDataPackageDimensions) o;
        return Objects.equals(this.height, product202309GetGlobalProductResponseDataPackageDimensions.height) &&
            Objects.equals(this.length, product202309GetGlobalProductResponseDataPackageDimensions.length) &&
            Objects.equals(this.unit, product202309GetGlobalProductResponseDataPackageDimensions.unit) &&
            Objects.equals(this.width, product202309GetGlobalProductResponseDataPackageDimensions.width);
    }

    @Override
    public int hashCode() {
        return Objects.hash(height, length, unit, width);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetGlobalProductResponseDataPackageDimensions {\n");
        sb.append("    height: ").append(toIndentedString(height)).append("\n");
        sb.append("    length: ").append(toIndentedString(length)).append("\n");
        sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetGlobalProductResponseDataPackageDimensions to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetGlobalProductResponseDataPackageDimensions.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetGlobalProductResponseDataPackageDimensions' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetGlobalProductResponseDataPackageDimensions> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetGlobalProductResponseDataPackageDimensions.class));

            return (TypeAdapter<T>) new TypeAdapter<GetGlobalProductResponseDataPackageDimensions>() {
                @Override
                public void write(JsonWriter out, GetGlobalProductResponseDataPackageDimensions value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetGlobalProductResponseDataPackageDimensions read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

