/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetCategoriesResponseDataCategories
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetCategoriesResponseDataCategories {
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_IS_LEAF = "is_leaf";
    public static final String SERIALIZED_NAME_LOCAL_NAME = "local_name";
    public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
    public static final String SERIALIZED_NAME_PERMISSION_STATUSES = "permission_statuses";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("is_leaf");
        openapiFields.add("local_name");
        openapiFields.add("parent_id");
        openapiFields.add("permission_statuses");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_IS_LEAF)
    private Boolean isLeaf;
    @SerializedName(SERIALIZED_NAME_LOCAL_NAME)
    private String localName;
    @SerializedName(SERIALIZED_NAME_PARENT_ID)
    private String parentId;
    @SerializedName(SERIALIZED_NAME_PERMISSION_STATUSES)
    private List<String> permissionStatuses = new ArrayList<>();

    public GetCategoriesResponseDataCategories() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetCategoriesResponseDataCategories
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetCategoriesResponseDataCategories.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetCategoriesResponseDataCategories is not found in the empty JSON string", GetCategoriesResponseDataCategories.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetCategoriesResponseDataCategories.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCategoriesResponseDataCategories` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("local_name") != null && !jsonObj.get("local_name").isJsonNull()) && !jsonObj.get("local_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `local_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_name").toString()));
        }
        if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("permission_statuses") != null && !jsonObj.get("permission_statuses").isJsonNull() && !jsonObj.get("permission_statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permission_statuses` to be an array in the JSON string but got `%s`", jsonObj.get("permission_statuses").toString()));
        }
    }

    /**
     * Create an instance of GetCategoriesResponseDataCategories given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetCategoriesResponseDataCategories
     * @throws IOException if the JSON string is invalid with respect to GetCategoriesResponseDataCategories
     */
    public static GetCategoriesResponseDataCategories fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetCategoriesResponseDataCategories.class);
    }

    public GetCategoriesResponseDataCategories id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The category ID.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public GetCategoriesResponseDataCategories isLeaf(Boolean isLeaf) {
        this.isLeaf = isLeaf;
        return this;
    }

    /**
     * A flag to indicate if the category is a leaf category.   **Note**: You can only create or edit products that belong to a leaf category.
     *
     * @return isLeaf
     **/
    @javax.annotation.Nullable
    public Boolean getIsLeaf() {
        return isLeaf;
    }

    public void setIsLeaf(Boolean isLeaf) {
        this.isLeaf = isLeaf;
    }

    public GetCategoriesResponseDataCategories localName(String localName) {
        this.localName = localName;
        return this;
    }

    /**
     * The name of the category in the country where the shop operates.
     *
     * @return localName
     **/
    @javax.annotation.Nullable
    public String getLocalName() {
        return localName;
    }

    public void setLocalName(String localName) {
        this.localName = localName;
    }

    public GetCategoriesResponseDataCategories parentId(String parentId) {
        this.parentId = parentId;
        return this;
    }

    /**
     * The parent category ID.  For the root category, the parent ID is &#x60;0&#x60;.
     *
     * @return parentId
     **/
    @javax.annotation.Nullable
    public String getParentId() {
        return parentId;
    }

    public void setParentId(String parentId) {
        this.parentId = parentId;
    }

    public GetCategoriesResponseDataCategories permissionStatuses(List<String> permissionStatuses) {
        this.permissionStatuses = permissionStatuses;
        return this;
    }

    public GetCategoriesResponseDataCategories addPermissionStatusesItem(String permissionStatusesItem) {
        if (this.permissionStatuses == null) {
            this.permissionStatuses = new ArrayList<>();
        }
        this.permissionStatuses.add(permissionStatusesItem);
        return this;
    }

    /**
     * The shop&#39;s permission status for this category. Possible values: - &#x60;AVAILABLE&#x60;: You have the permission to create products in this category. - &#x60;INVITE_ONLY&#x60;: This is a restricted category and you do not have permission to use it. Submit an application through the Qualification Center on TikTok Shop Seller Center to gain access. In Seller Center, &#x60;INVITE_ONLY&#x60; is also known as \&quot;restricted\&quot;. - &#x60;NON_MAIN_CATEGORY&#x60;: This category is out of scope for this shop, and you do not have permission to use it.  Contact your account manager for assistance.
     *
     * @return permissionStatuses
     **/
    @javax.annotation.Nullable
    public List<String> getPermissionStatuses() {
        return permissionStatuses;
    }

    public void setPermissionStatuses(List<String> permissionStatuses) {
        this.permissionStatuses = permissionStatuses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCategoriesResponseDataCategories product202309GetCategoriesResponseDataCategories = (GetCategoriesResponseDataCategories) o;
        return Objects.equals(this.id, product202309GetCategoriesResponseDataCategories.id) &&
            Objects.equals(this.isLeaf, product202309GetCategoriesResponseDataCategories.isLeaf) &&
            Objects.equals(this.localName, product202309GetCategoriesResponseDataCategories.localName) &&
            Objects.equals(this.parentId, product202309GetCategoriesResponseDataCategories.parentId) &&
            Objects.equals(this.permissionStatuses, product202309GetCategoriesResponseDataCategories.permissionStatuses);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, isLeaf, localName, parentId, permissionStatuses);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetCategoriesResponseDataCategories {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    isLeaf: ").append(toIndentedString(isLeaf)).append("\n");
        sb.append("    localName: ").append(toIndentedString(localName)).append("\n");
        sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
        sb.append("    permissionStatuses: ").append(toIndentedString(permissionStatuses)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetCategoriesResponseDataCategories to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetCategoriesResponseDataCategories.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetCategoriesResponseDataCategories' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetCategoriesResponseDataCategories> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetCategoriesResponseDataCategories.class));

            return (TypeAdapter<T>) new TypeAdapter<GetCategoriesResponseDataCategories>() {
                @Override
                public void write(JsonWriter out, GetCategoriesResponseDataCategories value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetCategoriesResponseDataCategories read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

