/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * GetBrandsResponseDataBrands
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetBrandsResponseDataBrands {
    public static final String SERIALIZED_NAME_AUTHORIZED_STATUS = "authorized_status";
    public static final String SERIALIZED_NAME_BRAND_STATUS = "brand_status";
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_IS_T1_BRAND = "is_t1_brand";
    public static final String SERIALIZED_NAME_NAME = "name";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("authorized_status");
        openapiFields.add("brand_status");
        openapiFields.add("id");
        openapiFields.add("is_t1_brand");
        openapiFields.add("name");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_AUTHORIZED_STATUS)
    private String authorizedStatus;
    @SerializedName(SERIALIZED_NAME_BRAND_STATUS)
    private String brandStatus;
    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_IS_T1_BRAND)
    private Boolean isT1Brand;
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public GetBrandsResponseDataBrands() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetBrandsResponseDataBrands
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetBrandsResponseDataBrands.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetBrandsResponseDataBrands is not found in the empty JSON string", GetBrandsResponseDataBrands.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetBrandsResponseDataBrands.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBrandsResponseDataBrands` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("authorized_status") != null && !jsonObj.get("authorized_status").isJsonNull()) && !jsonObj.get("authorized_status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorized_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorized_status").toString()));
        }
        if ((jsonObj.get("brand_status") != null && !jsonObj.get("brand_status").isJsonNull()) && !jsonObj.get("brand_status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `brand_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_status").toString()));
        }
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
    }

    /**
     * Create an instance of GetBrandsResponseDataBrands given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetBrandsResponseDataBrands
     * @throws IOException if the JSON string is invalid with respect to GetBrandsResponseDataBrands
     */
    public static GetBrandsResponseDataBrands fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetBrandsResponseDataBrands.class);
    }

    public GetBrandsResponseDataBrands authorizedStatus(String authorizedStatus) {
        this.authorizedStatus = authorizedStatus;
        return this;
    }

    /**
     * A status to indicate whether the seller has obtained prior authorization to sell goods bearing the brand&#39;s trademark, name, or logo.  Possible values: - UNAUTHORIEZD - AUTHORIZED  **Note**: If the brand is unauthorized, check &#x60;is_t1_brand&#x60; to determine if you can use it during product creation.
     *
     * @return authorizedStatus
     **/
    @javax.annotation.Nullable
    public String getAuthorizedStatus() {
        return authorizedStatus;
    }

    public void setAuthorizedStatus(String authorizedStatus) {
        this.authorizedStatus = authorizedStatus;
    }

    public GetBrandsResponseDataBrands brandStatus(String brandStatus) {
        this.brandStatus = brandStatus;
        return this;
    }

    /**
     * The availability of an **authorized brand** in the requested category. Possible values: - AVAILABLE - UNAVAILABLE  **Note**: Not applicable if you did not specify the category ID, or the brand is unauthorized.
     *
     * @return brandStatus
     **/
    @javax.annotation.Nullable
    public String getBrandStatus() {
        return brandStatus;
    }

    public void setBrandStatus(String brandStatus) {
        this.brandStatus = brandStatus;
    }

    public GetBrandsResponseDataBrands id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The brand ID.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public GetBrandsResponseDataBrands isT1Brand(Boolean isT1Brand) {
        this.isT1Brand = isT1Brand;
        return this;
    }

    /**
     * A flag to indicate whether the brand is a T1 brand, which refers to internationally renowned brands that may have compliance risks and require sellers to obtain brand authorization.  **Note**: - You cannot create products with unauthorized T1 brands. - You can create products with unauthorized non-T1 brands, **but** the brand information will not appear on the product display page.  You can obtain authorization by submitting the required qualifications through TikTok Shop Seller Center &gt; Qualification Center &gt; Brand qualification.
     *
     * @return isT1Brand
     **/
    @javax.annotation.Nullable
    public Boolean getIsT1Brand() {
        return isT1Brand;
    }

    public void setIsT1Brand(Boolean isT1Brand) {
        this.isT1Brand = isT1Brand;
    }

    public GetBrandsResponseDataBrands name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The brand name.
     *
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBrandsResponseDataBrands product202309GetBrandsResponseDataBrands = (GetBrandsResponseDataBrands) o;
        return Objects.equals(this.authorizedStatus, product202309GetBrandsResponseDataBrands.authorizedStatus) &&
            Objects.equals(this.brandStatus, product202309GetBrandsResponseDataBrands.brandStatus) &&
            Objects.equals(this.id, product202309GetBrandsResponseDataBrands.id) &&
            Objects.equals(this.isT1Brand, product202309GetBrandsResponseDataBrands.isT1Brand) &&
            Objects.equals(this.name, product202309GetBrandsResponseDataBrands.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(authorizedStatus, brandStatus, id, isT1Brand, name);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetBrandsResponseDataBrands {\n");
        sb.append("    authorizedStatus: ").append(toIndentedString(authorizedStatus)).append("\n");
        sb.append("    brandStatus: ").append(toIndentedString(brandStatus)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    isT1Brand: ").append(toIndentedString(isT1Brand)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetBrandsResponseDataBrands to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetBrandsResponseDataBrands.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetBrandsResponseDataBrands' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetBrandsResponseDataBrands> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetBrandsResponseDataBrands.class));

            return (TypeAdapter<T>) new TypeAdapter<GetBrandsResponseDataBrands>() {
                @Override
                public void write(JsonWriter out, GetBrandsResponseDataBrands value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetBrandsResponseDataBrands read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

