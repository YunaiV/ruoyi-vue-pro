/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * SearchProductsResponseDataProducts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class SearchProductsResponseDataProducts {
    public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_PRODUCT_SYNC_FAIL_REASONS = "product_sync_fail_reasons";
    public static final String SERIALIZED_NAME_RECOMMENDED_CATEGORIES = "recommended_categories";
    public static final String SERIALIZED_NAME_SALES_REGIONS = "sales_regions";
    public static final String SERIALIZED_NAME_SKUS = "skus";
    public static final String SERIALIZED_NAME_STATUS = "status";
    public static final String SERIALIZED_NAME_TITLE = "title";
    public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("create_time");
        openapiFields.add("id");
        openapiFields.add("product_sync_fail_reasons");
        openapiFields.add("recommended_categories");
        openapiFields.add("sales_regions");
        openapiFields.add("skus");
        openapiFields.add("status");
        openapiFields.add("title");
        openapiFields.add("update_time");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    private Long createTime;
    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_PRODUCT_SYNC_FAIL_REASONS)
    private List<String> productSyncFailReasons = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RECOMMENDED_CATEGORIES)
    private List<SearchProductsResponseDataProductsRecommendedCategories> recommendedCategories = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SALES_REGIONS)
    private List<String> salesRegions = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SKUS)
    private List<SearchProductsResponseDataProductsSkus> skus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;
    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;
    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    private Long updateTime;

    public SearchProductsResponseDataProducts() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SearchProductsResponseDataProducts
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SearchProductsResponseDataProducts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in SearchProductsResponseDataProducts is not found in the empty JSON string", SearchProductsResponseDataProducts.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SearchProductsResponseDataProducts.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchProductsResponseDataProducts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("product_sync_fail_reasons") != null && !jsonObj.get("product_sync_fail_reasons").isJsonNull() && !jsonObj.get("product_sync_fail_reasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_sync_fail_reasons` to be an array in the JSON string but got `%s`", jsonObj.get("product_sync_fail_reasons").toString()));
        }
        if (jsonObj.get("recommended_categories") != null && !jsonObj.get("recommended_categories").isJsonNull()) {
            JsonArray jsonArrayrecommendedCategories = jsonObj.getAsJsonArray("recommended_categories");
            if (jsonArrayrecommendedCategories != null) {
                // ensure the json data is an array
                if (!jsonObj.get("recommended_categories").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `recommended_categories` to be an array in the JSON string but got `%s`", jsonObj.get("recommended_categories").toString()));
                }

                // validate the optional field `recommended_categories` (array)
                for (int i = 0; i < jsonArrayrecommendedCategories.size(); i++) {
                    SearchProductsResponseDataProductsRecommendedCategories.validateJsonElement(jsonArrayrecommendedCategories.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("sales_regions") != null && !jsonObj.get("sales_regions").isJsonNull() && !jsonObj.get("sales_regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sales_regions` to be an array in the JSON string but got `%s`", jsonObj.get("sales_regions").toString()));
        }
        if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonNull()) {
            JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
            if (jsonArrayskus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
                }

                // validate the optional field `skus` (array)
                for (int i = 0; i < jsonArrayskus.size(); i++) {
                    SearchProductsResponseDataProductsSkus.validateJsonElement(jsonArrayskus.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
        }
    }

    /**
     * Create an instance of SearchProductsResponseDataProducts given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SearchProductsResponseDataProducts
     * @throws IOException if the JSON string is invalid with respect to SearchProductsResponseDataProducts
     */
    public static SearchProductsResponseDataProducts fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SearchProductsResponseDataProducts.class);
    }

    public SearchProductsResponseDataProducts createTime(Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * The time when the product is created. Unix timestamp.
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public SearchProductsResponseDataProducts id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The product ID generated by TikTok Shop.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public SearchProductsResponseDataProducts productSyncFailReasons(List<String> productSyncFailReasons) {
        this.productSyncFailReasons = productSyncFailReasons;
        return this;
    }

    public SearchProductsResponseDataProducts addProductSyncFailReasonsItem(String productSyncFailReasonsItem) {
        if (this.productSyncFailReasons == null) {
            this.productSyncFailReasons = new ArrayList<>();
        }
        this.productSyncFailReasons.add(productSyncFailReasonsItem);
        return this;
    }

    /**
     * The reasons why synchronizing of global product information to local products failed.  Applicable only for cross-border sellers.
     *
     * @return productSyncFailReasons
     **/
    @javax.annotation.Nullable
    public List<String> getProductSyncFailReasons() {
        return productSyncFailReasons;
    }

    public void setProductSyncFailReasons(List<String> productSyncFailReasons) {
        this.productSyncFailReasons = productSyncFailReasons;
    }

    public SearchProductsResponseDataProducts recommendedCategories(List<SearchProductsResponseDataProductsRecommendedCategories> recommendedCategories) {
        this.recommendedCategories = recommendedCategories;
        return this;
    }

    public SearchProductsResponseDataProducts addRecommendedCategoriesItem(SearchProductsResponseDataProductsRecommendedCategories recommendedCategoriesItem) {
        if (this.recommendedCategories == null) {
            this.recommendedCategories = new ArrayList<>();
        }
        this.recommendedCategories.add(recommendedCategoriesItem);
        return this;
    }

    /**
     * Recommended categories for the product based on the product title, description, and images.
     *
     * @return recommendedCategories
     **/
    @javax.annotation.Nullable
    public List<SearchProductsResponseDataProductsRecommendedCategories> getRecommendedCategories() {
        return recommendedCategories;
    }

    public void setRecommendedCategories(List<SearchProductsResponseDataProductsRecommendedCategories> recommendedCategories) {
        this.recommendedCategories = recommendedCategories;
    }

    public SearchProductsResponseDataProducts salesRegions(List<String> salesRegions) {
        this.salesRegions = salesRegions;
        return this;
    }

    public SearchProductsResponseDataProducts addSalesRegionsItem(String salesRegionsItem) {
        if (this.salesRegions == null) {
            this.salesRegions = new ArrayList<>();
        }
        this.salesRegions.add(salesRegionsItem);
        return this;
    }

    /**
     * The regions where the product is sold. Possible values: - DE: Germany - ES: Spain - FR: France - GB: United Kingdom - ID: Indonesia - IE: Ireland - IT: Italy - JP: Japan - MX: Mexico - MY: Malaysia - PH: Philippines - SG: Singapore - TH: Thailand - US: United States - VN: Vietnam
     *
     * @return salesRegions
     **/
    @javax.annotation.Nullable
    public List<String> getSalesRegions() {
        return salesRegions;
    }

    public void setSalesRegions(List<String> salesRegions) {
        this.salesRegions = salesRegions;
    }

    public SearchProductsResponseDataProducts skus(List<SearchProductsResponseDataProductsSkus> skus) {
        this.skus = skus;
        return this;
    }

    public SearchProductsResponseDataProducts addSkusItem(SearchProductsResponseDataProductsSkus skusItem) {
        if (this.skus == null) {
            this.skus = new ArrayList<>();
        }
        this.skus.add(skusItem);
        return this;
    }

    /**
     * A list of Stock Keeping Units (SKUs) used to identify distinct variants of the product.
     *
     * @return skus
     **/
    @javax.annotation.Nullable
    public List<SearchProductsResponseDataProductsSkus> getSkus() {
        return skus;
    }

    public void setSkus(List<SearchProductsResponseDataProductsSkus> skus) {
        this.skus = skus;
    }

    public SearchProductsResponseDataProducts status(String status) {
        this.status = status;
        return this;
    }

    /**
     * The status of the product. Possible values:  - DRAFT - PENDING - FAILED - ACTIVATE - SELLER_DEACTIVATED - PLATFORM_DEACTIVATED - FREEZE - DELETED
     *
     * @return status
     **/
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public SearchProductsResponseDataProducts title(String title) {
        this.title = title;
        return this;
    }

    /**
     * The product title.
     *
     * @return title
     **/
    @javax.annotation.Nullable
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public SearchProductsResponseDataProducts updateTime(Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * The time when the product is last updated. Unix timestamp.
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchProductsResponseDataProducts product202309SearchProductsResponseDataProducts = (SearchProductsResponseDataProducts) o;
        return Objects.equals(this.createTime, product202309SearchProductsResponseDataProducts.createTime) &&
            Objects.equals(this.id, product202309SearchProductsResponseDataProducts.id) &&
            Objects.equals(this.productSyncFailReasons, product202309SearchProductsResponseDataProducts.productSyncFailReasons) &&
            Objects.equals(this.recommendedCategories, product202309SearchProductsResponseDataProducts.recommendedCategories) &&
            Objects.equals(this.salesRegions, product202309SearchProductsResponseDataProducts.salesRegions) &&
            Objects.equals(this.skus, product202309SearchProductsResponseDataProducts.skus) &&
            Objects.equals(this.status, product202309SearchProductsResponseDataProducts.status) &&
            Objects.equals(this.title, product202309SearchProductsResponseDataProducts.title) &&
            Objects.equals(this.updateTime, product202309SearchProductsResponseDataProducts.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(createTime, id, productSyncFailReasons, recommendedCategories, salesRegions, skus, status, title, updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SearchProductsResponseDataProducts {\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    productSyncFailReasons: ").append(toIndentedString(productSyncFailReasons)).append("\n");
        sb.append("    recommendedCategories: ").append(toIndentedString(recommendedCategories)).append("\n");
        sb.append("    salesRegions: ").append(toIndentedString(salesRegions)).append("\n");
        sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of SearchProductsResponseDataProducts to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SearchProductsResponseDataProducts.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SearchProductsResponseDataProducts' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SearchProductsResponseDataProducts> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(SearchProductsResponseDataProducts.class));

            return (TypeAdapter<T>) new TypeAdapter<SearchProductsResponseDataProducts>() {
                @Override
                public void write(JsonWriter out, SearchProductsResponseDataProducts value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public SearchProductsResponseDataProducts read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

