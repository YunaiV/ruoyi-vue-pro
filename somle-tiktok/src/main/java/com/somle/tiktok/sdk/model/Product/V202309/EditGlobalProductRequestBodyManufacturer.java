/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * EditGlobalProductRequestBodyManufacturer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class EditGlobalProductRequestBodyManufacturer {
    public static final String SERIALIZED_NAME_ADDRESS = "address";
    public static final String SERIALIZED_NAME_EMAIL = "email";
    public static final String SERIALIZED_NAME_NAME = "name";
    public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("address");
        openapiFields.add("email");
        openapiFields.add("name");
        openapiFields.add("phone_number");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ADDRESS)
    private String address;
    @SerializedName(SERIALIZED_NAME_EMAIL)
    private String email;
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
    private String phoneNumber;

    public EditGlobalProductRequestBodyManufacturer() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EditGlobalProductRequestBodyManufacturer
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EditGlobalProductRequestBodyManufacturer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in EditGlobalProductRequestBodyManufacturer is not found in the empty JSON string", EditGlobalProductRequestBodyManufacturer.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EditGlobalProductRequestBodyManufacturer.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditGlobalProductRequestBodyManufacturer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
        }
        if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
        }
    }

    /**
     * Create an instance of EditGlobalProductRequestBodyManufacturer given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EditGlobalProductRequestBodyManufacturer
     * @throws IOException if the JSON string is invalid with respect to EditGlobalProductRequestBodyManufacturer
     */
    public static EditGlobalProductRequestBodyManufacturer fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EditGlobalProductRequestBodyManufacturer.class);
    }

    public EditGlobalProductRequestBodyManufacturer address(String address) {
        this.address = address;
        return this;
    }

    /**
     * The address of the manufacturer.
     *
     * @return address
     **/
    @javax.annotation.Nullable
    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public EditGlobalProductRequestBodyManufacturer email(String email) {
        this.email = email;
        return this;
    }

    /**
     * The email address of the manufacturer.
     *
     * @return email
     **/
    @javax.annotation.Nullable
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public EditGlobalProductRequestBodyManufacturer name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name of the manufacturer.
     *
     * @return name
     **/
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public EditGlobalProductRequestBodyManufacturer phoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The phone number of the manufacturer, prefixed by a plus &#x60;+&#x60; symbol.  There must be a space or hyphen between the country code and the local phone number.
     *
     * @return phoneNumber
     **/
    @javax.annotation.Nullable
    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EditGlobalProductRequestBodyManufacturer product202309EditGlobalProductRequestBodyManufacturer = (EditGlobalProductRequestBodyManufacturer) o;
        return Objects.equals(this.address, product202309EditGlobalProductRequestBodyManufacturer.address) &&
            Objects.equals(this.email, product202309EditGlobalProductRequestBodyManufacturer.email) &&
            Objects.equals(this.name, product202309EditGlobalProductRequestBodyManufacturer.name) &&
            Objects.equals(this.phoneNumber, product202309EditGlobalProductRequestBodyManufacturer.phoneNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(address, email, name, phoneNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EditGlobalProductRequestBodyManufacturer {\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("    email: ").append(toIndentedString(email)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of EditGlobalProductRequestBodyManufacturer to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EditGlobalProductRequestBodyManufacturer.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EditGlobalProductRequestBodyManufacturer' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EditGlobalProductRequestBodyManufacturer> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(EditGlobalProductRequestBodyManufacturer.class));

            return (TypeAdapter<T>) new TypeAdapter<EditGlobalProductRequestBodyManufacturer>() {
                @Override
                public void write(JsonWriter out, EditGlobalProductRequestBodyManufacturer value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public EditGlobalProductRequestBodyManufacturer read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

