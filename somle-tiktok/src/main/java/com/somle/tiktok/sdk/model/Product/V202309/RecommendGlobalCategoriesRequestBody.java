/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * RecommendGlobalCategoriesRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class RecommendGlobalCategoriesRequestBody {
    public static final String SERIALIZED_NAME_CATEGORY_VERSION = "category_version";
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    public static final String SERIALIZED_NAME_IMAGES = "images";
    public static final String SERIALIZED_NAME_PRODUCT_TITLE = "product_title";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("category_version");
        openapiFields.add("description");
        openapiFields.add("images");
        openapiFields.add("product_title");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_CATEGORY_VERSION)
    private String categoryVersion;
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    @SerializedName(SERIALIZED_NAME_IMAGES)
    private List<RecommendGlobalCategoriesRequestBodyImages> images = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_PRODUCT_TITLE)
    private String productTitle;

    public RecommendGlobalCategoriesRequestBody() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RecommendGlobalCategoriesRequestBody
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RecommendGlobalCategoriesRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendGlobalCategoriesRequestBody is not found in the empty JSON string", RecommendGlobalCategoriesRequestBody.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RecommendGlobalCategoriesRequestBody.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendGlobalCategoriesRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("category_version") != null && !jsonObj.get("category_version").isJsonNull()) && !jsonObj.get("category_version").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `category_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_version").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
        }
        if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
            JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
            if (jsonArrayimages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
                }

                // validate the optional field `images` (array)
                for (int i = 0; i < jsonArrayimages.size(); i++) {
                    RecommendGlobalCategoriesRequestBodyImages.validateJsonElement(jsonArrayimages.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("product_title") != null && !jsonObj.get("product_title").isJsonNull()) && !jsonObj.get("product_title").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_title").toString()));
        }
    }

    /**
     * Create an instance of RecommendGlobalCategoriesRequestBody given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RecommendGlobalCategoriesRequestBody
     * @throws IOException if the JSON string is invalid with respect to RecommendGlobalCategoriesRequestBody
     */
    public static RecommendGlobalCategoriesRequestBody fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RecommendGlobalCategoriesRequestBody.class);
    }

    public RecommendGlobalCategoriesRequestBody categoryVersion(String categoryVersion) {
        this.categoryVersion = categoryVersion;
        return this;
    }

    /**
     * The category tree version to use for this product. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60;
     *
     * @return categoryVersion
     **/
    @javax.annotation.Nullable
    public String getCategoryVersion() {
        return categoryVersion;
    }

    public void setCategoryVersion(String categoryVersion) {
        this.categoryVersion = categoryVersion;
    }

    public RecommendGlobalCategoriesRequestBody description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The product description in HTML format.  **Note**: - The content must conform to the [HTML syntax](https://html.spec.whatwg.org/). All HTML tags are accepted but to optimize display on the TikTok Shop product detail page, the system will automatically convert certain tags into alternative formats, such as rendering &#x60;&lt;table&gt;&#x60; tags as images. - Max length: 10,000 characters. - Image guidelines: You must use [TikTok Shop image URLs](6509df95defece02be598a22). Max 30 &#x60;&lt;img&gt;&#x60; tags, each under 4000px with &#x60;src&#x60;, &#x60;width&#x60;, and &#x60;height&#x60; attributes.  **Recommendations**:  - If you are syncing a pre-existing description from another platform, include the full HTML source description here. - Provide a detailed description, ideally over 300 characters. - Include 3-5 key selling points, each under 250 characters, with supporting images. - Use 1600x1600 px for the image dimensions.
     *
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public RecommendGlobalCategoriesRequestBody images(List<RecommendGlobalCategoriesRequestBodyImages> images) {
        this.images = images;
        return this;
    }

    public RecommendGlobalCategoriesRequestBody addImagesItem(RecommendGlobalCategoriesRequestBodyImages imagesItem) {
        if (this.images == null) {
            this.images = new ArrayList<>();
        }
        this.images.add(imagesItem);
        return this;
    }

    /**
     * Product images, including gallery images, images that appear in the description, product variant images.
     *
     * @return images
     **/
    @javax.annotation.Nullable
    public List<RecommendGlobalCategoriesRequestBodyImages> getImages() {
        return images;
    }

    public void setImages(List<RecommendGlobalCategoriesRequestBodyImages> images) {
        this.images = images;
    }

    public RecommendGlobalCategoriesRequestBody productTitle(String productTitle) {
        this.productTitle = productTitle;
        return this;
    }

    /**
     * The product title.  Title length: - DE, ES, FR, IE, IT, JP, UK, US: [1, 255]  - Other regions: [25, 255]
     *
     * @return productTitle
     **/
    @javax.annotation.Nullable
    public String getProductTitle() {
        return productTitle;
    }

    public void setProductTitle(String productTitle) {
        this.productTitle = productTitle;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RecommendGlobalCategoriesRequestBody product202309RecommendGlobalCategoriesRequestBody = (RecommendGlobalCategoriesRequestBody) o;
        return Objects.equals(this.categoryVersion, product202309RecommendGlobalCategoriesRequestBody.categoryVersion) &&
            Objects.equals(this.description, product202309RecommendGlobalCategoriesRequestBody.description) &&
            Objects.equals(this.images, product202309RecommendGlobalCategoriesRequestBody.images) &&
            Objects.equals(this.productTitle, product202309RecommendGlobalCategoriesRequestBody.productTitle);
    }

    @Override
    public int hashCode() {
        return Objects.hash(categoryVersion, description, images, productTitle);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RecommendGlobalCategoriesRequestBody {\n");
        sb.append("    categoryVersion: ").append(toIndentedString(categoryVersion)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    images: ").append(toIndentedString(images)).append("\n");
        sb.append("    productTitle: ").append(toIndentedString(productTitle)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of RecommendGlobalCategoriesRequestBody to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RecommendGlobalCategoriesRequestBody.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RecommendGlobalCategoriesRequestBody' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RecommendGlobalCategoriesRequestBody> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(RecommendGlobalCategoriesRequestBody.class));

            return (TypeAdapter<T>) new TypeAdapter<RecommendGlobalCategoriesRequestBody>() {
                @Override
                public void write(JsonWriter out, RecommendGlobalCategoriesRequestBody value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public RecommendGlobalCategoriesRequestBody read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

