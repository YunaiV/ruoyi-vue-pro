/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * InventorySearchResponseDataInventorySkus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class InventorySearchResponseDataInventorySkus {
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_SELLER_SKU = "seller_sku";
    public static final String SERIALIZED_NAME_TOTAL_AVAILABLE_INVENTORY_DISTRIBUTION = "total_available_inventory_distribution";
    public static final String SERIALIZED_NAME_TOTAL_AVAILABLE_QUANTITY = "total_available_quantity";
    public static final String SERIALIZED_NAME_TOTAL_COMMITTED_QUANTITY = "total_committed_quantity";
    public static final String SERIALIZED_NAME_WAREHOUSE_INVENTORY = "warehouse_inventory";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("seller_sku");
        openapiFields.add("total_available_inventory_distribution");
        openapiFields.add("total_available_quantity");
        openapiFields.add("total_committed_quantity");
        openapiFields.add("warehouse_inventory");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_SELLER_SKU)
    private String sellerSku;
    @SerializedName(SERIALIZED_NAME_TOTAL_AVAILABLE_INVENTORY_DISTRIBUTION)
    private InventorySearchResponseDataInventorySkusTotalAvailableInventoryDistribution totalAvailableInventoryDistribution;
    @SerializedName(SERIALIZED_NAME_TOTAL_AVAILABLE_QUANTITY)
    private Integer totalAvailableQuantity;
    @SerializedName(SERIALIZED_NAME_TOTAL_COMMITTED_QUANTITY)
    private Integer totalCommittedQuantity;
    @SerializedName(SERIALIZED_NAME_WAREHOUSE_INVENTORY)
    private List<InventorySearchResponseDataInventorySkusWarehouseInventory> warehouseInventory = new ArrayList<>();

    public InventorySearchResponseDataInventorySkus() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to InventorySearchResponseDataInventorySkus
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!InventorySearchResponseDataInventorySkus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in InventorySearchResponseDataInventorySkus is not found in the empty JSON string", InventorySearchResponseDataInventorySkus.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!InventorySearchResponseDataInventorySkus.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventorySearchResponseDataInventorySkus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("seller_sku") != null && !jsonObj.get("seller_sku").isJsonNull()) && !jsonObj.get("seller_sku").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_sku").toString()));
        }
        // validate the optional field `total_available_inventory_distribution`
        if (jsonObj.get("total_available_inventory_distribution") != null && !jsonObj.get("total_available_inventory_distribution").isJsonNull()) {
            InventorySearchResponseDataInventorySkusTotalAvailableInventoryDistribution.validateJsonElement(jsonObj.get("total_available_inventory_distribution"));
        }
        if (jsonObj.get("warehouse_inventory") != null && !jsonObj.get("warehouse_inventory").isJsonNull()) {
            JsonArray jsonArraywarehouseInventory = jsonObj.getAsJsonArray("warehouse_inventory");
            if (jsonArraywarehouseInventory != null) {
                // ensure the json data is an array
                if (!jsonObj.get("warehouse_inventory").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `warehouse_inventory` to be an array in the JSON string but got `%s`", jsonObj.get("warehouse_inventory").toString()));
                }

                // validate the optional field `warehouse_inventory` (array)
                for (int i = 0; i < jsonArraywarehouseInventory.size(); i++) {
                    InventorySearchResponseDataInventorySkusWarehouseInventory.validateJsonElement(jsonArraywarehouseInventory.get(i));
                }
                ;
            }
        }
    }

    /**
     * Create an instance of InventorySearchResponseDataInventorySkus given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InventorySearchResponseDataInventorySkus
     * @throws IOException if the JSON string is invalid with respect to InventorySearchResponseDataInventorySkus
     */
    public static InventorySearchResponseDataInventorySkus fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InventorySearchResponseDataInventorySkus.class);
    }

    public InventorySearchResponseDataInventorySkus id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The SKU ID generated by TikTok Shop.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public InventorySearchResponseDataInventorySkus sellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
        return this;
    }

    /**
     * An internal code/name for managing SKUs, not visible to buyers.
     *
     * @return sellerSku
     **/
    @javax.annotation.Nullable
    public String getSellerSku() {
        return sellerSku;
    }

    public void setSellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
    }

    public InventorySearchResponseDataInventorySkus totalAvailableInventoryDistribution(InventorySearchResponseDataInventorySkusTotalAvailableInventoryDistribution totalAvailableInventoryDistribution) {
        this.totalAvailableInventoryDistribution = totalAvailableInventoryDistribution;
        return this;
    }

    /**
     * Get totalAvailableInventoryDistribution
     *
     * @return totalAvailableInventoryDistribution
     **/
    @javax.annotation.Nullable
    public InventorySearchResponseDataInventorySkusTotalAvailableInventoryDistribution getTotalAvailableInventoryDistribution() {
        return totalAvailableInventoryDistribution;
    }

    public void setTotalAvailableInventoryDistribution(InventorySearchResponseDataInventorySkusTotalAvailableInventoryDistribution totalAvailableInventoryDistribution) {
        this.totalAvailableInventoryDistribution = totalAvailableInventoryDistribution;
    }

    public InventorySearchResponseDataInventorySkus totalAvailableQuantity(Integer totalAvailableQuantity) {
        this.totalAvailableQuantity = totalAvailableQuantity;
        return this;
    }

    /**
     * The total number of units available for ordering across all warehouses. It is the sum of the &#x60;warehouse_inventory.available_quantity&#x60; values in all warehouses.
     *
     * @return totalAvailableQuantity
     **/
    @javax.annotation.Nullable
    public Integer getTotalAvailableQuantity() {
        return totalAvailableQuantity;
    }

    public void setTotalAvailableQuantity(Integer totalAvailableQuantity) {
        this.totalAvailableQuantity = totalAvailableQuantity;
    }

    public InventorySearchResponseDataInventorySkus totalCommittedQuantity(Integer totalCommittedQuantity) {
        this.totalCommittedQuantity = totalCommittedQuantity;
        return this;
    }

    /**
     * The total number of units reserved by existing customer orders across all warehouses (and therefore not available for ordering). It is the sum of the &#x60;warehouse_inventory.committed_quantity&#x60; values in all warehouses.
     *
     * @return totalCommittedQuantity
     **/
    @javax.annotation.Nullable
    public Integer getTotalCommittedQuantity() {
        return totalCommittedQuantity;
    }

    public void setTotalCommittedQuantity(Integer totalCommittedQuantity) {
        this.totalCommittedQuantity = totalCommittedQuantity;
    }

    public InventorySearchResponseDataInventorySkus warehouseInventory(List<InventorySearchResponseDataInventorySkusWarehouseInventory> warehouseInventory) {
        this.warehouseInventory = warehouseInventory;
        return this;
    }

    public InventorySearchResponseDataInventorySkus addWarehouseInventoryItem(InventorySearchResponseDataInventorySkusWarehouseInventory warehouseInventoryItem) {
        if (this.warehouseInventory == null) {
            this.warehouseInventory = new ArrayList<>();
        }
        this.warehouseInventory.add(warehouseInventoryItem);
        return this;
    }

    /**
     * SKU warehouse inventory information.
     *
     * @return warehouseInventory
     **/
    @javax.annotation.Nullable
    public List<InventorySearchResponseDataInventorySkusWarehouseInventory> getWarehouseInventory() {
        return warehouseInventory;
    }

    public void setWarehouseInventory(List<InventorySearchResponseDataInventorySkusWarehouseInventory> warehouseInventory) {
        this.warehouseInventory = warehouseInventory;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InventorySearchResponseDataInventorySkus product202309InventorySearchResponseDataInventorySkus = (InventorySearchResponseDataInventorySkus) o;
        return Objects.equals(this.id, product202309InventorySearchResponseDataInventorySkus.id) &&
            Objects.equals(this.sellerSku, product202309InventorySearchResponseDataInventorySkus.sellerSku) &&
            Objects.equals(this.totalAvailableInventoryDistribution, product202309InventorySearchResponseDataInventorySkus.totalAvailableInventoryDistribution) &&
            Objects.equals(this.totalAvailableQuantity, product202309InventorySearchResponseDataInventorySkus.totalAvailableQuantity) &&
            Objects.equals(this.totalCommittedQuantity, product202309InventorySearchResponseDataInventorySkus.totalCommittedQuantity) &&
            Objects.equals(this.warehouseInventory, product202309InventorySearchResponseDataInventorySkus.warehouseInventory);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, sellerSku, totalAvailableInventoryDistribution, totalAvailableQuantity, totalCommittedQuantity, warehouseInventory);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InventorySearchResponseDataInventorySkus {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    sellerSku: ").append(toIndentedString(sellerSku)).append("\n");
        sb.append("    totalAvailableInventoryDistribution: ").append(toIndentedString(totalAvailableInventoryDistribution)).append("\n");
        sb.append("    totalAvailableQuantity: ").append(toIndentedString(totalAvailableQuantity)).append("\n");
        sb.append("    totalCommittedQuantity: ").append(toIndentedString(totalCommittedQuantity)).append("\n");
        sb.append("    warehouseInventory: ").append(toIndentedString(warehouseInventory)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of InventorySearchResponseDataInventorySkus to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InventorySearchResponseDataInventorySkus.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InventorySearchResponseDataInventorySkus' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InventorySearchResponseDataInventorySkus> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(InventorySearchResponseDataInventorySkus.class));

            return (TypeAdapter<T>) new TypeAdapter<InventorySearchResponseDataInventorySkus>() {
                @Override
                public void write(JsonWriter out, InventorySearchResponseDataInventorySkus value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public InventorySearchResponseDataInventorySkus read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

