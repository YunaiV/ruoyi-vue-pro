/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * GetProductResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetProductResponseData {
    public static final String SERIALIZED_NAME_AUDIT = "audit";
    public static final String SERIALIZED_NAME_AUDIT_FAILED_REASONS = "audit_failed_reasons";
    public static final String SERIALIZED_NAME_BRAND = "brand";
    public static final String SERIALIZED_NAME_CATEGORY_CHAINS = "category_chains";
    public static final String SERIALIZED_NAME_CERTIFICATIONS = "certifications";
    public static final String SERIALIZED_NAME_CREATE_TIME = "create_time";
    public static final String SERIALIZED_NAME_DELIVERY_OPTIONS = "delivery_options";
    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    public static final String SERIALIZED_NAME_EXTERNAL_PRODUCT_ID = "external_product_id";
    public static final String SERIALIZED_NAME_GLOBAL_PRODUCT_ASSOCIATION = "global_product_association";
    public static final String SERIALIZED_NAME_ID = "id";
    public static final String SERIALIZED_NAME_INTEGRATED_PLATFORM_STATUSES = "integrated_platform_statuses";
    public static final String SERIALIZED_NAME_IS_COD_ALLOWED = "is_cod_allowed";
    public static final String SERIALIZED_NAME_IS_NOT_FOR_SALE = "is_not_for_sale";
    public static final String SERIALIZED_NAME_IS_PRE_OWNED = "is_pre_owned";
    public static final String SERIALIZED_NAME_LISTING_QUALITY_TIER = "listing_quality_tier";
    public static final String SERIALIZED_NAME_MAIN_IMAGES = "main_images";
    public static final String SERIALIZED_NAME_MANUFACTURER_IDS = "manufacturer_ids";
    public static final String SERIALIZED_NAME_MINIMUM_ORDER_QUANTITY = "minimum_order_quantity";
    public static final String SERIALIZED_NAME_PACKAGE_DIMENSIONS = "package_dimensions";
    public static final String SERIALIZED_NAME_PACKAGE_WEIGHT = "package_weight";
    public static final String SERIALIZED_NAME_PRESCRIPTION_REQUIREMENT = "prescription_requirement";
    public static final String SERIALIZED_NAME_PRODUCT_ATTRIBUTES = "product_attributes";
    public static final String SERIALIZED_NAME_PRODUCT_FAMILIES = "product_families";
    public static final String SERIALIZED_NAME_PRODUCT_TYPES = "product_types";
    public static final String SERIALIZED_NAME_RECOMMENDED_CATEGORIES = "recommended_categories";
    public static final String SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS = "responsible_person_ids";
    public static final String SERIALIZED_NAME_SHIPPING_INSURANCE_REQUIREMENT = "shipping_insurance_requirement";
    public static final String SERIALIZED_NAME_SIZE_CHART = "size_chart";
    public static final String SERIALIZED_NAME_SKUS = "skus";
    public static final String SERIALIZED_NAME_STATUS = "status";
    public static final String SERIALIZED_NAME_TITLE = "title";
    public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
    public static final String SERIALIZED_NAME_VIDEO = "video";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("audit");
        openapiFields.add("audit_failed_reasons");
        openapiFields.add("brand");
        openapiFields.add("category_chains");
        openapiFields.add("certifications");
        openapiFields.add("create_time");
        openapiFields.add("delivery_options");
        openapiFields.add("description");
        openapiFields.add("external_product_id");
        openapiFields.add("global_product_association");
        openapiFields.add("id");
        openapiFields.add("integrated_platform_statuses");
        openapiFields.add("is_cod_allowed");
        openapiFields.add("is_not_for_sale");
        openapiFields.add("is_pre_owned");
        openapiFields.add("listing_quality_tier");
        openapiFields.add("main_images");
        openapiFields.add("manufacturer_ids");
        openapiFields.add("minimum_order_quantity");
        openapiFields.add("package_dimensions");
        openapiFields.add("package_weight");
        openapiFields.add("prescription_requirement");
        openapiFields.add("product_attributes");
        openapiFields.add("product_families");
        openapiFields.add("product_types");
        openapiFields.add("recommended_categories");
        openapiFields.add("responsible_person_ids");
        openapiFields.add("shipping_insurance_requirement");
        openapiFields.add("size_chart");
        openapiFields.add("skus");
        openapiFields.add("status");
        openapiFields.add("title");
        openapiFields.add("update_time");
        openapiFields.add("video");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_AUDIT)
    private GetProductResponseDataAudit audit;
    @SerializedName(SERIALIZED_NAME_AUDIT_FAILED_REASONS)
    private List<GetProductResponseDataAuditFailedReasons> auditFailedReasons = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_BRAND)
    private GetProductResponseDataBrand brand;
    @SerializedName(SERIALIZED_NAME_CATEGORY_CHAINS)
    private List<GetProductResponseDataCategoryChains> categoryChains = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_CERTIFICATIONS)
    private List<GetProductResponseDataCertifications> certifications = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    private Long createTime;
    @SerializedName(SERIALIZED_NAME_DELIVERY_OPTIONS)
    private List<GetProductResponseDataDeliveryOptions> deliveryOptions = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;
    @SerializedName(SERIALIZED_NAME_EXTERNAL_PRODUCT_ID)
    private String externalProductId;
    @SerializedName(SERIALIZED_NAME_GLOBAL_PRODUCT_ASSOCIATION)
    private GetProductResponseDataGlobalProductAssociation globalProductAssociation;
    @SerializedName(SERIALIZED_NAME_ID)
    private String id;
    @SerializedName(SERIALIZED_NAME_INTEGRATED_PLATFORM_STATUSES)
    private List<GetProductResponseDataIntegratedPlatformStatuses> integratedPlatformStatuses = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_IS_COD_ALLOWED)
    private Boolean isCodAllowed;
    @SerializedName(SERIALIZED_NAME_IS_NOT_FOR_SALE)
    private Boolean isNotForSale;
    @SerializedName(SERIALIZED_NAME_IS_PRE_OWNED)
    private Boolean isPreOwned;
    @SerializedName(SERIALIZED_NAME_LISTING_QUALITY_TIER)
    private String listingQualityTier;
    @SerializedName(SERIALIZED_NAME_MAIN_IMAGES)
    private List<GetProductResponseDataMainImages> mainImages = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_MANUFACTURER_IDS)
    private List<String> manufacturerIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_MINIMUM_ORDER_QUANTITY)
    private Integer minimumOrderQuantity;
    @SerializedName(SERIALIZED_NAME_PACKAGE_DIMENSIONS)
    private GetProductResponseDataPackageDimensions packageDimensions;
    @SerializedName(SERIALIZED_NAME_PACKAGE_WEIGHT)
    private GetProductResponseDataPackageWeight packageWeight;
    @SerializedName(SERIALIZED_NAME_PRESCRIPTION_REQUIREMENT)
    private GetProductResponseDataPrescriptionRequirement prescriptionRequirement;
    @SerializedName(SERIALIZED_NAME_PRODUCT_ATTRIBUTES)
    private List<GetProductResponseDataProductAttributes> productAttributes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_PRODUCT_FAMILIES)
    private List<GetProductResponseDataProductFamilies> productFamilies = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_PRODUCT_TYPES)
    private List<String> productTypes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RECOMMENDED_CATEGORIES)
    private List<GetProductResponseDataRecommendedCategories> recommendedCategories = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PERSON_IDS)
    private List<String> responsiblePersonIds = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SHIPPING_INSURANCE_REQUIREMENT)
    private String shippingInsuranceRequirement;
    @SerializedName(SERIALIZED_NAME_SIZE_CHART)
    private GetProductResponseDataSizeChart sizeChart;
    @SerializedName(SERIALIZED_NAME_SKUS)
    private List<GetProductResponseDataSkus> skus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;
    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;
    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    private Long updateTime;
    @SerializedName(SERIALIZED_NAME_VIDEO)
    private GetProductResponseDataVideo video;

    public GetProductResponseData() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetProductResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetProductResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetProductResponseData is not found in the empty JSON string", GetProductResponseData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetProductResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetProductResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `audit`
        if (jsonObj.get("audit") != null && !jsonObj.get("audit").isJsonNull()) {
            GetProductResponseDataAudit.validateJsonElement(jsonObj.get("audit"));
        }
        if (jsonObj.get("audit_failed_reasons") != null && !jsonObj.get("audit_failed_reasons").isJsonNull()) {
            JsonArray jsonArrayauditFailedReasons = jsonObj.getAsJsonArray("audit_failed_reasons");
            if (jsonArrayauditFailedReasons != null) {
                // ensure the json data is an array
                if (!jsonObj.get("audit_failed_reasons").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `audit_failed_reasons` to be an array in the JSON string but got `%s`", jsonObj.get("audit_failed_reasons").toString()));
                }

                // validate the optional field `audit_failed_reasons` (array)
                for (int i = 0; i < jsonArrayauditFailedReasons.size(); i++) {
                    GetProductResponseDataAuditFailedReasons.validateJsonElement(jsonArrayauditFailedReasons.get(i));
                }
                ;
            }
        }
        // validate the optional field `brand`
        if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
            GetProductResponseDataBrand.validateJsonElement(jsonObj.get("brand"));
        }
        if (jsonObj.get("category_chains") != null && !jsonObj.get("category_chains").isJsonNull()) {
            JsonArray jsonArraycategoryChains = jsonObj.getAsJsonArray("category_chains");
            if (jsonArraycategoryChains != null) {
                // ensure the json data is an array
                if (!jsonObj.get("category_chains").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `category_chains` to be an array in the JSON string but got `%s`", jsonObj.get("category_chains").toString()));
                }

                // validate the optional field `category_chains` (array)
                for (int i = 0; i < jsonArraycategoryChains.size(); i++) {
                    GetProductResponseDataCategoryChains.validateJsonElement(jsonArraycategoryChains.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("certifications") != null && !jsonObj.get("certifications").isJsonNull()) {
            JsonArray jsonArraycertifications = jsonObj.getAsJsonArray("certifications");
            if (jsonArraycertifications != null) {
                // ensure the json data is an array
                if (!jsonObj.get("certifications").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `certifications` to be an array in the JSON string but got `%s`", jsonObj.get("certifications").toString()));
                }

                // validate the optional field `certifications` (array)
                for (int i = 0; i < jsonArraycertifications.size(); i++) {
                    GetProductResponseDataCertifications.validateJsonElement(jsonArraycertifications.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("delivery_options") != null && !jsonObj.get("delivery_options").isJsonNull()) {
            JsonArray jsonArraydeliveryOptions = jsonObj.getAsJsonArray("delivery_options");
            if (jsonArraydeliveryOptions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("delivery_options").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `delivery_options` to be an array in the JSON string but got `%s`", jsonObj.get("delivery_options").toString()));
                }

                // validate the optional field `delivery_options` (array)
                for (int i = 0; i < jsonArraydeliveryOptions.size(); i++) {
                    GetProductResponseDataDeliveryOptions.validateJsonElement(jsonArraydeliveryOptions.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("external_product_id") != null && !jsonObj.get("external_product_id").isJsonNull()) && !jsonObj.get("external_product_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_product_id").toString()));
        }
        // validate the optional field `global_product_association`
        if (jsonObj.get("global_product_association") != null && !jsonObj.get("global_product_association").isJsonNull()) {
            GetProductResponseDataGlobalProductAssociation.validateJsonElement(jsonObj.get("global_product_association"));
        }
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if (jsonObj.get("integrated_platform_statuses") != null && !jsonObj.get("integrated_platform_statuses").isJsonNull()) {
            JsonArray jsonArrayintegratedPlatformStatuses = jsonObj.getAsJsonArray("integrated_platform_statuses");
            if (jsonArrayintegratedPlatformStatuses != null) {
                // ensure the json data is an array
                if (!jsonObj.get("integrated_platform_statuses").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `integrated_platform_statuses` to be an array in the JSON string but got `%s`", jsonObj.get("integrated_platform_statuses").toString()));
                }

                // validate the optional field `integrated_platform_statuses` (array)
                for (int i = 0; i < jsonArrayintegratedPlatformStatuses.size(); i++) {
                    GetProductResponseDataIntegratedPlatformStatuses.validateJsonElement(jsonArrayintegratedPlatformStatuses.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("listing_quality_tier") != null && !jsonObj.get("listing_quality_tier").isJsonNull()) && !jsonObj.get("listing_quality_tier").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `listing_quality_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listing_quality_tier").toString()));
        }
        if (jsonObj.get("main_images") != null && !jsonObj.get("main_images").isJsonNull()) {
            JsonArray jsonArraymainImages = jsonObj.getAsJsonArray("main_images");
            if (jsonArraymainImages != null) {
                // ensure the json data is an array
                if (!jsonObj.get("main_images").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `main_images` to be an array in the JSON string but got `%s`", jsonObj.get("main_images").toString()));
                }

                // validate the optional field `main_images` (array)
                for (int i = 0; i < jsonArraymainImages.size(); i++) {
                    GetProductResponseDataMainImages.validateJsonElement(jsonArraymainImages.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("manufacturer_ids") != null && !jsonObj.get("manufacturer_ids").isJsonNull() && !jsonObj.get("manufacturer_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manufacturer_ids` to be an array in the JSON string but got `%s`", jsonObj.get("manufacturer_ids").toString()));
        }
        // validate the optional field `package_dimensions`
        if (jsonObj.get("package_dimensions") != null && !jsonObj.get("package_dimensions").isJsonNull()) {
            GetProductResponseDataPackageDimensions.validateJsonElement(jsonObj.get("package_dimensions"));
        }
        // validate the optional field `package_weight`
        if (jsonObj.get("package_weight") != null && !jsonObj.get("package_weight").isJsonNull()) {
            GetProductResponseDataPackageWeight.validateJsonElement(jsonObj.get("package_weight"));
        }
        // validate the optional field `prescription_requirement`
        if (jsonObj.get("prescription_requirement") != null && !jsonObj.get("prescription_requirement").isJsonNull()) {
            GetProductResponseDataPrescriptionRequirement.validateJsonElement(jsonObj.get("prescription_requirement"));
        }
        if (jsonObj.get("product_attributes") != null && !jsonObj.get("product_attributes").isJsonNull()) {
            JsonArray jsonArrayproductAttributes = jsonObj.getAsJsonArray("product_attributes");
            if (jsonArrayproductAttributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("product_attributes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `product_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("product_attributes").toString()));
                }

                // validate the optional field `product_attributes` (array)
                for (int i = 0; i < jsonArrayproductAttributes.size(); i++) {
                    GetProductResponseDataProductAttributes.validateJsonElement(jsonArrayproductAttributes.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("product_families") != null && !jsonObj.get("product_families").isJsonNull()) {
            JsonArray jsonArrayproductFamilies = jsonObj.getAsJsonArray("product_families");
            if (jsonArrayproductFamilies != null) {
                // ensure the json data is an array
                if (!jsonObj.get("product_families").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `product_families` to be an array in the JSON string but got `%s`", jsonObj.get("product_families").toString()));
                }

                // validate the optional field `product_families` (array)
                for (int i = 0; i < jsonArrayproductFamilies.size(); i++) {
                    GetProductResponseDataProductFamilies.validateJsonElement(jsonArrayproductFamilies.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("product_types") != null && !jsonObj.get("product_types").isJsonNull() && !jsonObj.get("product_types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_types` to be an array in the JSON string but got `%s`", jsonObj.get("product_types").toString()));
        }
        if (jsonObj.get("recommended_categories") != null && !jsonObj.get("recommended_categories").isJsonNull()) {
            JsonArray jsonArrayrecommendedCategories = jsonObj.getAsJsonArray("recommended_categories");
            if (jsonArrayrecommendedCategories != null) {
                // ensure the json data is an array
                if (!jsonObj.get("recommended_categories").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `recommended_categories` to be an array in the JSON string but got `%s`", jsonObj.get("recommended_categories").toString()));
                }

                // validate the optional field `recommended_categories` (array)
                for (int i = 0; i < jsonArrayrecommendedCategories.size(); i++) {
                    GetProductResponseDataRecommendedCategories.validateJsonElement(jsonArrayrecommendedCategories.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("responsible_person_ids") != null && !jsonObj.get("responsible_person_ids").isJsonNull() && !jsonObj.get("responsible_person_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responsible_person_ids` to be an array in the JSON string but got `%s`", jsonObj.get("responsible_person_ids").toString()));
        }
        if ((jsonObj.get("shipping_insurance_requirement") != null && !jsonObj.get("shipping_insurance_requirement").isJsonNull()) && !jsonObj.get("shipping_insurance_requirement").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_insurance_requirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_insurance_requirement").toString()));
        }
        // validate the optional field `size_chart`
        if (jsonObj.get("size_chart") != null && !jsonObj.get("size_chart").isJsonNull()) {
            GetProductResponseDataSizeChart.validateJsonElement(jsonObj.get("size_chart"));
        }
        if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonNull()) {
            JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
            if (jsonArrayskus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
                }

                // validate the optional field `skus` (array)
                for (int i = 0; i < jsonArrayskus.size(); i++) {
                    GetProductResponseDataSkus.validateJsonElement(jsonArrayskus.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
        }
        // validate the optional field `video`
        if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
            GetProductResponseDataVideo.validateJsonElement(jsonObj.get("video"));
        }
    }

    /**
     * Create an instance of GetProductResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetProductResponseData
     * @throws IOException if the JSON string is invalid with respect to GetProductResponseData
     */
    public static GetProductResponseData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetProductResponseData.class);
    }

    public GetProductResponseData audit(GetProductResponseDataAudit audit) {
        this.audit = audit;
        return this;
    }

    /**
     * Get audit
     *
     * @return audit
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataAudit getAudit() {
        return audit;
    }

    public void setAudit(GetProductResponseDataAudit audit) {
        this.audit = audit;
    }

    public GetProductResponseData auditFailedReasons(List<GetProductResponseDataAuditFailedReasons> auditFailedReasons) {
        this.auditFailedReasons = auditFailedReasons;
        return this;
    }

    public GetProductResponseData addAuditFailedReasonsItem(GetProductResponseDataAuditFailedReasons auditFailedReasonsItem) {
        if (this.auditFailedReasons == null) {
            this.auditFailedReasons = new ArrayList<>();
        }
        this.auditFailedReasons.add(auditFailedReasonsItem);
        return this;
    }

    /**
     * TikTok Shop audit failure information.
     *
     * @return auditFailedReasons
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataAuditFailedReasons> getAuditFailedReasons() {
        return auditFailedReasons;
    }

    public void setAuditFailedReasons(List<GetProductResponseDataAuditFailedReasons> auditFailedReasons) {
        this.auditFailedReasons = auditFailedReasons;
    }

    public GetProductResponseData brand(GetProductResponseDataBrand brand) {
        this.brand = brand;
        return this;
    }

    /**
     * Get brand
     *
     * @return brand
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataBrand getBrand() {
        return brand;
    }

    public void setBrand(GetProductResponseDataBrand brand) {
        this.brand = brand;
    }

    public GetProductResponseData categoryChains(List<GetProductResponseDataCategoryChains> categoryChains) {
        this.categoryChains = categoryChains;
        return this;
    }

    public GetProductResponseData addCategoryChainsItem(GetProductResponseDataCategoryChains categoryChainsItem) {
        if (this.categoryChains == null) {
            this.categoryChains = new ArrayList<>();
        }
        this.categoryChains.add(categoryChainsItem);
        return this;
    }

    /**
     * Product category tree information.
     *
     * @return categoryChains
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataCategoryChains> getCategoryChains() {
        return categoryChains;
    }

    public void setCategoryChains(List<GetProductResponseDataCategoryChains> categoryChains) {
        this.categoryChains = categoryChains;
    }

    public GetProductResponseData certifications(List<GetProductResponseDataCertifications> certifications) {
        this.certifications = certifications;
        return this;
    }

    public GetProductResponseData addCertificationsItem(GetProductResponseDataCertifications certificationsItem) {
        if (this.certifications == null) {
            this.certifications = new ArrayList<>();
        }
        this.certifications.add(certificationsItem);
        return this;
    }

    /**
     * The list of certifications for your product.
     *
     * @return certifications
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataCertifications> getCertifications() {
        return certifications;
    }

    public void setCertifications(List<GetProductResponseDataCertifications> certifications) {
        this.certifications = certifications;
    }

    public GetProductResponseData createTime(Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * The time when the product is created. Unix timestamp.
     *
     * @return createTime
     **/
    @javax.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public GetProductResponseData deliveryOptions(List<GetProductResponseDataDeliveryOptions> deliveryOptions) {
        this.deliveryOptions = deliveryOptions;
        return this;
    }

    public GetProductResponseData addDeliveryOptionsItem(GetProductResponseDataDeliveryOptions deliveryOptionsItem) {
        if (this.deliveryOptions == null) {
            this.deliveryOptions = new ArrayList<>();
        }
        this.deliveryOptions.add(deliveryOptionsItem);
        return this;
    }

    /**
     * Delivery option information.
     *
     * @return deliveryOptions
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataDeliveryOptions> getDeliveryOptions() {
        return deliveryOptions;
    }

    public void setDeliveryOptions(List<GetProductResponseDataDeliveryOptions> deliveryOptions) {
        this.deliveryOptions = deliveryOptions;
    }

    public GetProductResponseData description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The product description in HTML format.
     *
     * @return description
     **/
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public GetProductResponseData externalProductId(String externalProductId) {
        this.externalProductId = externalProductId;
        return this;
    }

    /**
     * An external identifier used in an external ecommerce platform. This is used to associate the product between TikTok Shop and the external ecommerce platform.
     *
     * @return externalProductId
     **/
    @javax.annotation.Nullable
    public String getExternalProductId() {
        return externalProductId;
    }

    public void setExternalProductId(String externalProductId) {
        this.externalProductId = externalProductId;
    }

    public GetProductResponseData globalProductAssociation(GetProductResponseDataGlobalProductAssociation globalProductAssociation) {
        this.globalProductAssociation = globalProductAssociation;
        return this;
    }

    /**
     * Get globalProductAssociation
     *
     * @return globalProductAssociation
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataGlobalProductAssociation getGlobalProductAssociation() {
        return globalProductAssociation;
    }

    public void setGlobalProductAssociation(GetProductResponseDataGlobalProductAssociation globalProductAssociation) {
        this.globalProductAssociation = globalProductAssociation;
    }

    public GetProductResponseData id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The product ID generated by TikTok Shop.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public GetProductResponseData integratedPlatformStatuses(List<GetProductResponseDataIntegratedPlatformStatuses> integratedPlatformStatuses) {
        this.integratedPlatformStatuses = integratedPlatformStatuses;
        return this;
    }

    public GetProductResponseData addIntegratedPlatformStatusesItem(GetProductResponseDataIntegratedPlatformStatuses integratedPlatformStatusesItem) {
        if (this.integratedPlatformStatuses == null) {
            this.integratedPlatformStatuses = new ArrayList<>();
        }
        this.integratedPlatformStatuses.add(integratedPlatformStatusesItem);
        return this;
    }

    /**
     * The current status of the product on platforms that are natively integrated with TikTok Shop (e.g. TOKOPEDIA).  **Note**: For Indonesia sellers, if you did not set the listing platform as &#x60;TOKOPEDIA&#x60; when creating or editing a product, this will be omitted.
     *
     * @return integratedPlatformStatuses
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataIntegratedPlatformStatuses> getIntegratedPlatformStatuses() {
        return integratedPlatformStatuses;
    }

    public void setIntegratedPlatformStatuses(List<GetProductResponseDataIntegratedPlatformStatuses> integratedPlatformStatuses) {
        this.integratedPlatformStatuses = integratedPlatformStatuses;
    }

    public GetProductResponseData isCodAllowed(Boolean isCodAllowed) {
        this.isCodAllowed = isCodAllowed;
        return this;
    }

    /**
     * A flag indicating whether to show the Cash On Delivery (COD) payment option during checkout. Applicable only for the following markets: - Global sellers: MY, PH, SA, TH, VN - Local sellers: ID, MY, PH, SA, TH, VN
     *
     * @return isCodAllowed
     **/
    @javax.annotation.Nullable
    public Boolean getIsCodAllowed() {
        return isCodAllowed;
    }

    public void setIsCodAllowed(Boolean isCodAllowed) {
        this.isCodAllowed = isCodAllowed;
    }

    public GetProductResponseData isNotForSale(Boolean isNotForSale) {
        this.isNotForSale = isNotForSale;
        return this;
    }

    /**
     * A flag indicating whether the product is not for sale and only available through Gift with Purchase (GWP) promotions. Such products won&#39;t appear in searches or recommendations True: Not for sale False: For sale
     *
     * @return isNotForSale
     **/
    @javax.annotation.Nullable
    public Boolean getIsNotForSale() {
        return isNotForSale;
    }

    public void setIsNotForSale(Boolean isNotForSale) {
        this.isNotForSale = isNotForSale;
    }

    public GetProductResponseData isPreOwned(Boolean isPreOwned) {
        this.isPreOwned = isPreOwned;
        return this;
    }

    /**
     * A flag to indicate if the product is pre-owned. Applicable only if TOKOPEDIA is the sole listing platform.  **Note**: Pre-owned products on the TikTok Shop platform are identified by the &#x60;category_id&#x60;, which must belong to one of the designated pre-owned product categories (e.g. pre-owned luxury bags, luggage, and accessories).
     *
     * @return isPreOwned
     **/
    @javax.annotation.Nullable
    public Boolean getIsPreOwned() {
        return isPreOwned;
    }

    public void setIsPreOwned(Boolean isPreOwned) {
        this.isPreOwned = isPreOwned;
    }

    public GetProductResponseData listingQualityTier(String listingQualityTier) {
        this.listingQualityTier = listingQualityTier;
        return this;
    }

    /**
     * The current quality tier of this product listing. The quality tier of a product listing depends on the quality of the content in its product fields such as the title, image, attributes etc.  Possible values: - POOR - FAIR - GOOD  **Note**: Available only for the US market.
     *
     * @return listingQualityTier
     **/
    @javax.annotation.Nullable
    public String getListingQualityTier() {
        return listingQualityTier;
    }

    public void setListingQualityTier(String listingQualityTier) {
        this.listingQualityTier = listingQualityTier;
    }

    public GetProductResponseData mainImages(List<GetProductResponseDataMainImages> mainImages) {
        this.mainImages = mainImages;
        return this;
    }

    public GetProductResponseData addMainImagesItem(GetProductResponseDataMainImages mainImagesItem) {
        if (this.mainImages == null) {
            this.mainImages = new ArrayList<>();
        }
        this.mainImages.add(mainImagesItem);
        return this;
    }

    /**
     * A list of images to display in the product image gallery.
     *
     * @return mainImages
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataMainImages> getMainImages() {
        return mainImages;
    }

    public void setMainImages(List<GetProductResponseDataMainImages> mainImages) {
        this.mainImages = mainImages;
    }

    public GetProductResponseData manufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
        return this;
    }

    public GetProductResponseData addManufacturerIdsItem(String manufacturerIdsItem) {
        if (this.manufacturerIds == null) {
            this.manufacturerIds = new ArrayList<>();
        }
        this.manufacturerIds.add(manufacturerIdsItem);
        return this;
    }

    /**
     * The list of manufacturer IDs.  Pass this value to the &#x60;manufacturer_id&#x60; field in the [Search Manufacturers API](67066a580dcee902fa03ccf9) to obtain more information about a manufacturer.  **Note**: Applicable only for the EU market in certain categories
     *
     * @return manufacturerIds
     **/
    @javax.annotation.Nullable
    public List<String> getManufacturerIds() {
        return manufacturerIds;
    }

    public void setManufacturerIds(List<String> manufacturerIds) {
        this.manufacturerIds = manufacturerIds;
    }

    public GetProductResponseData minimumOrderQuantity(Integer minimumOrderQuantity) {
        this.minimumOrderQuantity = minimumOrderQuantity;
        return this;
    }

    /**
     * The minimum order quantity for the product. Valid range: [1, 20]  Applicable only for the Indonesia market and selected sellers in other SEA markets. Contact your account manager for more information about gaining access to this field.
     *
     * @return minimumOrderQuantity
     **/
    @javax.annotation.Nullable
    public Integer getMinimumOrderQuantity() {
        return minimumOrderQuantity;
    }

    public void setMinimumOrderQuantity(Integer minimumOrderQuantity) {
        this.minimumOrderQuantity = minimumOrderQuantity;
    }

    public GetProductResponseData packageDimensions(GetProductResponseDataPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
        return this;
    }

    /**
     * Get packageDimensions
     *
     * @return packageDimensions
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataPackageDimensions getPackageDimensions() {
        return packageDimensions;
    }

    public void setPackageDimensions(GetProductResponseDataPackageDimensions packageDimensions) {
        this.packageDimensions = packageDimensions;
    }

    public GetProductResponseData packageWeight(GetProductResponseDataPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
        return this;
    }

    /**
     * Get packageWeight
     *
     * @return packageWeight
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataPackageWeight getPackageWeight() {
        return packageWeight;
    }

    public void setPackageWeight(GetProductResponseDataPackageWeight packageWeight) {
        this.packageWeight = packageWeight;
    }

    public GetProductResponseData prescriptionRequirement(GetProductResponseDataPrescriptionRequirement prescriptionRequirement) {
        this.prescriptionRequirement = prescriptionRequirement;
        return this;
    }

    /**
     * Get prescriptionRequirement
     *
     * @return prescriptionRequirement
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataPrescriptionRequirement getPrescriptionRequirement() {
        return prescriptionRequirement;
    }

    public void setPrescriptionRequirement(GetProductResponseDataPrescriptionRequirement prescriptionRequirement) {
        this.prescriptionRequirement = prescriptionRequirement;
    }

    public GetProductResponseData productAttributes(List<GetProductResponseDataProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
        return this;
    }

    public GetProductResponseData addProductAttributesItem(GetProductResponseDataProductAttributes productAttributesItem) {
        if (this.productAttributes == null) {
            this.productAttributes = new ArrayList<>();
        }
        this.productAttributes.add(productAttributesItem);
        return this;
    }

    /**
     * A list of general attributes (e.g. manufacturer, country of origin, materials used) that describe the product as a whole, regardless of variant.
     *
     * @return productAttributes
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataProductAttributes> getProductAttributes() {
        return productAttributes;
    }

    public void setProductAttributes(List<GetProductResponseDataProductAttributes> productAttributes) {
        this.productAttributes = productAttributes;
    }

    public GetProductResponseData productFamilies(List<GetProductResponseDataProductFamilies> productFamilies) {
        this.productFamilies = productFamilies;
        return this;
    }

    public GetProductResponseData addProductFamiliesItem(GetProductResponseDataProductFamilies productFamiliesItem) {
        if (this.productFamilies == null) {
            this.productFamilies = new ArrayList<>();
        }
        this.productFamilies.add(productFamiliesItem);
        return this;
    }

    /**
     * The **live** product family that this product belongs to. A product family is a virtual group of products that share common characteristics (such as flavor, version, or size), allowing them to appear as selectable variations on the product page. **Note**:  - Applicable only for US local sellers. - Omitted if this product does not belong to any product family.
     *
     * @return productFamilies
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataProductFamilies> getProductFamilies() {
        return productFamilies;
    }

    public void setProductFamilies(List<GetProductResponseDataProductFamilies> productFamilies) {
        this.productFamilies = productFamilies;
    }

    public GetProductResponseData productTypes(List<String> productTypes) {
        this.productTypes = productTypes;
        return this;
    }

    public GetProductResponseData addProductTypesItem(String productTypesItem) {
        if (this.productTypes == null) {
            this.productTypes = new ArrayList<>();
        }
        this.productTypes.add(productTypesItem);
        return this;
    }

    /**
     * The product type. Possible values: - COMBINED_PRODUCT: Indicates this is a combined listing product. - IN_COMBINED_PRODUCT: Indicates this product is part of a combined listing. - GPR_TARGET_PRODUCT: Indicates this product is synchronized to global listings. Applicable only for the EU market.
     *
     * @return productTypes
     **/
    @javax.annotation.Nullable
    public List<String> getProductTypes() {
        return productTypes;
    }

    public void setProductTypes(List<String> productTypes) {
        this.productTypes = productTypes;
    }

    public GetProductResponseData recommendedCategories(List<GetProductResponseDataRecommendedCategories> recommendedCategories) {
        this.recommendedCategories = recommendedCategories;
        return this;
    }

    public GetProductResponseData addRecommendedCategoriesItem(GetProductResponseDataRecommendedCategories recommendedCategoriesItem) {
        if (this.recommendedCategories == null) {
            this.recommendedCategories = new ArrayList<>();
        }
        this.recommendedCategories.add(recommendedCategoriesItem);
        return this;
    }

    /**
     * Recommended categories for the product based on the product title, description, and images.
     *
     * @return recommendedCategories
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataRecommendedCategories> getRecommendedCategories() {
        return recommendedCategories;
    }

    public void setRecommendedCategories(List<GetProductResponseDataRecommendedCategories> recommendedCategories) {
        this.recommendedCategories = recommendedCategories;
    }

    public GetProductResponseData responsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
        return this;
    }

    public GetProductResponseData addResponsiblePersonIdsItem(String responsiblePersonIdsItem) {
        if (this.responsiblePersonIds == null) {
            this.responsiblePersonIds = new ArrayList<>();
        }
        this.responsiblePersonIds.add(responsiblePersonIdsItem);
        return this;
    }

    /**
     * The list of responsible person IDs.  Pass this value to the &#x60;responsible_person_id&#x60; field in the [Search Responsible Persons API](67066a55f17b7d02f95d2fb1) to obtain more information about a responsible person.  **Note**: Applicable only for the EU market in certain categories
     *
     * @return responsiblePersonIds
     **/
    @javax.annotation.Nullable
    public List<String> getResponsiblePersonIds() {
        return responsiblePersonIds;
    }

    public void setResponsiblePersonIds(List<String> responsiblePersonIds) {
        this.responsiblePersonIds = responsiblePersonIds;
    }

    public GetProductResponseData shippingInsuranceRequirement(String shippingInsuranceRequirement) {
        this.shippingInsuranceRequirement = shippingInsuranceRequirement;
        return this;
    }

    /**
     * The shipping insurance purchase requirement imposed on buyers for the product.  Possible values: - REQUIRED: Shipping insurance is mandatory and buyers can&#39;t opt out. - OPTIONAL: Buyers can choose to purchase shipping insurance through the platform. - NOT_SUPPORTED: Shipping insurance is not supported for the product. Default: OPTIONAL  Applicable only if the listing platforms include TOKOPEDIA.
     *
     * @return shippingInsuranceRequirement
     **/
    @javax.annotation.Nullable
    public String getShippingInsuranceRequirement() {
        return shippingInsuranceRequirement;
    }

    public void setShippingInsuranceRequirement(String shippingInsuranceRequirement) {
        this.shippingInsuranceRequirement = shippingInsuranceRequirement;
    }

    public GetProductResponseData sizeChart(GetProductResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
        return this;
    }

    /**
     * Get sizeChart
     *
     * @return sizeChart
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataSizeChart getSizeChart() {
        return sizeChart;
    }

    public void setSizeChart(GetProductResponseDataSizeChart sizeChart) {
        this.sizeChart = sizeChart;
    }

    public GetProductResponseData skus(List<GetProductResponseDataSkus> skus) {
        this.skus = skus;
        return this;
    }

    public GetProductResponseData addSkusItem(GetProductResponseDataSkus skusItem) {
        if (this.skus == null) {
            this.skus = new ArrayList<>();
        }
        this.skus.add(skusItem);
        return this;
    }

    /**
     * A list of Stock Keeping Units (SKUs) used to identify distinct variants of the product.
     *
     * @return skus
     **/
    @javax.annotation.Nullable
    public List<GetProductResponseDataSkus> getSkus() {
        return skus;
    }

    public void setSkus(List<GetProductResponseDataSkus> skus) {
        this.skus = skus;
    }

    public GetProductResponseData status(String status) {
        this.status = status;
        return this;
    }

    /**
     * The product status in TikTok Shop. Possible values:  - DRAFT - PENDING - FAILED - ACTIVATE - SELLER_DEACTIVATED - PLATFORM_DEACTIVATED - FREEZE - DELETED  **Note**: For Indonesia sellers, if you did not set the listing platform as &#x60;TIKTOK_SHOP&#x60; when creating or editing a product, this will be omitted.
     *
     * @return status
     **/
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public GetProductResponseData title(String title) {
        this.title = title;
        return this;
    }

    /**
     * The product title.
     *
     * @return title
     **/
    @javax.annotation.Nullable
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public GetProductResponseData updateTime(Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * The time when the product is last updated. Unix timestamp.
     *
     * @return updateTime
     **/
    @javax.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(Long updateTime) {
        this.updateTime = updateTime;
    }

    public GetProductResponseData video(GetProductResponseDataVideo video) {
        this.video = video;
        return this;
    }

    /**
     * Get video
     *
     * @return video
     **/
    @javax.annotation.Nullable
    public GetProductResponseDataVideo getVideo() {
        return video;
    }

    public void setVideo(GetProductResponseDataVideo video) {
        this.video = video;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetProductResponseData product202309GetProductResponseData = (GetProductResponseData) o;
        return Objects.equals(this.audit, product202309GetProductResponseData.audit) &&
            Objects.equals(this.auditFailedReasons, product202309GetProductResponseData.auditFailedReasons) &&
            Objects.equals(this.brand, product202309GetProductResponseData.brand) &&
            Objects.equals(this.categoryChains, product202309GetProductResponseData.categoryChains) &&
            Objects.equals(this.certifications, product202309GetProductResponseData.certifications) &&
            Objects.equals(this.createTime, product202309GetProductResponseData.createTime) &&
            Objects.equals(this.deliveryOptions, product202309GetProductResponseData.deliveryOptions) &&
            Objects.equals(this.description, product202309GetProductResponseData.description) &&
            Objects.equals(this.externalProductId, product202309GetProductResponseData.externalProductId) &&
            Objects.equals(this.globalProductAssociation, product202309GetProductResponseData.globalProductAssociation) &&
            Objects.equals(this.id, product202309GetProductResponseData.id) &&
            Objects.equals(this.integratedPlatformStatuses, product202309GetProductResponseData.integratedPlatformStatuses) &&
            Objects.equals(this.isCodAllowed, product202309GetProductResponseData.isCodAllowed) &&
            Objects.equals(this.isNotForSale, product202309GetProductResponseData.isNotForSale) &&
            Objects.equals(this.isPreOwned, product202309GetProductResponseData.isPreOwned) &&
            Objects.equals(this.listingQualityTier, product202309GetProductResponseData.listingQualityTier) &&
            Objects.equals(this.mainImages, product202309GetProductResponseData.mainImages) &&
            Objects.equals(this.manufacturerIds, product202309GetProductResponseData.manufacturerIds) &&
            Objects.equals(this.minimumOrderQuantity, product202309GetProductResponseData.minimumOrderQuantity) &&
            Objects.equals(this.packageDimensions, product202309GetProductResponseData.packageDimensions) &&
            Objects.equals(this.packageWeight, product202309GetProductResponseData.packageWeight) &&
            Objects.equals(this.prescriptionRequirement, product202309GetProductResponseData.prescriptionRequirement) &&
            Objects.equals(this.productAttributes, product202309GetProductResponseData.productAttributes) &&
            Objects.equals(this.productFamilies, product202309GetProductResponseData.productFamilies) &&
            Objects.equals(this.productTypes, product202309GetProductResponseData.productTypes) &&
            Objects.equals(this.recommendedCategories, product202309GetProductResponseData.recommendedCategories) &&
            Objects.equals(this.responsiblePersonIds, product202309GetProductResponseData.responsiblePersonIds) &&
            Objects.equals(this.shippingInsuranceRequirement, product202309GetProductResponseData.shippingInsuranceRequirement) &&
            Objects.equals(this.sizeChart, product202309GetProductResponseData.sizeChart) &&
            Objects.equals(this.skus, product202309GetProductResponseData.skus) &&
            Objects.equals(this.status, product202309GetProductResponseData.status) &&
            Objects.equals(this.title, product202309GetProductResponseData.title) &&
            Objects.equals(this.updateTime, product202309GetProductResponseData.updateTime) &&
            Objects.equals(this.video, product202309GetProductResponseData.video);
    }

    @Override
    public int hashCode() {
        return Objects.hash(audit, auditFailedReasons, brand, categoryChains, certifications, createTime, deliveryOptions, description, externalProductId, globalProductAssociation, id, integratedPlatformStatuses, isCodAllowed, isNotForSale, isPreOwned, listingQualityTier, mainImages, manufacturerIds, minimumOrderQuantity, packageDimensions, packageWeight, prescriptionRequirement, productAttributes, productFamilies, productTypes, recommendedCategories, responsiblePersonIds, shippingInsuranceRequirement, sizeChart, skus, status, title, updateTime, video);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetProductResponseData {\n");
        sb.append("    audit: ").append(toIndentedString(audit)).append("\n");
        sb.append("    auditFailedReasons: ").append(toIndentedString(auditFailedReasons)).append("\n");
        sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
        sb.append("    categoryChains: ").append(toIndentedString(categoryChains)).append("\n");
        sb.append("    certifications: ").append(toIndentedString(certifications)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    deliveryOptions: ").append(toIndentedString(deliveryOptions)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    externalProductId: ").append(toIndentedString(externalProductId)).append("\n");
        sb.append("    globalProductAssociation: ").append(toIndentedString(globalProductAssociation)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    integratedPlatformStatuses: ").append(toIndentedString(integratedPlatformStatuses)).append("\n");
        sb.append("    isCodAllowed: ").append(toIndentedString(isCodAllowed)).append("\n");
        sb.append("    isNotForSale: ").append(toIndentedString(isNotForSale)).append("\n");
        sb.append("    isPreOwned: ").append(toIndentedString(isPreOwned)).append("\n");
        sb.append("    listingQualityTier: ").append(toIndentedString(listingQualityTier)).append("\n");
        sb.append("    mainImages: ").append(toIndentedString(mainImages)).append("\n");
        sb.append("    manufacturerIds: ").append(toIndentedString(manufacturerIds)).append("\n");
        sb.append("    minimumOrderQuantity: ").append(toIndentedString(minimumOrderQuantity)).append("\n");
        sb.append("    packageDimensions: ").append(toIndentedString(packageDimensions)).append("\n");
        sb.append("    packageWeight: ").append(toIndentedString(packageWeight)).append("\n");
        sb.append("    prescriptionRequirement: ").append(toIndentedString(prescriptionRequirement)).append("\n");
        sb.append("    productAttributes: ").append(toIndentedString(productAttributes)).append("\n");
        sb.append("    productFamilies: ").append(toIndentedString(productFamilies)).append("\n");
        sb.append("    productTypes: ").append(toIndentedString(productTypes)).append("\n");
        sb.append("    recommendedCategories: ").append(toIndentedString(recommendedCategories)).append("\n");
        sb.append("    responsiblePersonIds: ").append(toIndentedString(responsiblePersonIds)).append("\n");
        sb.append("    shippingInsuranceRequirement: ").append(toIndentedString(shippingInsuranceRequirement)).append("\n");
        sb.append("    sizeChart: ").append(toIndentedString(sizeChart)).append("\n");
        sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    video: ").append(toIndentedString(video)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetProductResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetProductResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetProductResponseData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetProductResponseData> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetProductResponseData.class));

            return (TypeAdapter<T>) new TypeAdapter<GetProductResponseData>() {
                @Override
                public void write(JsonWriter out, GetProductResponseData value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetProductResponseData read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

