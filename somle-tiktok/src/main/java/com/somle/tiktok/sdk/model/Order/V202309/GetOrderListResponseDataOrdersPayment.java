/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Order.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;


/**
 * GetOrderListResponseDataOrdersPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class GetOrderListResponseDataOrdersPayment {
    public static final String SERIALIZED_NAME_BUYER_SERVICE_FEE = "buyer_service_fee";
    public static final String SERIALIZED_NAME_CURRENCY = "currency";
    public static final String SERIALIZED_NAME_HANDLING_FEE = "handling_fee";
    public static final String SERIALIZED_NAME_ITEM_INSURANCE_FEE = "item_insurance_fee";
    public static final String SERIALIZED_NAME_ORIGINAL_SHIPPING_FEE = "original_shipping_fee";
    public static final String SERIALIZED_NAME_ORIGINAL_TOTAL_PRODUCT_PRICE = "original_total_product_price";
    public static final String SERIALIZED_NAME_PLATFORM_DISCOUNT = "platform_discount";
    public static final String SERIALIZED_NAME_PRODUCT_TAX = "product_tax";
    public static final String SERIALIZED_NAME_RETAIL_DELIVERY_FEE = "retail_delivery_fee";
    public static final String SERIALIZED_NAME_SELLER_DISCOUNT = "seller_discount";
    public static final String SERIALIZED_NAME_SHIPPING_FEE = "shipping_fee";
    public static final String SERIALIZED_NAME_SHIPPING_FEE_COFUNDED_DISCOUNT = "shipping_fee_cofunded_discount";
    public static final String SERIALIZED_NAME_SHIPPING_FEE_PLATFORM_DISCOUNT = "shipping_fee_platform_discount";
    public static final String SERIALIZED_NAME_SHIPPING_FEE_SELLER_DISCOUNT = "shipping_fee_seller_discount";
    public static final String SERIALIZED_NAME_SHIPPING_FEE_TAX = "shipping_fee_tax";
    public static final String SERIALIZED_NAME_SHIPPING_INSURANCE_FEE = "shipping_insurance_fee";
    public static final String SERIALIZED_NAME_SMALL_ORDER_FEE = "small_order_fee";
    public static final String SERIALIZED_NAME_SUB_TOTAL = "sub_total";
    public static final String SERIALIZED_NAME_TAX = "tax";
    public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("buyer_service_fee");
        openapiFields.add("currency");
        openapiFields.add("handling_fee");
        openapiFields.add("item_insurance_fee");
        openapiFields.add("original_shipping_fee");
        openapiFields.add("original_total_product_price");
        openapiFields.add("platform_discount");
        openapiFields.add("product_tax");
        openapiFields.add("retail_delivery_fee");
        openapiFields.add("seller_discount");
        openapiFields.add("shipping_fee");
        openapiFields.add("shipping_fee_cofunded_discount");
        openapiFields.add("shipping_fee_platform_discount");
        openapiFields.add("shipping_fee_seller_discount");
        openapiFields.add("shipping_fee_tax");
        openapiFields.add("shipping_insurance_fee");
        openapiFields.add("small_order_fee");
        openapiFields.add("sub_total");
        openapiFields.add("tax");
        openapiFields.add("total_amount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_BUYER_SERVICE_FEE)
    private String buyerServiceFee;
    @SerializedName(SERIALIZED_NAME_CURRENCY)
    private String currency;
    @SerializedName(SERIALIZED_NAME_HANDLING_FEE)
    private String handlingFee;
    @SerializedName(SERIALIZED_NAME_ITEM_INSURANCE_FEE)
    private String itemInsuranceFee;
    @SerializedName(SERIALIZED_NAME_ORIGINAL_SHIPPING_FEE)
    private String originalShippingFee;
    @SerializedName(SERIALIZED_NAME_ORIGINAL_TOTAL_PRODUCT_PRICE)
    private String originalTotalProductPrice;
    @SerializedName(SERIALIZED_NAME_PLATFORM_DISCOUNT)
    private String platformDiscount;
    @SerializedName(SERIALIZED_NAME_PRODUCT_TAX)
    private String productTax;
    @SerializedName(SERIALIZED_NAME_RETAIL_DELIVERY_FEE)
    private String retailDeliveryFee;
    @SerializedName(SERIALIZED_NAME_SELLER_DISCOUNT)
    private String sellerDiscount;
    @SerializedName(SERIALIZED_NAME_SHIPPING_FEE)
    private String shippingFee;
    @SerializedName(SERIALIZED_NAME_SHIPPING_FEE_COFUNDED_DISCOUNT)
    private String shippingFeeCofundedDiscount;
    @SerializedName(SERIALIZED_NAME_SHIPPING_FEE_PLATFORM_DISCOUNT)
    private String shippingFeePlatformDiscount;
    @SerializedName(SERIALIZED_NAME_SHIPPING_FEE_SELLER_DISCOUNT)
    private String shippingFeeSellerDiscount;
    @SerializedName(SERIALIZED_NAME_SHIPPING_FEE_TAX)
    private String shippingFeeTax;
    @SerializedName(SERIALIZED_NAME_SHIPPING_INSURANCE_FEE)
    private String shippingInsuranceFee;
    @SerializedName(SERIALIZED_NAME_SMALL_ORDER_FEE)
    private String smallOrderFee;
    @SerializedName(SERIALIZED_NAME_SUB_TOTAL)
    private String subTotal;
    @SerializedName(SERIALIZED_NAME_TAX)
    private String tax;
    @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
    private String totalAmount;

    public GetOrderListResponseDataOrdersPayment() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetOrderListResponseDataOrdersPayment
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetOrderListResponseDataOrdersPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrderListResponseDataOrdersPayment is not found in the empty JSON string", GetOrderListResponseDataOrdersPayment.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetOrderListResponseDataOrdersPayment.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrderListResponseDataOrdersPayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("buyer_service_fee") != null && !jsonObj.get("buyer_service_fee").isJsonNull()) && !jsonObj.get("buyer_service_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `buyer_service_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_service_fee").toString()));
        }
        if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
        }
        if ((jsonObj.get("handling_fee") != null && !jsonObj.get("handling_fee").isJsonNull()) && !jsonObj.get("handling_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `handling_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handling_fee").toString()));
        }
        if ((jsonObj.get("item_insurance_fee") != null && !jsonObj.get("item_insurance_fee").isJsonNull()) && !jsonObj.get("item_insurance_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `item_insurance_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_insurance_fee").toString()));
        }
        if ((jsonObj.get("original_shipping_fee") != null && !jsonObj.get("original_shipping_fee").isJsonNull()) && !jsonObj.get("original_shipping_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `original_shipping_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_shipping_fee").toString()));
        }
        if ((jsonObj.get("original_total_product_price") != null && !jsonObj.get("original_total_product_price").isJsonNull()) && !jsonObj.get("original_total_product_price").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `original_total_product_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_total_product_price").toString()));
        }
        if ((jsonObj.get("platform_discount") != null && !jsonObj.get("platform_discount").isJsonNull()) && !jsonObj.get("platform_discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `platform_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform_discount").toString()));
        }
        if ((jsonObj.get("product_tax") != null && !jsonObj.get("product_tax").isJsonNull()) && !jsonObj.get("product_tax").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_tax").toString()));
        }
        if ((jsonObj.get("retail_delivery_fee") != null && !jsonObj.get("retail_delivery_fee").isJsonNull()) && !jsonObj.get("retail_delivery_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `retail_delivery_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retail_delivery_fee").toString()));
        }
        if ((jsonObj.get("seller_discount") != null && !jsonObj.get("seller_discount").isJsonNull()) && !jsonObj.get("seller_discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_discount").toString()));
        }
        if ((jsonObj.get("shipping_fee") != null && !jsonObj.get("shipping_fee").isJsonNull()) && !jsonObj.get("shipping_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_fee").toString()));
        }
        if ((jsonObj.get("shipping_fee_cofunded_discount") != null && !jsonObj.get("shipping_fee_cofunded_discount").isJsonNull()) && !jsonObj.get("shipping_fee_cofunded_discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_fee_cofunded_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_fee_cofunded_discount").toString()));
        }
        if ((jsonObj.get("shipping_fee_platform_discount") != null && !jsonObj.get("shipping_fee_platform_discount").isJsonNull()) && !jsonObj.get("shipping_fee_platform_discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_fee_platform_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_fee_platform_discount").toString()));
        }
        if ((jsonObj.get("shipping_fee_seller_discount") != null && !jsonObj.get("shipping_fee_seller_discount").isJsonNull()) && !jsonObj.get("shipping_fee_seller_discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_fee_seller_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_fee_seller_discount").toString()));
        }
        if ((jsonObj.get("shipping_fee_tax") != null && !jsonObj.get("shipping_fee_tax").isJsonNull()) && !jsonObj.get("shipping_fee_tax").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_fee_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_fee_tax").toString()));
        }
        if ((jsonObj.get("shipping_insurance_fee") != null && !jsonObj.get("shipping_insurance_fee").isJsonNull()) && !jsonObj.get("shipping_insurance_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_insurance_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_insurance_fee").toString()));
        }
        if ((jsonObj.get("small_order_fee") != null && !jsonObj.get("small_order_fee").isJsonNull()) && !jsonObj.get("small_order_fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `small_order_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("small_order_fee").toString()));
        }
        if ((jsonObj.get("sub_total") != null && !jsonObj.get("sub_total").isJsonNull()) && !jsonObj.get("sub_total").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sub_total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_total").toString()));
        }
        if ((jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) && !jsonObj.get("tax").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax").toString()));
        }
        if ((jsonObj.get("total_amount") != null && !jsonObj.get("total_amount").isJsonNull()) && !jsonObj.get("total_amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `total_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_amount").toString()));
        }
    }

    /**
     * Create an instance of GetOrderListResponseDataOrdersPayment given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetOrderListResponseDataOrdersPayment
     * @throws IOException if the JSON string is invalid with respect to GetOrderListResponseDataOrdersPayment
     */
    public static GetOrderListResponseDataOrdersPayment fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetOrderListResponseDataOrdersPayment.class);
    }

    public GetOrderListResponseDataOrdersPayment buyerServiceFee(String buyerServiceFee) {
        this.buyerServiceFee = buyerServiceFee;
        return this;
    }

    /**
     * A service fee is charged on every transaction made. The charge is applied from the fifth order onwards and collected directly from customers during checkout. Only available in the Indonesia market.
     *
     * @return buyerServiceFee
     **/
    @javax.annotation.Nullable
    public String getBuyerServiceFee() {
        return buyerServiceFee;
    }

    public void setBuyerServiceFee(String buyerServiceFee) {
        this.buyerServiceFee = buyerServiceFee;
    }

    public GetOrderListResponseDataOrdersPayment currency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Currency for payment.
     *
     * @return currency
     **/
    @javax.annotation.Nullable
    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public GetOrderListResponseDataOrdersPayment handlingFee(String handlingFee) {
        this.handlingFee = handlingFee;
        return this;
    }

    /**
     * A fee charged to the buyer to cover the additional processing/handling costs associated with the chosen payment method.  **Note**: Only available in the Indonesia market.
     *
     * @return handlingFee
     **/
    @javax.annotation.Nullable
    public String getHandlingFee() {
        return handlingFee;
    }

    public void setHandlingFee(String handlingFee) {
        this.handlingFee = handlingFee;
    }

    public GetOrderListResponseDataOrdersPayment itemInsuranceFee(String itemInsuranceFee) {
        this.itemInsuranceFee = itemInsuranceFee;
        return this;
    }

    /**
     * The cost incurred by the buyers for coverage against defects or damage to the product after purchase.  **Note**: Only available in the Indonesia market.
     *
     * @return itemInsuranceFee
     **/
    @javax.annotation.Nullable
    public String getItemInsuranceFee() {
        return itemInsuranceFee;
    }

    public void setItemInsuranceFee(String itemInsuranceFee) {
        this.itemInsuranceFee = itemInsuranceFee;
    }

    public GetOrderListResponseDataOrdersPayment originalShippingFee(String originalShippingFee) {
        this.originalShippingFee = originalShippingFee;
        return this;
    }

    /**
     * Shipping fee before discount.
     *
     * @return originalShippingFee
     **/
    @javax.annotation.Nullable
    public String getOriginalShippingFee() {
        return originalShippingFee;
    }

    public void setOriginalShippingFee(String originalShippingFee) {
        this.originalShippingFee = originalShippingFee;
    }

    public GetOrderListResponseDataOrdersPayment originalTotalProductPrice(String originalTotalProductPrice) {
        this.originalTotalProductPrice = originalTotalProductPrice;
        return this;
    }

    /**
     * Total original price of the products (VAT included for cross-border shops).  For the US market, this is pre-tax total amount.
     *
     * @return originalTotalProductPrice
     **/
    @javax.annotation.Nullable
    public String getOriginalTotalProductPrice() {
        return originalTotalProductPrice;
    }

    public void setOriginalTotalProductPrice(String originalTotalProductPrice) {
        this.originalTotalProductPrice = originalTotalProductPrice;
    }

    public GetOrderListResponseDataOrdersPayment platformDiscount(String platformDiscount) {
        this.platformDiscount = platformDiscount;
        return this;
    }

    /**
     * Product discount by platform.
     *
     * @return platformDiscount
     **/
    @javax.annotation.Nullable
    public String getPlatformDiscount() {
        return platformDiscount;
    }

    public void setPlatformDiscount(String platformDiscount) {
        this.platformDiscount = platformDiscount;
    }

    public GetOrderListResponseDataOrdersPayment productTax(String productTax) {
        this.productTax = productTax;
        return this;
    }

    /**
     * The tax on the total item price.
     *
     * @return productTax
     **/
    @javax.annotation.Nullable
    public String getProductTax() {
        return productTax;
    }

    public void setProductTax(String productTax) {
        this.productTax = productTax;
    }

    public GetOrderListResponseDataOrdersPayment retailDeliveryFee(String retailDeliveryFee) {
        this.retailDeliveryFee = retailDeliveryFee;
        return this;
    }

    /**
     * Retail delivery fee (RDF).   **Note**: Only available in the US market.
     *
     * @return retailDeliveryFee
     **/
    @javax.annotation.Nullable
    public String getRetailDeliveryFee() {
        return retailDeliveryFee;
    }

    public void setRetailDeliveryFee(String retailDeliveryFee) {
        this.retailDeliveryFee = retailDeliveryFee;
    }

    public GetOrderListResponseDataOrdersPayment sellerDiscount(String sellerDiscount) {
        this.sellerDiscount = sellerDiscount;
        return this;
    }

    /**
     * Product discount by seller.
     *
     * @return sellerDiscount
     **/
    @javax.annotation.Nullable
    public String getSellerDiscount() {
        return sellerDiscount;
    }

    public void setSellerDiscount(String sellerDiscount) {
        this.sellerDiscount = sellerDiscount;
    }

    public GetOrderListResponseDataOrdersPayment shippingFee(String shippingFee) {
        this.shippingFee = shippingFee;
        return this;
    }

    /**
     * Buyer paid shipping fee.   &#x60;shipping_fee &#x3D; original_shipping_fee - shipping_fee_seller_discount - shipping_fee_platform_discount&#x60;  For the US market, this is pre-tax total amount.
     *
     * @return shippingFee
     **/
    @javax.annotation.Nullable
    public String getShippingFee() {
        return shippingFee;
    }

    public void setShippingFee(String shippingFee) {
        this.shippingFee = shippingFee;
    }

    public GetOrderListResponseDataOrdersPayment shippingFeeCofundedDiscount(String shippingFeeCofundedDiscount) {
        this.shippingFeeCofundedDiscount = shippingFeeCofundedDiscount;
        return this;
    }

    /**
     * Shipping fee discount provided by seller, eligible for co-funded reimbursement upon order delivery, based on Co-Funded Free Shipping program terms. **Note**: This will be 0 for orders that did not meet minimum order value for co-funded reimbursement. In this case, refer to &#x60;shipping_fee_seller_discount&#x60; for the shipping discount the buyer received.
     *
     * @return shippingFeeCofundedDiscount
     **/
    @javax.annotation.Nullable
    public String getShippingFeeCofundedDiscount() {
        return shippingFeeCofundedDiscount;
    }

    public void setShippingFeeCofundedDiscount(String shippingFeeCofundedDiscount) {
        this.shippingFeeCofundedDiscount = shippingFeeCofundedDiscount;
    }

    public GetOrderListResponseDataOrdersPayment shippingFeePlatformDiscount(String shippingFeePlatformDiscount) {
        this.shippingFeePlatformDiscount = shippingFeePlatformDiscount;
        return this;
    }

    /**
     * Shipping fee discount provided by platform.
     *
     * @return shippingFeePlatformDiscount
     **/
    @javax.annotation.Nullable
    public String getShippingFeePlatformDiscount() {
        return shippingFeePlatformDiscount;
    }

    public void setShippingFeePlatformDiscount(String shippingFeePlatformDiscount) {
        this.shippingFeePlatformDiscount = shippingFeePlatformDiscount;
    }

    public GetOrderListResponseDataOrdersPayment shippingFeeSellerDiscount(String shippingFeeSellerDiscount) {
        this.shippingFeeSellerDiscount = shippingFeeSellerDiscount;
        return this;
    }

    /**
     * Shipping fee discount provided by seller for an order that will not qualify for co-funded reimbursement. **Note**: If an order meets the minimum order value for co-funded reimbursement, this will be 0. In this case, refer to &#x60;shipping_fee_cofunded_discount&#x60; for the shipping discount the buyer received.
     *
     * @return shippingFeeSellerDiscount
     **/
    @javax.annotation.Nullable
    public String getShippingFeeSellerDiscount() {
        return shippingFeeSellerDiscount;
    }

    public void setShippingFeeSellerDiscount(String shippingFeeSellerDiscount) {
        this.shippingFeeSellerDiscount = shippingFeeSellerDiscount;
    }

    public GetOrderListResponseDataOrdersPayment shippingFeeTax(String shippingFeeTax) {
        this.shippingFeeTax = shippingFeeTax;
        return this;
    }

    /**
     * The tax on the shipping price.
     *
     * @return shippingFeeTax
     **/
    @javax.annotation.Nullable
    public String getShippingFeeTax() {
        return shippingFeeTax;
    }

    public void setShippingFeeTax(String shippingFeeTax) {
        this.shippingFeeTax = shippingFeeTax;
    }

    public GetOrderListResponseDataOrdersPayment shippingInsuranceFee(String shippingInsuranceFee) {
        this.shippingInsuranceFee = shippingInsuranceFee;
        return this;
    }

    /**
     * The cost incurred by the buyer for coverage against loss or damage to goods during transit.  **Note**: Only available in the Indonesia market.
     *
     * @return shippingInsuranceFee
     **/
    @javax.annotation.Nullable
    public String getShippingInsuranceFee() {
        return shippingInsuranceFee;
    }

    public void setShippingInsuranceFee(String shippingInsuranceFee) {
        this.shippingInsuranceFee = shippingInsuranceFee;
    }

    public GetOrderListResponseDataOrdersPayment smallOrderFee(String smallOrderFee) {
        this.smallOrderFee = smallOrderFee;
        return this;
    }

    /**
     * Small order fee for TH (**Thailand market only**).   Small order fee means that the platform will set a minimum order spending amount. When the order amount is lower than the minimum order spending amount, the user needs to pay a small order fee to meet the platform minimum spending amount.   e.g. Minimum order spending amount is 100, order amount is 80. So the small order fee will be 20.
     *
     * @return smallOrderFee
     **/
    @javax.annotation.Nullable
    public String getSmallOrderFee() {
        return smallOrderFee;
    }

    public void setSmallOrderFee(String smallOrderFee) {
        this.smallOrderFee = smallOrderFee;
    }

    public GetOrderListResponseDataOrdersPayment subTotal(String subTotal) {
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Buyer paid sub-total of all the SKUs in the order.  &#x60;sub_total &#x3D; original_total_product_price - seller_discount - platform_discount&#x60;  For the US market, this is pre-tax total amount.
     *
     * @return subTotal
     **/
    @javax.annotation.Nullable
    public String getSubTotal() {
        return subTotal;
    }

    public void setSubTotal(String subTotal) {
        this.subTotal = subTotal;
    }

    public GetOrderListResponseDataOrdersPayment tax(String tax) {
        this.tax = tax;
        return this;
    }

    /**
     * Buyer paid total taxes for the order. Applicable to both cross-border shops and the US market.
     *
     * @return tax
     **/
    @javax.annotation.Nullable
    public String getTax() {
        return tax;
    }

    public void setTax(String tax) {
        this.tax = tax;
    }

    public GetOrderListResponseDataOrdersPayment totalAmount(String totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Buyer paid total payment.  &#x60;total_amount &#x3D; sub_total + shipping_fee + taxes + retail_delivery_fee&#x60;
     *
     * @return totalAmount
     **/
    @javax.annotation.Nullable
    public String getTotalAmount() {
        return totalAmount;
    }

    public void setTotalAmount(String totalAmount) {
        this.totalAmount = totalAmount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOrderListResponseDataOrdersPayment order202309GetOrderListResponseDataOrdersPayment = (GetOrderListResponseDataOrdersPayment) o;
        return Objects.equals(this.buyerServiceFee, order202309GetOrderListResponseDataOrdersPayment.buyerServiceFee) &&
            Objects.equals(this.currency, order202309GetOrderListResponseDataOrdersPayment.currency) &&
            Objects.equals(this.handlingFee, order202309GetOrderListResponseDataOrdersPayment.handlingFee) &&
            Objects.equals(this.itemInsuranceFee, order202309GetOrderListResponseDataOrdersPayment.itemInsuranceFee) &&
            Objects.equals(this.originalShippingFee, order202309GetOrderListResponseDataOrdersPayment.originalShippingFee) &&
            Objects.equals(this.originalTotalProductPrice, order202309GetOrderListResponseDataOrdersPayment.originalTotalProductPrice) &&
            Objects.equals(this.platformDiscount, order202309GetOrderListResponseDataOrdersPayment.platformDiscount) &&
            Objects.equals(this.productTax, order202309GetOrderListResponseDataOrdersPayment.productTax) &&
            Objects.equals(this.retailDeliveryFee, order202309GetOrderListResponseDataOrdersPayment.retailDeliveryFee) &&
            Objects.equals(this.sellerDiscount, order202309GetOrderListResponseDataOrdersPayment.sellerDiscount) &&
            Objects.equals(this.shippingFee, order202309GetOrderListResponseDataOrdersPayment.shippingFee) &&
            Objects.equals(this.shippingFeeCofundedDiscount, order202309GetOrderListResponseDataOrdersPayment.shippingFeeCofundedDiscount) &&
            Objects.equals(this.shippingFeePlatformDiscount, order202309GetOrderListResponseDataOrdersPayment.shippingFeePlatformDiscount) &&
            Objects.equals(this.shippingFeeSellerDiscount, order202309GetOrderListResponseDataOrdersPayment.shippingFeeSellerDiscount) &&
            Objects.equals(this.shippingFeeTax, order202309GetOrderListResponseDataOrdersPayment.shippingFeeTax) &&
            Objects.equals(this.shippingInsuranceFee, order202309GetOrderListResponseDataOrdersPayment.shippingInsuranceFee) &&
            Objects.equals(this.smallOrderFee, order202309GetOrderListResponseDataOrdersPayment.smallOrderFee) &&
            Objects.equals(this.subTotal, order202309GetOrderListResponseDataOrdersPayment.subTotal) &&
            Objects.equals(this.tax, order202309GetOrderListResponseDataOrdersPayment.tax) &&
            Objects.equals(this.totalAmount, order202309GetOrderListResponseDataOrdersPayment.totalAmount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(buyerServiceFee, currency, handlingFee, itemInsuranceFee, originalShippingFee, originalTotalProductPrice, platformDiscount, productTax, retailDeliveryFee, sellerDiscount, shippingFee, shippingFeeCofundedDiscount, shippingFeePlatformDiscount, shippingFeeSellerDiscount, shippingFeeTax, shippingInsuranceFee, smallOrderFee, subTotal, tax, totalAmount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetOrderListResponseDataOrdersPayment {\n");
        sb.append("    buyerServiceFee: ").append(toIndentedString(buyerServiceFee)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    handlingFee: ").append(toIndentedString(handlingFee)).append("\n");
        sb.append("    itemInsuranceFee: ").append(toIndentedString(itemInsuranceFee)).append("\n");
        sb.append("    originalShippingFee: ").append(toIndentedString(originalShippingFee)).append("\n");
        sb.append("    originalTotalProductPrice: ").append(toIndentedString(originalTotalProductPrice)).append("\n");
        sb.append("    platformDiscount: ").append(toIndentedString(platformDiscount)).append("\n");
        sb.append("    productTax: ").append(toIndentedString(productTax)).append("\n");
        sb.append("    retailDeliveryFee: ").append(toIndentedString(retailDeliveryFee)).append("\n");
        sb.append("    sellerDiscount: ").append(toIndentedString(sellerDiscount)).append("\n");
        sb.append("    shippingFee: ").append(toIndentedString(shippingFee)).append("\n");
        sb.append("    shippingFeeCofundedDiscount: ").append(toIndentedString(shippingFeeCofundedDiscount)).append("\n");
        sb.append("    shippingFeePlatformDiscount: ").append(toIndentedString(shippingFeePlatformDiscount)).append("\n");
        sb.append("    shippingFeeSellerDiscount: ").append(toIndentedString(shippingFeeSellerDiscount)).append("\n");
        sb.append("    shippingFeeTax: ").append(toIndentedString(shippingFeeTax)).append("\n");
        sb.append("    shippingInsuranceFee: ").append(toIndentedString(shippingInsuranceFee)).append("\n");
        sb.append("    smallOrderFee: ").append(toIndentedString(smallOrderFee)).append("\n");
        sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
        sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
        sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of GetOrderListResponseDataOrdersPayment to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetOrderListResponseDataOrdersPayment.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetOrderListResponseDataOrdersPayment' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetOrderListResponseDataOrdersPayment> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(GetOrderListResponseDataOrdersPayment.class));

            return (TypeAdapter<T>) new TypeAdapter<GetOrderListResponseDataOrdersPayment>() {
                @Override
                public void write(JsonWriter out, GetOrderListResponseDataOrdersPayment value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetOrderListResponseDataOrdersPayment read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

