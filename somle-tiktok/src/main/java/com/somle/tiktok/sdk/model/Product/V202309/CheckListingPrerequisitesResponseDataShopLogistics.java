/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CheckListingPrerequisitesResponseDataShopLogistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckListingPrerequisitesResponseDataShopLogistics {
    public static final String SERIALIZED_NAME_DELIVERY_OPTION = "delivery_option";
    public static final String SERIALIZED_NAME_PICKUP_WAREHOUSE = "pickup_warehouse";
    public static final String SERIALIZED_NAME_RETURN_WAREHOUSE = "return_warehouse";
    public static final String SERIALIZED_NAME_SHIPPING_TEMPLATE = "shipping_template";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("delivery_option");
        openapiFields.add("pickup_warehouse");
        openapiFields.add("return_warehouse");
        openapiFields.add("shipping_template");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_DELIVERY_OPTION)
    private String deliveryOption;
    @SerializedName(SERIALIZED_NAME_PICKUP_WAREHOUSE)
    private String pickupWarehouse;
    @SerializedName(SERIALIZED_NAME_RETURN_WAREHOUSE)
    private String returnWarehouse;
    @SerializedName(SERIALIZED_NAME_SHIPPING_TEMPLATE)
    private String shippingTemplate;

    public CheckListingPrerequisitesResponseDataShopLogistics() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckListingPrerequisitesResponseDataShopLogistics
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckListingPrerequisitesResponseDataShopLogistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckListingPrerequisitesResponseDataShopLogistics is not found in the empty JSON string", CheckListingPrerequisitesResponseDataShopLogistics.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckListingPrerequisitesResponseDataShopLogistics.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckListingPrerequisitesResponseDataShopLogistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("delivery_option") != null && !jsonObj.get("delivery_option").isJsonNull()) && !jsonObj.get("delivery_option").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `delivery_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_option").toString()));
        }
        if ((jsonObj.get("pickup_warehouse") != null && !jsonObj.get("pickup_warehouse").isJsonNull()) && !jsonObj.get("pickup_warehouse").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `pickup_warehouse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_warehouse").toString()));
        }
        if ((jsonObj.get("return_warehouse") != null && !jsonObj.get("return_warehouse").isJsonNull()) && !jsonObj.get("return_warehouse").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `return_warehouse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_warehouse").toString()));
        }
        if ((jsonObj.get("shipping_template") != null && !jsonObj.get("shipping_template").isJsonNull()) && !jsonObj.get("shipping_template").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_template").toString()));
        }
    }

    /**
     * Create an instance of CheckListingPrerequisitesResponseDataShopLogistics given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckListingPrerequisitesResponseDataShopLogistics
     * @throws IOException if the JSON string is invalid with respect to CheckListingPrerequisitesResponseDataShopLogistics
     */
    public static CheckListingPrerequisitesResponseDataShopLogistics fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckListingPrerequisitesResponseDataShopLogistics.class);
    }

    public CheckListingPrerequisitesResponseDataShopLogistics deliveryOption(String deliveryOption) {
        this.deliveryOption = deliveryOption;
        return this;
    }

    /**
     * Shop logistics service. If the warehouse has no logistics services available, the warehouse cannot be used to create products.  Detailed explanation of JSON return results - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met, and the detailed failure reasons will be returned through the \&quot;fail_reasons\&quot; field.
     *
     * @return deliveryOption
     **/
    @javax.annotation.Nullable
    public String getDeliveryOption() {
        return deliveryOption;
    }

    public void setDeliveryOption(String deliveryOption) {
        this.deliveryOption = deliveryOption;
    }

    public CheckListingPrerequisitesResponseDataShopLogistics pickupWarehouse(String pickupWarehouse) {
        this.pickupWarehouse = pickupWarehouse;
        return this;
    }

    /**
     * Shop pickup warehouse, shops without pickup warehouse can not create products  Detailed explanation of JSON return results - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met
     *
     * @return pickupWarehouse
     **/
    @javax.annotation.Nullable
    public String getPickupWarehouse() {
        return pickupWarehouse;
    }

    public void setPickupWarehouse(String pickupWarehouse) {
        this.pickupWarehouse = pickupWarehouse;
    }

    public CheckListingPrerequisitesResponseDataShopLogistics returnWarehouse(String returnWarehouse) {
        this.returnWarehouse = returnWarehouse;
        return this;
    }

    /**
     * Listing Prerequisites check if the shop&#39;s return warehouse meets the listing requirements  Detailed explanation of JSON return results - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met, and the detailed failure reasons will be returned through the \&quot;fail_reasons\&quot; field.
     *
     * @return returnWarehouse
     **/
    @javax.annotation.Nullable
    public String getReturnWarehouse() {
        return returnWarehouse;
    }

    public void setReturnWarehouse(String returnWarehouse) {
        this.returnWarehouse = returnWarehouse;
    }

    public CheckListingPrerequisitesResponseDataShopLogistics shippingTemplate(String shippingTemplate) {
        this.shippingTemplate = shippingTemplate;
        return this;
    }

    /**
     * Listing Prerequisites check if the shop&#39;s shipping template meets the listing requirements. If sellers set TikTok Shipping, the SHIPPING_TEMPLATE will always return \&quot;is_failed:false\&quot;. Detailed explanation of JSON return results - \&quot;check_result\&quot; returns the result of the prerequisite check.  - If \&quot;is_failed\&quot; is true, it indicates that the requirements for listing have not been met
     *
     * @return shippingTemplate
     **/
    @javax.annotation.Nullable
    public String getShippingTemplate() {
        return shippingTemplate;
    }

    public void setShippingTemplate(String shippingTemplate) {
        this.shippingTemplate = shippingTemplate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckListingPrerequisitesResponseDataShopLogistics product202309CheckListingPrerequisitesResponseDataShopLogistics = (CheckListingPrerequisitesResponseDataShopLogistics) o;
        return Objects.equals(this.deliveryOption, product202309CheckListingPrerequisitesResponseDataShopLogistics.deliveryOption) &&
            Objects.equals(this.pickupWarehouse, product202309CheckListingPrerequisitesResponseDataShopLogistics.pickupWarehouse) &&
            Objects.equals(this.returnWarehouse, product202309CheckListingPrerequisitesResponseDataShopLogistics.returnWarehouse) &&
            Objects.equals(this.shippingTemplate, product202309CheckListingPrerequisitesResponseDataShopLogistics.shippingTemplate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(deliveryOption, pickupWarehouse, returnWarehouse, shippingTemplate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckListingPrerequisitesResponseDataShopLogistics {\n");
        sb.append("    deliveryOption: ").append(toIndentedString(deliveryOption)).append("\n");
        sb.append("    pickupWarehouse: ").append(toIndentedString(pickupWarehouse)).append("\n");
        sb.append("    returnWarehouse: ").append(toIndentedString(returnWarehouse)).append("\n");
        sb.append("    shippingTemplate: ").append(toIndentedString(shippingTemplate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckListingPrerequisitesResponseDataShopLogistics to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckListingPrerequisitesResponseDataShopLogistics.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckListingPrerequisitesResponseDataShopLogistics' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckListingPrerequisitesResponseDataShopLogistics> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckListingPrerequisitesResponseDataShopLogistics.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckListingPrerequisitesResponseDataShopLogistics>() {
                @Override
                public void write(JsonWriter out, CheckListingPrerequisitesResponseDataShopLogistics value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckListingPrerequisitesResponseDataShopLogistics read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

