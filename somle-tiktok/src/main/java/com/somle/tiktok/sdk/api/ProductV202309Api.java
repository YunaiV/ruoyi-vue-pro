/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.api;

import com.google.gson.reflect.TypeToken;
import com.somle.tiktok.sdk.invoke.*;
import com.somle.tiktok.sdk.model.Product.V202309.*;

import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductV202309Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductV202309Api() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductV202309Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for product202309BrandsGet
     *
     * @param pageSize        The number of results to be returned per page. Valid range: [1-100] (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryId      Specify a category ID to show the availability of **authorized brands** in the category. **Note**: Specify this value to obtain an accurate list of brands that you can use in a category. (optional)
     * @param isAuthorized    Filter results by the brand authorization status. Possible values: - 1: Returns only authorized brands - 0: Returns all brands (optional)
     * @param brandName       Filter results to include brand names that begin with the specified value. (optional)
     * @param pageToken       An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309BrandsGetCall(Integer pageSize, String xTtsAccessToken, String contentType, String categoryId, Boolean isAuthorized, String brandName, String pageToken, String categoryVersion, String shopCipher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (isAuthorized != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_authorized", isAuthorized));
        }

        if (brandName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brand_name", brandName));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309BrandsGetValidateBeforeCall(Integer pageSize, String xTtsAccessToken, String contentType, String categoryId, Boolean isAuthorized, String brandName, String pageToken, String categoryVersion, String shopCipher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling product202309BrandsGet(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309BrandsGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309BrandsGet(Async)");
        }

        return product202309BrandsGetCall(pageSize, xTtsAccessToken, contentType, categoryId, isAuthorized, brandName, pageToken, categoryVersion, shopCipher, _callback);

    }

    /**
     * GetBrands
     * Retrieve all available brands for your shop, including the built-in brands and any custom brands created using the [Create Custom Brands API](650a0926f1fd3102b91bbfb0). Pass the returned brand ID when creating or editing a product to associate the brand with the product. - To check if a brand is fully authorized for use in a specific product category, specify the **category ID**. - To obtain the full list of brands that your shop can potentially use and their authorization status, omit the category ID. We recommend that you specify the **brand name** to narrow down the list of brands returned. **Key concept** Whether you can select and display a brand depends on the brand&#39;s authorization status, the categories authorized for the brand, and whether the brand is classified as T1 (internationally renowned brands that require prior brand authorization). **- Brand selection rules**: You can only select the following types of brands during product creation/editing.    - Authorized brands which contain the desired category (&#x60;authorized_status&#x3D;AUTHORIZED&#x60; and &#x60;brand_status&#x3D;AVAILABLE&#x60;)    - Unauthorized non-T1 brands (&#x60;authorized_status&#x3D;UNAUTHORIZED&#x60; and &#x60;is_t1_brand&#x3D;false&#x60;)  **- Brand display rules**: Note however that brands will only appear on the product display page if the brand is authorized (&#x60;authorized_status&#x3D;AUTHORIZED&#x60;) and available in the desired category (&#x60;brand_status&#x3D;AVAILABLE&#x60;). This means that you need to obtain brand authorization for unauthorized non-T1 brands before they can be displayed. Obtain brand authorization or add categories to an authorized brand through TikTok Shop Seller Center &gt; Qualification Center &gt; Brand qualification. **For Tokopedia sellers**: You can select and display any returned brand on Tokopedia regardless of these rules.
     *
     * @param pageSize        The number of results to be returned per page. Valid range: [1-100] (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryId      Specify a category ID to show the availability of **authorized brands** in the category. **Note**: Specify this value to obtain an accurate list of brands that you can use in a category. (optional)
     * @param isAuthorized    Filter results by the brand authorization status. Possible values: - 1: Returns only authorized brands - 0: Returns all brands (optional)
     * @param brandName       Filter results to include brand names that begin with the specified value. (optional)
     * @param pageToken       An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @return GetBrandsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetBrandsResponse product202309BrandsGet(Integer pageSize, String xTtsAccessToken, String contentType, String categoryId, Boolean isAuthorized, String brandName, String pageToken, String categoryVersion, String shopCipher) throws ApiException {
        ApiResponse<GetBrandsResponse> localVarResp = product202309BrandsGetWithHttpInfo(pageSize, xTtsAccessToken, contentType, categoryId, isAuthorized, brandName, pageToken, categoryVersion, shopCipher);
        return localVarResp.getData();
    }

    /**
     * GetBrands
     * Retrieve all available brands for your shop, including the built-in brands and any custom brands created using the [Create Custom Brands API](650a0926f1fd3102b91bbfb0). Pass the returned brand ID when creating or editing a product to associate the brand with the product. - To check if a brand is fully authorized for use in a specific product category, specify the **category ID**. - To obtain the full list of brands that your shop can potentially use and their authorization status, omit the category ID. We recommend that you specify the **brand name** to narrow down the list of brands returned. **Key concept** Whether you can select and display a brand depends on the brand&#39;s authorization status, the categories authorized for the brand, and whether the brand is classified as T1 (internationally renowned brands that require prior brand authorization). **- Brand selection rules**: You can only select the following types of brands during product creation/editing.    - Authorized brands which contain the desired category (&#x60;authorized_status&#x3D;AUTHORIZED&#x60; and &#x60;brand_status&#x3D;AVAILABLE&#x60;)    - Unauthorized non-T1 brands (&#x60;authorized_status&#x3D;UNAUTHORIZED&#x60; and &#x60;is_t1_brand&#x3D;false&#x60;)  **- Brand display rules**: Note however that brands will only appear on the product display page if the brand is authorized (&#x60;authorized_status&#x3D;AUTHORIZED&#x60;) and available in the desired category (&#x60;brand_status&#x3D;AVAILABLE&#x60;). This means that you need to obtain brand authorization for unauthorized non-T1 brands before they can be displayed. Obtain brand authorization or add categories to an authorized brand through TikTok Shop Seller Center &gt; Qualification Center &gt; Brand qualification. **For Tokopedia sellers**: You can select and display any returned brand on Tokopedia regardless of these rules.
     *
     * @param pageSize        The number of results to be returned per page. Valid range: [1-100] (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryId      Specify a category ID to show the availability of **authorized brands** in the category. **Note**: Specify this value to obtain an accurate list of brands that you can use in a category. (optional)
     * @param isAuthorized    Filter results by the brand authorization status. Possible values: - 1: Returns only authorized brands - 0: Returns all brands (optional)
     * @param brandName       Filter results to include brand names that begin with the specified value. (optional)
     * @param pageToken       An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @return ApiResponse&lt;GetBrandsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetBrandsResponse> product202309BrandsGetWithHttpInfo(Integer pageSize, String xTtsAccessToken, String contentType, String categoryId, Boolean isAuthorized, String brandName, String pageToken, String categoryVersion, String shopCipher) throws ApiException {
        okhttp3.Call localVarCall = product202309BrandsGetValidateBeforeCall(pageSize, xTtsAccessToken, contentType, categoryId, isAuthorized, brandName, pageToken, categoryVersion, shopCipher, null);
        Type localVarReturnType = new TypeToken<GetBrandsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetBrands (asynchronously)
     * Retrieve all available brands for your shop, including the built-in brands and any custom brands created using the [Create Custom Brands API](650a0926f1fd3102b91bbfb0). Pass the returned brand ID when creating or editing a product to associate the brand with the product. - To check if a brand is fully authorized for use in a specific product category, specify the **category ID**. - To obtain the full list of brands that your shop can potentially use and their authorization status, omit the category ID. We recommend that you specify the **brand name** to narrow down the list of brands returned. **Key concept** Whether you can select and display a brand depends on the brand&#39;s authorization status, the categories authorized for the brand, and whether the brand is classified as T1 (internationally renowned brands that require prior brand authorization). **- Brand selection rules**: You can only select the following types of brands during product creation/editing.    - Authorized brands which contain the desired category (&#x60;authorized_status&#x3D;AUTHORIZED&#x60; and &#x60;brand_status&#x3D;AVAILABLE&#x60;)    - Unauthorized non-T1 brands (&#x60;authorized_status&#x3D;UNAUTHORIZED&#x60; and &#x60;is_t1_brand&#x3D;false&#x60;)  **- Brand display rules**: Note however that brands will only appear on the product display page if the brand is authorized (&#x60;authorized_status&#x3D;AUTHORIZED&#x60;) and available in the desired category (&#x60;brand_status&#x3D;AVAILABLE&#x60;). This means that you need to obtain brand authorization for unauthorized non-T1 brands before they can be displayed. Obtain brand authorization or add categories to an authorized brand through TikTok Shop Seller Center &gt; Qualification Center &gt; Brand qualification. **For Tokopedia sellers**: You can select and display any returned brand on Tokopedia regardless of these rules.
     *
     * @param pageSize        The number of results to be returned per page. Valid range: [1-100] (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryId      Specify a category ID to show the availability of **authorized brands** in the category. **Note**: Specify this value to obtain an accurate list of brands that you can use in a category. (optional)
     * @param isAuthorized    Filter results by the brand authorization status. Possible values: - 1: Returns only authorized brands - 0: Returns all brands (optional)
     * @param brandName       Filter results to include brand names that begin with the specified value. (optional)
     * @param pageToken       An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309BrandsGetAsync(Integer pageSize, String xTtsAccessToken, String contentType, String categoryId, Boolean isAuthorized, String brandName, String pageToken, String categoryVersion, String shopCipher, final ApiCallback<GetBrandsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309BrandsGetValidateBeforeCall(pageSize, xTtsAccessToken, contentType, categoryId, isAuthorized, brandName, pageToken, categoryVersion, shopCipher, _callback);
        Type localVarReturnType = new TypeToken<GetBrandsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309BrandsPost
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param product202309CreateCustomBrandsRequestBody (optional)
     * @param _callback                                  Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309BrandsPostCall(String xTtsAccessToken, String contentType, CreateCustomBrandsRequestBody product202309CreateCustomBrandsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309CreateCustomBrandsRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309BrandsPostValidateBeforeCall(String xTtsAccessToken, String contentType, CreateCustomBrandsRequestBody product202309CreateCustomBrandsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309BrandsPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309BrandsPost(Async)");
        }

        return product202309BrandsPostCall(xTtsAccessToken, contentType, product202309CreateCustomBrandsRequestBody, _callback);

    }

    /**
     * CreateCustomBrands
     * Create custom brands for your own use across all markets. Authorization is not required when creating a brand. You can create the brand first and obtain brand authorization later through the Qualification Center in TikTok Shop Seller Center. **Note**: You can create up to 50 brands per day, with a total limit of 1,000 brands.
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param product202309CreateCustomBrandsRequestBody (optional)
     * @return CreateCustomBrandsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public CreateCustomBrandsResponse product202309BrandsPost(String xTtsAccessToken, String contentType, CreateCustomBrandsRequestBody product202309CreateCustomBrandsRequestBody) throws ApiException {
        ApiResponse<CreateCustomBrandsResponse> localVarResp = product202309BrandsPostWithHttpInfo(xTtsAccessToken, contentType, product202309CreateCustomBrandsRequestBody);
        return localVarResp.getData();
    }

    /**
     * CreateCustomBrands
     * Create custom brands for your own use across all markets. Authorization is not required when creating a brand. You can create the brand first and obtain brand authorization later through the Qualification Center in TikTok Shop Seller Center. **Note**: You can create up to 50 brands per day, with a total limit of 1,000 brands.
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param product202309CreateCustomBrandsRequestBody (optional)
     * @return ApiResponse&lt;CreateCustomBrandsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateCustomBrandsResponse> product202309BrandsPostWithHttpInfo(String xTtsAccessToken, String contentType, CreateCustomBrandsRequestBody product202309CreateCustomBrandsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309BrandsPostValidateBeforeCall(xTtsAccessToken, contentType, product202309CreateCustomBrandsRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateCustomBrandsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateCustomBrands (asynchronously)
     * Create custom brands for your own use across all markets. Authorization is not required when creating a brand. You can create the brand first and obtain brand authorization later through the Qualification Center in TikTok Shop Seller Center. **Note**: You can create up to 50 brands per day, with a total limit of 1,000 brands.
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param product202309CreateCustomBrandsRequestBody (optional)
     * @param _callback                                  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309BrandsPostAsync(String xTtsAccessToken, String contentType, CreateCustomBrandsRequestBody product202309CreateCustomBrandsRequestBody, final ApiCallback<CreateCustomBrandsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309BrandsPostValidateBeforeCall(xTtsAccessToken, contentType, product202309CreateCustomBrandsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateCustomBrandsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309CategoriesCategoryIdAttributesGet
     *
     * @param categoryId      The ID of the category of this product. It must be a leaf category. (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdAttributesGetCall(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, String shopCipher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/categories/{category_id}/attributes"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309CategoriesCategoryIdAttributesGetValidateBeforeCall(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, String shopCipher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling product202309CategoriesCategoryIdAttributesGet(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309CategoriesCategoryIdAttributesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309CategoriesCategoryIdAttributesGet(Async)");
        }

        return product202309CategoriesCategoryIdAttributesGetCall(categoryId, xTtsAccessToken, contentType, locale, categoryVersion, shopCipher, _callback);

    }

    /**
     * GetAttributes
     * Retrieve the standard built-in product and sales attributes for listing a product in a particular category based on your shop&#39;s location. Products on TikTok Shop are grouped into categories predefined by TikTok Shop, and each category is associated with a standard set of product attributes and sales attributes. - **Sales attributes** (e.g. size, color, length) define product variants and are optional if your product is straightforward and has no variants. - **Product attributes** (e.g. manufacturer, country of origin, materials used) describe the product as a whole, regardless of variant. Some product attributes are mandatory based on listing policies. Use this API to determine the mandatory and optional attributes before listing a product. **Note**: It must be a [leaf category](6509c89d0fcef602bf1acd9b) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category of this product. It must be a leaf category. (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @return GetAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetAttributesResponse product202309CategoriesCategoryIdAttributesGet(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, String shopCipher) throws ApiException {
        ApiResponse<GetAttributesResponse> localVarResp = product202309CategoriesCategoryIdAttributesGetWithHttpInfo(categoryId, xTtsAccessToken, contentType, locale, categoryVersion, shopCipher);
        return localVarResp.getData();
    }

    /**
     * GetAttributes
     * Retrieve the standard built-in product and sales attributes for listing a product in a particular category based on your shop&#39;s location. Products on TikTok Shop are grouped into categories predefined by TikTok Shop, and each category is associated with a standard set of product attributes and sales attributes. - **Sales attributes** (e.g. size, color, length) define product variants and are optional if your product is straightforward and has no variants. - **Product attributes** (e.g. manufacturer, country of origin, materials used) describe the product as a whole, regardless of variant. Some product attributes are mandatory based on listing policies. Use this API to determine the mandatory and optional attributes before listing a product. **Note**: It must be a [leaf category](6509c89d0fcef602bf1acd9b) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category of this product. It must be a leaf category. (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @return ApiResponse&lt;GetAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetAttributesResponse> product202309CategoriesCategoryIdAttributesGetWithHttpInfo(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, String shopCipher) throws ApiException {
        okhttp3.Call localVarCall = product202309CategoriesCategoryIdAttributesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, locale, categoryVersion, shopCipher, null);
        Type localVarReturnType = new TypeToken<GetAttributesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetAttributes (asynchronously)
     * Retrieve the standard built-in product and sales attributes for listing a product in a particular category based on your shop&#39;s location. Products on TikTok Shop are grouped into categories predefined by TikTok Shop, and each category is associated with a standard set of product attributes and sales attributes. - **Sales attributes** (e.g. size, color, length) define product variants and are optional if your product is straightforward and has no variants. - **Product attributes** (e.g. manufacturer, country of origin, materials used) describe the product as a whole, regardless of variant. Some product attributes are mandatory based on listing policies. Use this API to determine the mandatory and optional attributes before listing a product. **Note**: It must be a [leaf category](6509c89d0fcef602bf1acd9b) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category of this product. It must be a leaf category. (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param shopCipher      (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdAttributesGetAsync(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, String shopCipher, final ApiCallback<GetAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309CategoriesCategoryIdAttributesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, locale, categoryVersion, shopCipher, _callback);
        Type localVarReturnType = new TypeToken<GetAttributesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309CategoriesCategoryIdGlobalAttributesGet
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdGlobalAttributesGetCall(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/categories/{category_id}/global_attributes"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309CategoriesCategoryIdGlobalAttributesGetValidateBeforeCall(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling product202309CategoriesCategoryIdGlobalAttributesGet(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309CategoriesCategoryIdGlobalAttributesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309CategoriesCategoryIdGlobalAttributesGet(Async)");
        }

        return product202309CategoriesCategoryIdGlobalAttributesGetCall(categoryId, xTtsAccessToken, contentType, locale, categoryVersion, _callback);

    }

    /**
     * GetGlobalAttributes
     * Retrieve the standard built-in product and sales attributes for listing a global product in a particular category, regardless of market variations. Products on TikTok Shop are grouped into categories predefined by TikTok Shop, and each category is associated with a standard set of product attributes and sales attributes. - **Sales attributes** (e.g. size, color, length) define product variants and are optional if your product is straightforward and has no variants. - **Product attributes** (e.g. manufacturer, country of origin, materials used) describe the product as a whole, regardless of variant. Some product attributes are mandatory based on listing policies. Use this API to determine the mandatory and optional attributes before listing a global product. **Note**: It must be a [leaf category](650a03f8f1fd3102b91b338a) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @return GetGlobalAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetGlobalAttributesResponse product202309CategoriesCategoryIdGlobalAttributesGet(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion) throws ApiException {
        ApiResponse<GetGlobalAttributesResponse> localVarResp = product202309CategoriesCategoryIdGlobalAttributesGetWithHttpInfo(categoryId, xTtsAccessToken, contentType, locale, categoryVersion);
        return localVarResp.getData();
    }

    /**
     * GetGlobalAttributes
     * Retrieve the standard built-in product and sales attributes for listing a global product in a particular category, regardless of market variations. Products on TikTok Shop are grouped into categories predefined by TikTok Shop, and each category is associated with a standard set of product attributes and sales attributes. - **Sales attributes** (e.g. size, color, length) define product variants and are optional if your product is straightforward and has no variants. - **Product attributes** (e.g. manufacturer, country of origin, materials used) describe the product as a whole, regardless of variant. Some product attributes are mandatory based on listing policies. Use this API to determine the mandatory and optional attributes before listing a global product. **Note**: It must be a [leaf category](650a03f8f1fd3102b91b338a) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @return ApiResponse&lt;GetGlobalAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetGlobalAttributesResponse> product202309CategoriesCategoryIdGlobalAttributesGetWithHttpInfo(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion) throws ApiException {
        okhttp3.Call localVarCall = product202309CategoriesCategoryIdGlobalAttributesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, locale, categoryVersion, null);
        Type localVarReturnType = new TypeToken<GetGlobalAttributesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetGlobalAttributes (asynchronously)
     * Retrieve the standard built-in product and sales attributes for listing a global product in a particular category, regardless of market variations. Products on TikTok Shop are grouped into categories predefined by TikTok Shop, and each category is associated with a standard set of product attributes and sales attributes. - **Sales attributes** (e.g. size, color, length) define product variants and are optional if your product is straightforward and has no variants. - **Product attributes** (e.g. manufacturer, country of origin, materials used) describe the product as a whole, regardless of variant. Some product attributes are mandatory based on listing policies. Use this API to determine the mandatory and optional attributes before listing a global product. **Note**: It must be a [leaf category](650a03f8f1fd3102b91b338a) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying the attribute information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdGlobalAttributesGetAsync(String categoryId, String xTtsAccessToken, String contentType, String locale, String categoryVersion, final ApiCallback<GetGlobalAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309CategoriesCategoryIdGlobalAttributesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, locale, categoryVersion, _callback);
        Type localVarReturnType = new TypeToken<GetGlobalAttributesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309CategoriesCategoryIdGlobalRulesGet
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdGlobalRulesGetCall(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/categories/{category_id}/global_rules"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309CategoriesCategoryIdGlobalRulesGetValidateBeforeCall(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling product202309CategoriesCategoryIdGlobalRulesGet(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309CategoriesCategoryIdGlobalRulesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309CategoriesCategoryIdGlobalRulesGet(Async)");
        }

        return product202309CategoriesCategoryIdGlobalRulesGetCall(categoryId, xTtsAccessToken, contentType, categoryVersion, locale, _callback);

    }

    /**
     * GetGlobalCategoryRules
     * Retrieve the additional requirements (beyond mandatory product attributes) for listing a global product in a particular category, regardless of market variations. Requirements may include product certifications, size charts, dimensions and more. Use this API to determine the supporting information that you must prepare before listing a global product. **Note**: It must be a [leaf category](650a03f8f1fd3102b91b338a) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @return GetGlobalCategoryRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetGlobalCategoryRulesResponse product202309CategoriesCategoryIdGlobalRulesGet(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale) throws ApiException {
        ApiResponse<GetGlobalCategoryRulesResponse> localVarResp = product202309CategoriesCategoryIdGlobalRulesGetWithHttpInfo(categoryId, xTtsAccessToken, contentType, categoryVersion, locale);
        return localVarResp.getData();
    }

    /**
     * GetGlobalCategoryRules
     * Retrieve the additional requirements (beyond mandatory product attributes) for listing a global product in a particular category, regardless of market variations. Requirements may include product certifications, size charts, dimensions and more. Use this API to determine the supporting information that you must prepare before listing a global product. **Note**: It must be a [leaf category](650a03f8f1fd3102b91b338a) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @return ApiResponse&lt;GetGlobalCategoryRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetGlobalCategoryRulesResponse> product202309CategoriesCategoryIdGlobalRulesGetWithHttpInfo(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale) throws ApiException {
        okhttp3.Call localVarCall = product202309CategoriesCategoryIdGlobalRulesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, categoryVersion, locale, null);
        Type localVarReturnType = new TypeToken<GetGlobalCategoryRulesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetGlobalCategoryRules (asynchronously)
     * Retrieve the additional requirements (beyond mandatory product attributes) for listing a global product in a particular category, regardless of market variations. Requirements may include product certifications, size charts, dimensions and more. Use this API to determine the supporting information that you must prepare before listing a global product. **Note**: It must be a [leaf category](650a03f8f1fd3102b91b338a) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdGlobalRulesGetAsync(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, final ApiCallback<GetGlobalCategoryRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309CategoriesCategoryIdGlobalRulesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, categoryVersion, locale, _callback);
        Type localVarReturnType = new TypeToken<GetGlobalCategoryRulesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309CategoriesCategoryIdRulesGet
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - de-DE - en-GB - en-IE - en-US - es-ES - es-MX - fr-FR - id-ID - it-IT - ja-JP - ms-MY - pt-BR - th-TH - vi-VN - zh-CN (optional)
     * @param shopCipher      (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdRulesGetCall(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, String shopCipher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/categories/{category_id}/rules"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309CategoriesCategoryIdRulesGetValidateBeforeCall(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, String shopCipher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling product202309CategoriesCategoryIdRulesGet(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309CategoriesCategoryIdRulesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309CategoriesCategoryIdRulesGet(Async)");
        }

        return product202309CategoriesCategoryIdRulesGetCall(categoryId, xTtsAccessToken, contentType, categoryVersion, locale, shopCipher, _callback);

    }

    /**
     * GetCategoryRules
     * Retrieve the additional requirements (beyond mandatory product attributes) for listing a product in a particular category based on your shop&#39;s location. Requirements may include product certifications, size charts, dimensions and more. Use this API to determine the supporting information that you must prepare before listing a product. **Note**: It must be a [leaf category](6509c89d0fcef602bf1acd9b) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - de-DE - en-GB - en-IE - en-US - es-ES - es-MX - fr-FR - id-ID - it-IT - ja-JP - ms-MY - pt-BR - th-TH - vi-VN - zh-CN (optional)
     * @param shopCipher      (optional)
     * @return GetCategoryRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetCategoryRulesResponse product202309CategoriesCategoryIdRulesGet(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, String shopCipher) throws ApiException {
        ApiResponse<GetCategoryRulesResponse> localVarResp = product202309CategoriesCategoryIdRulesGetWithHttpInfo(categoryId, xTtsAccessToken, contentType, categoryVersion, locale, shopCipher);
        return localVarResp.getData();
    }

    /**
     * GetCategoryRules
     * Retrieve the additional requirements (beyond mandatory product attributes) for listing a product in a particular category based on your shop&#39;s location. Requirements may include product certifications, size charts, dimensions and more. Use this API to determine the supporting information that you must prepare before listing a product. **Note**: It must be a [leaf category](6509c89d0fcef602bf1acd9b) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - de-DE - en-GB - en-IE - en-US - es-ES - es-MX - fr-FR - id-ID - it-IT - ja-JP - ms-MY - pt-BR - th-TH - vi-VN - zh-CN (optional)
     * @param shopCipher      (optional)
     * @return ApiResponse&lt;GetCategoryRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetCategoryRulesResponse> product202309CategoriesCategoryIdRulesGetWithHttpInfo(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, String shopCipher) throws ApiException {
        okhttp3.Call localVarCall = product202309CategoriesCategoryIdRulesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, categoryVersion, locale, shopCipher, null);
        Type localVarReturnType = new TypeToken<GetCategoryRulesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetCategoryRules (asynchronously)
     * Retrieve the additional requirements (beyond mandatory product attributes) for listing a product in a particular category based on your shop&#39;s location. Requirements may include product certifications, size charts, dimensions and more. Use this API to determine the supporting information that you must prepare before listing a product. **Note**: It must be a [leaf category](6509c89d0fcef602bf1acd9b) that corresponds to the category tree type specified in the &#x60;category_version&#x60; property.
     *
     * @param categoryId      The ID of the category. It must be a leaf category.  (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param categoryVersion The category tree version that corresponds to the specified &#x60;category_id&#x60;. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - de-DE - en-GB - en-IE - en-US - es-ES - es-MX - fr-FR - id-ID - it-IT - ja-JP - ms-MY - pt-BR - th-TH - vi-VN - zh-CN (optional)
     * @param shopCipher      (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesCategoryIdRulesGetAsync(String categoryId, String xTtsAccessToken, String contentType, String categoryVersion, String locale, String shopCipher, final ApiCallback<GetCategoryRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309CategoriesCategoryIdRulesGetValidateBeforeCall(categoryId, xTtsAccessToken, contentType, categoryVersion, locale, shopCipher, _callback);
        Type localVarReturnType = new TypeToken<GetCategoryRulesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309CategoriesGet
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param listingPlatform Filter categories by the specified platform. Possible values: - TIKTOK_SHOP - TOKOPEDIA Default: TIKTOK_SHOP  Applicable only for sellers that migrated from Tokopedia. (optional)
     * @param shopCipher      (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesGetCall(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, String listingPlatform, String shopCipher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (listingPlatform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_platform", listingPlatform));
        }

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309CategoriesGetValidateBeforeCall(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, String listingPlatform, String shopCipher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309CategoriesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309CategoriesGet(Async)");
        }

        return product202309CategoriesGetCall(xTtsAccessToken, contentType, locale, keyword, categoryVersion, listingPlatform, shopCipher, _callback);

    }

    /**
     * GetCategories
     * Retrieve the list of product categories available for your shop. Product categories are updated frequently, so it&#39;s recommended to call the API in real time to ensure you are using the latest category data. Caching category data locally may result in using outdated information, leading to errors when creating products. **For the Indonesia market**: To list a product on both TikTok Shop and Tokopedia, you must use only categories that are available on both platforms. Please call this API twice to identify the overlapping categories.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param listingPlatform Filter categories by the specified platform. Possible values: - TIKTOK_SHOP - TOKOPEDIA Default: TIKTOK_SHOP  Applicable only for sellers that migrated from Tokopedia. (optional)
     * @param shopCipher      (optional)
     * @return GetCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetCategoriesResponse product202309CategoriesGet(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, String listingPlatform, String shopCipher) throws ApiException {
        ApiResponse<GetCategoriesResponse> localVarResp = product202309CategoriesGetWithHttpInfo(xTtsAccessToken, contentType, locale, keyword, categoryVersion, listingPlatform, shopCipher);
        return localVarResp.getData();
    }

    /**
     * GetCategories
     * Retrieve the list of product categories available for your shop. Product categories are updated frequently, so it&#39;s recommended to call the API in real time to ensure you are using the latest category data. Caching category data locally may result in using outdated information, leading to errors when creating products. **For the Indonesia market**: To list a product on both TikTok Shop and Tokopedia, you must use only categories that are available on both platforms. Please call this API twice to identify the overlapping categories.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param listingPlatform Filter categories by the specified platform. Possible values: - TIKTOK_SHOP - TOKOPEDIA Default: TIKTOK_SHOP  Applicable only for sellers that migrated from Tokopedia. (optional)
     * @param shopCipher      (optional)
     * @return ApiResponse&lt;GetCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetCategoriesResponse> product202309CategoriesGetWithHttpInfo(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, String listingPlatform, String shopCipher) throws ApiException {
        okhttp3.Call localVarCall = product202309CategoriesGetValidateBeforeCall(xTtsAccessToken, contentType, locale, keyword, categoryVersion, listingPlatform, shopCipher, null);
        Type localVarReturnType = new TypeToken<GetCategoriesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetCategories (asynchronously)
     * Retrieve the list of product categories available for your shop. Product categories are updated frequently, so it&#39;s recommended to call the API in real time to ensure you are using the latest category data. Caching category data locally may result in using outdated information, leading to errors when creating products. **For the Indonesia market**: To list a product on both TikTok Shop and Tokopedia, you must use only categories that are available on both platforms. Please call this API twice to identify the overlapping categories.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information. Default: The default locale of your shop. Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;pt-BR&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: For US shops, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param listingPlatform Filter categories by the specified platform. Possible values: - TIKTOK_SHOP - TOKOPEDIA Default: TIKTOK_SHOP  Applicable only for sellers that migrated from Tokopedia. (optional)
     * @param shopCipher      (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesGetAsync(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, String listingPlatform, String shopCipher, final ApiCallback<GetCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309CategoriesGetValidateBeforeCall(xTtsAccessToken, contentType, locale, keyword, categoryVersion, listingPlatform, shopCipher, _callback);
        Type localVarReturnType = new TypeToken<GetCategoriesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309CategoriesRecommendPost
     *
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param shopCipher                                (optional)
     * @param product202309RecommendCategoryRequestBody (optional)
     * @param _callback                                 Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesRecommendPostCall(String xTtsAccessToken, String contentType, String shopCipher, RecommendCategoryRequestBody product202309RecommendCategoryRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309RecommendCategoryRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/categories/recommend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309CategoriesRecommendPostValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, RecommendCategoryRequestBody product202309RecommendCategoryRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309CategoriesRecommendPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309CategoriesRecommendPost(Async)");
        }

        return product202309CategoriesRecommendPostCall(xTtsAccessToken, contentType, shopCipher, product202309RecommendCategoryRequestBody, _callback);

    }

    /**
     * RecommendCategory
     * Retrieve the recommended category for a candidate product based on its title, description, and images. If you are syncing product catalogs from an external system to TikTok Shop, use this API to facilitate product categorization. **Note**: The language used in text fields such as descriptions and titles must align with the target market&#39;s language (e.g. don&#39;t use Chinese).
     *
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param shopCipher                                (optional)
     * @param product202309RecommendCategoryRequestBody (optional)
     * @return RecommendCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public RecommendCategoryResponse product202309CategoriesRecommendPost(String xTtsAccessToken, String contentType, String shopCipher, RecommendCategoryRequestBody product202309RecommendCategoryRequestBody) throws ApiException {
        ApiResponse<RecommendCategoryResponse> localVarResp = product202309CategoriesRecommendPostWithHttpInfo(xTtsAccessToken, contentType, shopCipher, product202309RecommendCategoryRequestBody);
        return localVarResp.getData();
    }

    /**
     * RecommendCategory
     * Retrieve the recommended category for a candidate product based on its title, description, and images. If you are syncing product catalogs from an external system to TikTok Shop, use this API to facilitate product categorization. **Note**: The language used in text fields such as descriptions and titles must align with the target market&#39;s language (e.g. don&#39;t use Chinese).
     *
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param shopCipher                                (optional)
     * @param product202309RecommendCategoryRequestBody (optional)
     * @return ApiResponse&lt;RecommendCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RecommendCategoryResponse> product202309CategoriesRecommendPostWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher, RecommendCategoryRequestBody product202309RecommendCategoryRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309CategoriesRecommendPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309RecommendCategoryRequestBody, null);
        Type localVarReturnType = new TypeToken<RecommendCategoryResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RecommendCategory (asynchronously)
     * Retrieve the recommended category for a candidate product based on its title, description, and images. If you are syncing product catalogs from an external system to TikTok Shop, use this API to facilitate product categorization. **Note**: The language used in text fields such as descriptions and titles must align with the target market&#39;s language (e.g. don&#39;t use Chinese).
     *
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param shopCipher                                (optional)
     * @param product202309RecommendCategoryRequestBody (optional)
     * @param _callback                                 The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309CategoriesRecommendPostAsync(String xTtsAccessToken, String contentType, String shopCipher, RecommendCategoryRequestBody product202309RecommendCategoryRequestBody, final ApiCallback<RecommendCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309CategoriesRecommendPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309RecommendCategoryRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RecommendCategoryResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309FilesUploadPost
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local file to be uploaded.  **Note**： - Supported formats: PDF, MP4, MOV, MKV, WMV, WEBM, AVI, 3GP, FLV, MPEG - Max file size: 10MB - Video aspect ratio: 9:16 to 16:9  **Recommendations for product videos**: - Aspect ratio: 1:1  - Resolution: HD 720p or higher - Duration: 20 - 60 seconds  (optional)
     * @param name            The name of the file, including the file extension (e.g. &#x60;certification.pdf&#x60;)  **Note**: - Do not use additional periods, except the one preceding the file extension. - Do not begin the name with symbols. - Do not include spaces. (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309FilesUploadPostCall(String xTtsAccessToken, String contentType, File data, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/files/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309FilesUploadPostValidateBeforeCall(String xTtsAccessToken, String contentType, File data, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309FilesUploadPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309FilesUploadPost(Async)");
        }

        return product202309FilesUploadPostCall(xTtsAccessToken, contentType, data, name, _callback);

    }

    /**
     * UploadProductFile
     * Upload non-image files, such as PDF or video to TikTok Shop.  Use this API when you need to add videos to your product to improve the shopping experience, or submit certifications or reports to meet TikTok Shop requirements for listing restricted products.  **Note**: You must store the response body to retrieve the ID or URL required to associate the file with a product during product creation or editing.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local file to be uploaded.  **Note**： - Supported formats: PDF, MP4, MOV, MKV, WMV, WEBM, AVI, 3GP, FLV, MPEG - Max file size: 10MB - Video aspect ratio: 9:16 to 16:9  **Recommendations for product videos**: - Aspect ratio: 1:1  - Resolution: HD 720p or higher - Duration: 20 - 60 seconds  (optional)
     * @param name            The name of the file, including the file extension (e.g. &#x60;certification.pdf&#x60;)  **Note**: - Do not use additional periods, except the one preceding the file extension. - Do not begin the name with symbols. - Do not include spaces. (optional)
     * @return UploadProductFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public UploadProductFileResponse product202309FilesUploadPost(String xTtsAccessToken, String contentType, File data, String name) throws ApiException {
        ApiResponse<UploadProductFileResponse> localVarResp = product202309FilesUploadPostWithHttpInfo(xTtsAccessToken, contentType, data, name);
        return localVarResp.getData();
    }

    /**
     * UploadProductFile
     * Upload non-image files, such as PDF or video to TikTok Shop.  Use this API when you need to add videos to your product to improve the shopping experience, or submit certifications or reports to meet TikTok Shop requirements for listing restricted products.  **Note**: You must store the response body to retrieve the ID or URL required to associate the file with a product during product creation or editing.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local file to be uploaded.  **Note**： - Supported formats: PDF, MP4, MOV, MKV, WMV, WEBM, AVI, 3GP, FLV, MPEG - Max file size: 10MB - Video aspect ratio: 9:16 to 16:9  **Recommendations for product videos**: - Aspect ratio: 1:1  - Resolution: HD 720p or higher - Duration: 20 - 60 seconds  (optional)
     * @param name            The name of the file, including the file extension (e.g. &#x60;certification.pdf&#x60;)  **Note**: - Do not use additional periods, except the one preceding the file extension. - Do not begin the name with symbols. - Do not include spaces. (optional)
     * @return ApiResponse&lt;UploadProductFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UploadProductFileResponse> product202309FilesUploadPostWithHttpInfo(String xTtsAccessToken, String contentType, File data, String name) throws ApiException {
        okhttp3.Call localVarCall = product202309FilesUploadPostValidateBeforeCall(xTtsAccessToken, contentType, data, name, null);
        Type localVarReturnType = new TypeToken<UploadProductFileResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UploadProductFile (asynchronously)
     * Upload non-image files, such as PDF or video to TikTok Shop.  Use this API when you need to add videos to your product to improve the shopping experience, or submit certifications or reports to meet TikTok Shop requirements for listing restricted products.  **Note**: You must store the response body to retrieve the ID or URL required to associate the file with a product during product creation or editing.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local file to be uploaded.  **Note**： - Supported formats: PDF, MP4, MOV, MKV, WMV, WEBM, AVI, 3GP, FLV, MPEG - Max file size: 10MB - Video aspect ratio: 9:16 to 16:9  **Recommendations for product videos**: - Aspect ratio: 1:1  - Resolution: HD 720p or higher - Duration: 20 - 60 seconds  (optional)
     * @param name            The name of the file, including the file extension (e.g. &#x60;certification.pdf&#x60;)  **Note**: - Do not use additional periods, except the one preceding the file extension. - Do not begin the name with symbols. - Do not include spaces. (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309FilesUploadPostAsync(String xTtsAccessToken, String contentType, File data, String name, final ApiCallback<UploadProductFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309FilesUploadPostValidateBeforeCall(xTtsAccessToken, contentType, data, name, _callback);
        Type localVarReturnType = new TypeToken<UploadProductFileResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalCategoriesGet
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalCategoriesGetCall(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/global_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalCategoriesGetValidateBeforeCall(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalCategoriesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalCategoriesGet(Async)");
        }

        return product202309GlobalCategoriesGetCall(xTtsAccessToken, contentType, locale, keyword, categoryVersion, _callback);

    }

    /**
     * GetGlobalCategories
     * Retrieve all available product categories, regardless of market variations. Product categories are updated frequently, so it&#39;s recommended to call the API in real time to ensure you are using the latest category data. Caching category data locally may result in using outdated information, leading to errors when creating global products.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @return GetGlobalCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetGlobalCategoriesResponse product202309GlobalCategoriesGet(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion) throws ApiException {
        ApiResponse<GetGlobalCategoriesResponse> localVarResp = product202309GlobalCategoriesGetWithHttpInfo(xTtsAccessToken, contentType, locale, keyword, categoryVersion);
        return localVarResp.getData();
    }

    /**
     * GetGlobalCategories
     * Retrieve all available product categories, regardless of market variations. Product categories are updated frequently, so it&#39;s recommended to call the API in real time to ensure you are using the latest category data. Caching category data locally may result in using outdated information, leading to errors when creating global products.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @return ApiResponse&lt;GetGlobalCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetGlobalCategoriesResponse> product202309GlobalCategoriesGetWithHttpInfo(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalCategoriesGetValidateBeforeCall(xTtsAccessToken, contentType, locale, keyword, categoryVersion, null);
        Type localVarReturnType = new TypeToken<GetGlobalCategoriesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetGlobalCategories (asynchronously)
     * Retrieve all available product categories, regardless of market variations. Product categories are updated frequently, so it&#39;s recommended to call the API in real time to ensure you are using the latest category data. Caching category data locally may result in using outdated information, leading to errors when creating global products.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param locale          The BCP-47 locale codes for displaying category information.  Default: en-US Possible values: - &#x60;de-DE&#x60; - &#x60;en-GB&#x60; - &#x60;en-IE&#x60; - &#x60;en-US&#x60; - &#x60;es-ES&#x60; - &#x60;es-MX&#x60; - &#x60;fr-FR&#x60; - &#x60;id-ID&#x60; - &#x60;it-IT&#x60; - &#x60;ja-JP&#x60; - &#x60;ms-MY&#x60; - &#x60;th-TH&#x60; - &#x60;vi-VN&#x60; - &#x60;zh-CN&#x60; (optional)
     * @param keyword         Filter categories by this keyword in &#x60;local_name&#x60;. (optional)
     * @param categoryVersion Filter categories by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree.   **Important**: If the seller account contains an active US shop, you must pass &#x60;v2&#x60; when using this API. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: &#x60;v1&#x60; (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalCategoriesGetAsync(String xTtsAccessToken, String contentType, String locale, String keyword, String categoryVersion, final ApiCallback<GetGlobalCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalCategoriesGetValidateBeforeCall(xTtsAccessToken, contentType, locale, keyword, categoryVersion, _callback);
        Type localVarReturnType = new TypeToken<GetGlobalCategoriesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalCategoriesRecommendPost
     *
     * @param xTtsAccessToken                                   (required)
     * @param contentType                                       Allowed type: application/json (required)
     * @param product202309RecommendGlobalCategoriesRequestBody (optional)
     * @param _callback                                         Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalCategoriesRecommendPostCall(String xTtsAccessToken, String contentType, RecommendGlobalCategoriesRequestBody product202309RecommendGlobalCategoriesRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309RecommendGlobalCategoriesRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/global_categories/recommend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalCategoriesRecommendPostValidateBeforeCall(String xTtsAccessToken, String contentType, RecommendGlobalCategoriesRequestBody product202309RecommendGlobalCategoriesRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalCategoriesRecommendPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalCategoriesRecommendPost(Async)");
        }

        return product202309GlobalCategoriesRecommendPostCall(xTtsAccessToken, contentType, product202309RecommendGlobalCategoriesRequestBody, _callback);

    }

    /**
     * RecommendGlobalCategories
     * Retrieve the recommended categories for a candidate global product based on its title, description, and images. If you are syncing product catalogs from an external system to TikTok Shop, use this API to facilitate product classification. **Note**: Double-byte characters (e.g. Chinese characters) are not supported in text fields such as descriptions and titles. If you include them, the API request will fail.
     *
     * @param xTtsAccessToken                                   (required)
     * @param contentType                                       Allowed type: application/json (required)
     * @param product202309RecommendGlobalCategoriesRequestBody (optional)
     * @return RecommendGlobalCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public RecommendGlobalCategoriesResponse product202309GlobalCategoriesRecommendPost(String xTtsAccessToken, String contentType, RecommendGlobalCategoriesRequestBody product202309RecommendGlobalCategoriesRequestBody) throws ApiException {
        ApiResponse<RecommendGlobalCategoriesResponse> localVarResp = product202309GlobalCategoriesRecommendPostWithHttpInfo(xTtsAccessToken, contentType, product202309RecommendGlobalCategoriesRequestBody);
        return localVarResp.getData();
    }

    /**
     * RecommendGlobalCategories
     * Retrieve the recommended categories for a candidate global product based on its title, description, and images. If you are syncing product catalogs from an external system to TikTok Shop, use this API to facilitate product classification. **Note**: Double-byte characters (e.g. Chinese characters) are not supported in text fields such as descriptions and titles. If you include them, the API request will fail.
     *
     * @param xTtsAccessToken                                   (required)
     * @param contentType                                       Allowed type: application/json (required)
     * @param product202309RecommendGlobalCategoriesRequestBody (optional)
     * @return ApiResponse&lt;RecommendGlobalCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RecommendGlobalCategoriesResponse> product202309GlobalCategoriesRecommendPostWithHttpInfo(String xTtsAccessToken, String contentType, RecommendGlobalCategoriesRequestBody product202309RecommendGlobalCategoriesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalCategoriesRecommendPostValidateBeforeCall(xTtsAccessToken, contentType, product202309RecommendGlobalCategoriesRequestBody, null);
        Type localVarReturnType = new TypeToken<RecommendGlobalCategoriesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RecommendGlobalCategories (asynchronously)
     * Retrieve the recommended categories for a candidate global product based on its title, description, and images. If you are syncing product catalogs from an external system to TikTok Shop, use this API to facilitate product classification. **Note**: Double-byte characters (e.g. Chinese characters) are not supported in text fields such as descriptions and titles. If you include them, the API request will fail.
     *
     * @param xTtsAccessToken                                   (required)
     * @param contentType                                       Allowed type: application/json (required)
     * @param product202309RecommendGlobalCategoriesRequestBody (optional)
     * @param _callback                                         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalCategoriesRecommendPostAsync(String xTtsAccessToken, String contentType, RecommendGlobalCategoriesRequestBody product202309RecommendGlobalCategoriesRequestBody, final ApiCallback<RecommendGlobalCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalCategoriesRecommendPostValidateBeforeCall(xTtsAccessToken, contentType, product202309RecommendGlobalCategoriesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RecommendGlobalCategoriesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalProductsDelete
     *
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309DeleteGlobalProductsRequestBody (optional)
     * @param _callback                                    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsDeleteCall(String xTtsAccessToken, String contentType, DeleteGlobalProductsRequestBody product202309DeleteGlobalProductsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309DeleteGlobalProductsRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/global_products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalProductsDeleteValidateBeforeCall(String xTtsAccessToken, String contentType, DeleteGlobalProductsRequestBody product202309DeleteGlobalProductsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalProductsDelete(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalProductsDelete(Async)");
        }

        return product202309GlobalProductsDeleteCall(xTtsAccessToken, contentType, product202309DeleteGlobalProductsRequestBody, _callback);

    }

    /**
     * DeleteGlobalProducts
     * Delete global products that you no longer need.
     *
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309DeleteGlobalProductsRequestBody (optional)
     * @return DeleteGlobalProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteGlobalProductsResponse product202309GlobalProductsDelete(String xTtsAccessToken, String contentType, DeleteGlobalProductsRequestBody product202309DeleteGlobalProductsRequestBody) throws ApiException {
        ApiResponse<DeleteGlobalProductsResponse> localVarResp = product202309GlobalProductsDeleteWithHttpInfo(xTtsAccessToken, contentType, product202309DeleteGlobalProductsRequestBody);
        return localVarResp.getData();
    }

    /**
     * DeleteGlobalProducts
     * Delete global products that you no longer need.
     *
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309DeleteGlobalProductsRequestBody (optional)
     * @return ApiResponse&lt;DeleteGlobalProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteGlobalProductsResponse> product202309GlobalProductsDeleteWithHttpInfo(String xTtsAccessToken, String contentType, DeleteGlobalProductsRequestBody product202309DeleteGlobalProductsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalProductsDeleteValidateBeforeCall(xTtsAccessToken, contentType, product202309DeleteGlobalProductsRequestBody, null);
        Type localVarReturnType = new TypeToken<DeleteGlobalProductsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteGlobalProducts (asynchronously)
     * Delete global products that you no longer need.
     *
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309DeleteGlobalProductsRequestBody (optional)
     * @param _callback                                    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsDeleteAsync(String xTtsAccessToken, String contentType, DeleteGlobalProductsRequestBody product202309DeleteGlobalProductsRequestBody, final ApiCallback<DeleteGlobalProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalProductsDeleteValidateBeforeCall(xTtsAccessToken, contentType, product202309DeleteGlobalProductsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DeleteGlobalProductsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalProductsGlobalProductIdGet
     *
     * @param globalProductId Global product ID (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdGetCall(String globalProductId, String xTtsAccessToken, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/global_products/{global_product_id}"
            .replace("{" + "global_product_id" + "}", localVarApiClient.escapeString(globalProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalProductsGlobalProductIdGetValidateBeforeCall(String globalProductId, String xTtsAccessToken, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalProductId' is set
        if (globalProductId == null) {
            throw new ApiException("Missing the required parameter 'globalProductId' when calling product202309GlobalProductsGlobalProductIdGet(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalProductsGlobalProductIdGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalProductsGlobalProductIdGet(Async)");
        }

        return product202309GlobalProductsGlobalProductIdGetCall(globalProductId, xTtsAccessToken, contentType, _callback);

    }

    /**
     * GetGlobalProduct
     * Retrieve all properties of a global product that is in the \&quot;DRAFT\&quot;, \&quot;UNPUBLISHED\&quot;, or \&quot;PUBLISHED\&quot; status, and the corresponding local product IDs in the published markets.
     *
     * @param globalProductId Global product ID (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @return GetGlobalProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetGlobalProductResponse product202309GlobalProductsGlobalProductIdGet(String globalProductId, String xTtsAccessToken, String contentType) throws ApiException {
        ApiResponse<GetGlobalProductResponse> localVarResp = product202309GlobalProductsGlobalProductIdGetWithHttpInfo(globalProductId, xTtsAccessToken, contentType);
        return localVarResp.getData();
    }

    /**
     * GetGlobalProduct
     * Retrieve all properties of a global product that is in the \&quot;DRAFT\&quot;, \&quot;UNPUBLISHED\&quot;, or \&quot;PUBLISHED\&quot; status, and the corresponding local product IDs in the published markets.
     *
     * @param globalProductId Global product ID (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @return ApiResponse&lt;GetGlobalProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetGlobalProductResponse> product202309GlobalProductsGlobalProductIdGetWithHttpInfo(String globalProductId, String xTtsAccessToken, String contentType) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdGetValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, null);
        Type localVarReturnType = new TypeToken<GetGlobalProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetGlobalProduct (asynchronously)
     * Retrieve all properties of a global product that is in the \&quot;DRAFT\&quot;, \&quot;UNPUBLISHED\&quot;, or \&quot;PUBLISHED\&quot; status, and the corresponding local product IDs in the published markets.
     *
     * @param globalProductId Global product ID (required)
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdGetAsync(String globalProductId, String xTtsAccessToken, String contentType, final ApiCallback<GetGlobalProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdGetValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, _callback);
        Type localVarReturnType = new TypeToken<GetGlobalProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalProductsGlobalProductIdInventoryUpdatePost
     *
     * @param globalProductId                               The global product ID to be updated. (required)
     * @param xTtsAccessToken                               (required)
     * @param contentType                                   Allowed type: application/json (required)
     * @param product202309UpdateGlobalInventoryRequestBody (optional)
     * @param _callback                                     Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdInventoryUpdatePostCall(String globalProductId, String xTtsAccessToken, String contentType, UpdateGlobalInventoryRequestBody product202309UpdateGlobalInventoryRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309UpdateGlobalInventoryRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/global_products/{global_product_id}/inventory/update"
            .replace("{" + "global_product_id" + "}", localVarApiClient.escapeString(globalProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalProductsGlobalProductIdInventoryUpdatePostValidateBeforeCall(String globalProductId, String xTtsAccessToken, String contentType, UpdateGlobalInventoryRequestBody product202309UpdateGlobalInventoryRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalProductId' is set
        if (globalProductId == null) {
            throw new ApiException("Missing the required parameter 'globalProductId' when calling product202309GlobalProductsGlobalProductIdInventoryUpdatePost(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalProductsGlobalProductIdInventoryUpdatePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalProductsGlobalProductIdInventoryUpdatePost(Async)");
        }

        return product202309GlobalProductsGlobalProductIdInventoryUpdatePostCall(globalProductId, xTtsAccessToken, contentType, product202309UpdateGlobalInventoryRequestBody, _callback);

    }

    /**
     * UpdateGlobalInventory
     * Update the inventory of unpublished global products if you have access to the Multi-Warehouse feature. The inventory of published global products will not be affected by this update operation.
     *
     * @param globalProductId                               The global product ID to be updated. (required)
     * @param xTtsAccessToken                               (required)
     * @param contentType                                   Allowed type: application/json (required)
     * @param product202309UpdateGlobalInventoryRequestBody (optional)
     * @return UpdateGlobalInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateGlobalInventoryResponse product202309GlobalProductsGlobalProductIdInventoryUpdatePost(String globalProductId, String xTtsAccessToken, String contentType, UpdateGlobalInventoryRequestBody product202309UpdateGlobalInventoryRequestBody) throws ApiException {
        ApiResponse<UpdateGlobalInventoryResponse> localVarResp = product202309GlobalProductsGlobalProductIdInventoryUpdatePostWithHttpInfo(globalProductId, xTtsAccessToken, contentType, product202309UpdateGlobalInventoryRequestBody);
        return localVarResp.getData();
    }

    /**
     * UpdateGlobalInventory
     * Update the inventory of unpublished global products if you have access to the Multi-Warehouse feature. The inventory of published global products will not be affected by this update operation.
     *
     * @param globalProductId                               The global product ID to be updated. (required)
     * @param xTtsAccessToken                               (required)
     * @param contentType                                   Allowed type: application/json (required)
     * @param product202309UpdateGlobalInventoryRequestBody (optional)
     * @return ApiResponse&lt;UpdateGlobalInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateGlobalInventoryResponse> product202309GlobalProductsGlobalProductIdInventoryUpdatePostWithHttpInfo(String globalProductId, String xTtsAccessToken, String contentType, UpdateGlobalInventoryRequestBody product202309UpdateGlobalInventoryRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdInventoryUpdatePostValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, product202309UpdateGlobalInventoryRequestBody, null);
        Type localVarReturnType = new TypeToken<UpdateGlobalInventoryResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateGlobalInventory (asynchronously)
     * Update the inventory of unpublished global products if you have access to the Multi-Warehouse feature. The inventory of published global products will not be affected by this update operation.
     *
     * @param globalProductId                               The global product ID to be updated. (required)
     * @param xTtsAccessToken                               (required)
     * @param contentType                                   Allowed type: application/json (required)
     * @param product202309UpdateGlobalInventoryRequestBody (optional)
     * @param _callback                                     The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdInventoryUpdatePostAsync(String globalProductId, String xTtsAccessToken, String contentType, UpdateGlobalInventoryRequestBody product202309UpdateGlobalInventoryRequestBody, final ApiCallback<UpdateGlobalInventoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdInventoryUpdatePostValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, product202309UpdateGlobalInventoryRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateGlobalInventoryResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalProductsGlobalProductIdPublishPost
     *
     * @param globalProductId                              The global product id. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309PublishGlobalProductRequestBody (optional)
     * @param _callback                                    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdPublishPostCall(String globalProductId, String xTtsAccessToken, String contentType, PublishGlobalProductRequestBody product202309PublishGlobalProductRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309PublishGlobalProductRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/global_products/{global_product_id}/publish"
            .replace("{" + "global_product_id" + "}", localVarApiClient.escapeString(globalProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalProductsGlobalProductIdPublishPostValidateBeforeCall(String globalProductId, String xTtsAccessToken, String contentType, PublishGlobalProductRequestBody product202309PublishGlobalProductRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalProductId' is set
        if (globalProductId == null) {
            throw new ApiException("Missing the required parameter 'globalProductId' when calling product202309GlobalProductsGlobalProductIdPublishPost(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalProductsGlobalProductIdPublishPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalProductsGlobalProductIdPublishPost(Async)");
        }

        return product202309GlobalProductsGlobalProductIdPublishPostCall(globalProductId, xTtsAccessToken, contentType, product202309PublishGlobalProductRequestBody, _callback);

    }

    /**
     * PublishGlobalProduct
     * Publish and convert a global product to local products in one or multiple shops in supported markets. After publishing, the product is sent for review by TikTok Shop in the respective markets. For sellers in the EU market, the provided information will also be automatically translated into all EU languages supported by TikTok Shop. **Note**:  - You can only publish in each market once. To change product information, edit the global product by using the [Edit Global Product API](6509e1bcc16ffe02b8dc3cd7). The changes will be automatically synchronized to all markets where the product is published - Use the [Get Product API](6509d85b4a0bb702c057fdda) to obtain the converted local product information in the target market&#39;s language.  - Use the [Edit Product API](6509da7d0fcef602bf1caddf) or [Partial Edit Product API](650a98d74a0bb702c06c3289) to edit the local product information, if necessary.
     *
     * @param globalProductId                              The global product id. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309PublishGlobalProductRequestBody (optional)
     * @return PublishGlobalProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public PublishGlobalProductResponse product202309GlobalProductsGlobalProductIdPublishPost(String globalProductId, String xTtsAccessToken, String contentType, PublishGlobalProductRequestBody product202309PublishGlobalProductRequestBody) throws ApiException {
        ApiResponse<PublishGlobalProductResponse> localVarResp = product202309GlobalProductsGlobalProductIdPublishPostWithHttpInfo(globalProductId, xTtsAccessToken, contentType, product202309PublishGlobalProductRequestBody);
        return localVarResp.getData();
    }

    /**
     * PublishGlobalProduct
     * Publish and convert a global product to local products in one or multiple shops in supported markets. After publishing, the product is sent for review by TikTok Shop in the respective markets. For sellers in the EU market, the provided information will also be automatically translated into all EU languages supported by TikTok Shop. **Note**:  - You can only publish in each market once. To change product information, edit the global product by using the [Edit Global Product API](6509e1bcc16ffe02b8dc3cd7). The changes will be automatically synchronized to all markets where the product is published - Use the [Get Product API](6509d85b4a0bb702c057fdda) to obtain the converted local product information in the target market&#39;s language.  - Use the [Edit Product API](6509da7d0fcef602bf1caddf) or [Partial Edit Product API](650a98d74a0bb702c06c3289) to edit the local product information, if necessary.
     *
     * @param globalProductId                              The global product id. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309PublishGlobalProductRequestBody (optional)
     * @return ApiResponse&lt;PublishGlobalProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<PublishGlobalProductResponse> product202309GlobalProductsGlobalProductIdPublishPostWithHttpInfo(String globalProductId, String xTtsAccessToken, String contentType, PublishGlobalProductRequestBody product202309PublishGlobalProductRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdPublishPostValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, product202309PublishGlobalProductRequestBody, null);
        Type localVarReturnType = new TypeToken<PublishGlobalProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PublishGlobalProduct (asynchronously)
     * Publish and convert a global product to local products in one or multiple shops in supported markets. After publishing, the product is sent for review by TikTok Shop in the respective markets. For sellers in the EU market, the provided information will also be automatically translated into all EU languages supported by TikTok Shop. **Note**:  - You can only publish in each market once. To change product information, edit the global product by using the [Edit Global Product API](6509e1bcc16ffe02b8dc3cd7). The changes will be automatically synchronized to all markets where the product is published - Use the [Get Product API](6509d85b4a0bb702c057fdda) to obtain the converted local product information in the target market&#39;s language.  - Use the [Edit Product API](6509da7d0fcef602bf1caddf) or [Partial Edit Product API](650a98d74a0bb702c06c3289) to edit the local product information, if necessary.
     *
     * @param globalProductId                              The global product id. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param product202309PublishGlobalProductRequestBody (optional)
     * @param _callback                                    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdPublishPostAsync(String globalProductId, String xTtsAccessToken, String contentType, PublishGlobalProductRequestBody product202309PublishGlobalProductRequestBody, final ApiCallback<PublishGlobalProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdPublishPostValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, product202309PublishGlobalProductRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PublishGlobalProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalProductsGlobalProductIdPut
     *
     * @param globalProductId                           The global product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param product202309EditGlobalProductRequestBody (optional)
     * @param _callback                                 Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdPutCall(String globalProductId, String xTtsAccessToken, String contentType, EditGlobalProductRequestBody product202309EditGlobalProductRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309EditGlobalProductRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/global_products/{global_product_id}"
            .replace("{" + "global_product_id" + "}", localVarApiClient.escapeString(globalProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalProductsGlobalProductIdPutValidateBeforeCall(String globalProductId, String xTtsAccessToken, String contentType, EditGlobalProductRequestBody product202309EditGlobalProductRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalProductId' is set
        if (globalProductId == null) {
            throw new ApiException("Missing the required parameter 'globalProductId' when calling product202309GlobalProductsGlobalProductIdPut(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalProductsGlobalProductIdPut(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalProductsGlobalProductIdPut(Async)");
        }

        return product202309GlobalProductsGlobalProductIdPutCall(globalProductId, xTtsAccessToken, contentType, product202309EditGlobalProductRequestBody, _callback);

    }

    /**
     * EditGlobalProduct
     * Edit all properties (e.g. description, brand, images, attributes) of a global product. **IMPORTANT**: For published products, the changes will be automatically retranslated and synced to all markets where the product is published. If you have already edited the product information or translations of the associated local products, they will be overwritten by the information in this API. For example, if you have customized the local prices such as the local pre-tax price or the local display price, they will be overwritten each time this API is called. **Note**: - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - All inputs, including blanks, in the request payload will overwrite existing values. To retain an existing value, make sure to include it in your request. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param globalProductId                           The global product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param product202309EditGlobalProductRequestBody (optional)
     * @return EditGlobalProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public EditGlobalProductResponse product202309GlobalProductsGlobalProductIdPut(String globalProductId, String xTtsAccessToken, String contentType, EditGlobalProductRequestBody product202309EditGlobalProductRequestBody) throws ApiException {
        ApiResponse<EditGlobalProductResponse> localVarResp = product202309GlobalProductsGlobalProductIdPutWithHttpInfo(globalProductId, xTtsAccessToken, contentType, product202309EditGlobalProductRequestBody);
        return localVarResp.getData();
    }

    /**
     * EditGlobalProduct
     * Edit all properties (e.g. description, brand, images, attributes) of a global product. **IMPORTANT**: For published products, the changes will be automatically retranslated and synced to all markets where the product is published. If you have already edited the product information or translations of the associated local products, they will be overwritten by the information in this API. For example, if you have customized the local prices such as the local pre-tax price or the local display price, they will be overwritten each time this API is called. **Note**: - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - All inputs, including blanks, in the request payload will overwrite existing values. To retain an existing value, make sure to include it in your request. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param globalProductId                           The global product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param product202309EditGlobalProductRequestBody (optional)
     * @return ApiResponse&lt;EditGlobalProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EditGlobalProductResponse> product202309GlobalProductsGlobalProductIdPutWithHttpInfo(String globalProductId, String xTtsAccessToken, String contentType, EditGlobalProductRequestBody product202309EditGlobalProductRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdPutValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, product202309EditGlobalProductRequestBody, null);
        Type localVarReturnType = new TypeToken<EditGlobalProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EditGlobalProduct (asynchronously)
     * Edit all properties (e.g. description, brand, images, attributes) of a global product. **IMPORTANT**: For published products, the changes will be automatically retranslated and synced to all markets where the product is published. If you have already edited the product information or translations of the associated local products, they will be overwritten by the information in this API. For example, if you have customized the local prices such as the local pre-tax price or the local display price, they will be overwritten each time this API is called. **Note**: - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - All inputs, including blanks, in the request payload will overwrite existing values. To retain an existing value, make sure to include it in your request. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param globalProductId                           The global product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                           (required)
     * @param contentType                               Allowed type: application/json (required)
     * @param product202309EditGlobalProductRequestBody (optional)
     * @param _callback                                 The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsGlobalProductIdPutAsync(String globalProductId, String xTtsAccessToken, String contentType, EditGlobalProductRequestBody product202309EditGlobalProductRequestBody, final ApiCallback<EditGlobalProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalProductsGlobalProductIdPutValidateBeforeCall(globalProductId, xTtsAccessToken, contentType, product202309EditGlobalProductRequestBody, _callback);
        Type localVarReturnType = new TypeToken<EditGlobalProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalProductsPost
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param product202309CreateGlobalProductRequestBody (optional)
     * @param _callback                                   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsPostCall(String xTtsAccessToken, String contentType, CreateGlobalProductRequestBody product202309CreateGlobalProductRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309CreateGlobalProductRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/global_products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalProductsPostValidateBeforeCall(String xTtsAccessToken, String contentType, CreateGlobalProductRequestBody product202309CreateGlobalProductRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalProductsPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalProductsPost(Async)");
        }

        return product202309GlobalProductsPostCall(xTtsAccessToken, contentType, product202309CreateGlobalProductRequestBody, _callback);

    }

    /**
     * CreateGlobalProduct
     * Create global products to be sold in one or multiple shops outside of the seller&#39;s base country. You can only create global products in &#x60;AVAILABLE&#x60; product categories. For other categories, contact your account manager for assistance. After product creation, use the [Publish Global Product API](https://partner.tiktokshop.com/docv2/page/650a64d6defece02be678fd6) to publish and translate the product in the desired markets. **Key concept**: Global products are products created by cross-border sellers to be sold in shops outside of their base country. With global products, cross-border sellers operating across multiple markets can avoid creating the same product for each shop individually. Instead, they just need to create a single global product, which can be published and synced to all their shops, simplifying product management across markets. **Note**: - This API is applicable only for intra-EU sellers and global sellers. To create and list local products intended for sale exclusively in local shops, use the [Create Product API](https://partner.tiktokshop.com/docv2/page/6502fc8da57708028b42b18a) instead. - There may be a limit to the number of products you can list per day. We recommend prioritizing the creation of key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param product202309CreateGlobalProductRequestBody (optional)
     * @return CreateGlobalProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public CreateGlobalProductResponse product202309GlobalProductsPost(String xTtsAccessToken, String contentType, CreateGlobalProductRequestBody product202309CreateGlobalProductRequestBody) throws ApiException {
        ApiResponse<CreateGlobalProductResponse> localVarResp = product202309GlobalProductsPostWithHttpInfo(xTtsAccessToken, contentType, product202309CreateGlobalProductRequestBody);
        return localVarResp.getData();
    }

    /**
     * CreateGlobalProduct
     * Create global products to be sold in one or multiple shops outside of the seller&#39;s base country. You can only create global products in &#x60;AVAILABLE&#x60; product categories. For other categories, contact your account manager for assistance. After product creation, use the [Publish Global Product API](https://partner.tiktokshop.com/docv2/page/650a64d6defece02be678fd6) to publish and translate the product in the desired markets. **Key concept**: Global products are products created by cross-border sellers to be sold in shops outside of their base country. With global products, cross-border sellers operating across multiple markets can avoid creating the same product for each shop individually. Instead, they just need to create a single global product, which can be published and synced to all their shops, simplifying product management across markets. **Note**: - This API is applicable only for intra-EU sellers and global sellers. To create and list local products intended for sale exclusively in local shops, use the [Create Product API](https://partner.tiktokshop.com/docv2/page/6502fc8da57708028b42b18a) instead. - There may be a limit to the number of products you can list per day. We recommend prioritizing the creation of key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param product202309CreateGlobalProductRequestBody (optional)
     * @return ApiResponse&lt;CreateGlobalProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateGlobalProductResponse> product202309GlobalProductsPostWithHttpInfo(String xTtsAccessToken, String contentType, CreateGlobalProductRequestBody product202309CreateGlobalProductRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalProductsPostValidateBeforeCall(xTtsAccessToken, contentType, product202309CreateGlobalProductRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateGlobalProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateGlobalProduct (asynchronously)
     * Create global products to be sold in one or multiple shops outside of the seller&#39;s base country. You can only create global products in &#x60;AVAILABLE&#x60; product categories. For other categories, contact your account manager for assistance. After product creation, use the [Publish Global Product API](https://partner.tiktokshop.com/docv2/page/650a64d6defece02be678fd6) to publish and translate the product in the desired markets. **Key concept**: Global products are products created by cross-border sellers to be sold in shops outside of their base country. With global products, cross-border sellers operating across multiple markets can avoid creating the same product for each shop individually. Instead, they just need to create a single global product, which can be published and synced to all their shops, simplifying product management across markets. **Note**: - This API is applicable only for intra-EU sellers and global sellers. To create and list local products intended for sale exclusively in local shops, use the [Create Product API](https://partner.tiktokshop.com/docv2/page/6502fc8da57708028b42b18a) instead. - There may be a limit to the number of products you can list per day. We recommend prioritizing the creation of key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param product202309CreateGlobalProductRequestBody (optional)
     * @param _callback                                   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsPostAsync(String xTtsAccessToken, String contentType, CreateGlobalProductRequestBody product202309CreateGlobalProductRequestBody, final ApiCallback<CreateGlobalProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalProductsPostValidateBeforeCall(xTtsAccessToken, contentType, product202309CreateGlobalProductRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309GlobalProductsSearchPost
     *
     * @param pageSize                                     \&quot;page_size\&quot; represents the return list pagination, the number of global products per page. Each page can retrieve up to 100 global product records. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param pageToken                                    The pagination token is a cursor used for pagination. It is not needed for the first page. The token is returned in the previous pagination query to determine the current position.  (optional)
     * @param product202309SearchGlobalProductsRequestBody (optional)
     * @param _callback                                    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsSearchPostCall(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, SearchGlobalProductsRequestBody product202309SearchGlobalProductsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309SearchGlobalProductsRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/global_products/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309GlobalProductsSearchPostValidateBeforeCall(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, SearchGlobalProductsRequestBody product202309SearchGlobalProductsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling product202309GlobalProductsSearchPost(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309GlobalProductsSearchPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309GlobalProductsSearchPost(Async)");
        }

        return product202309GlobalProductsSearchPostCall(pageSize, xTtsAccessToken, contentType, pageToken, product202309SearchGlobalProductsRequestBody, _callback);

    }

    /**
     * SearchGlobalProducts
     * Search your catalog to retrieve a list of global products based on filter conditions through this API. If you need to get detailed information about a global product, use the global product ID response in the \&quot;Get Global Product\&quot; API.
     *
     * @param pageSize                                     \&quot;page_size\&quot; represents the return list pagination, the number of global products per page. Each page can retrieve up to 100 global product records. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param pageToken                                    The pagination token is a cursor used for pagination. It is not needed for the first page. The token is returned in the previous pagination query to determine the current position.  (optional)
     * @param product202309SearchGlobalProductsRequestBody (optional)
     * @return SearchGlobalProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public SearchGlobalProductsResponse product202309GlobalProductsSearchPost(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, SearchGlobalProductsRequestBody product202309SearchGlobalProductsRequestBody) throws ApiException {
        ApiResponse<SearchGlobalProductsResponse> localVarResp = product202309GlobalProductsSearchPostWithHttpInfo(pageSize, xTtsAccessToken, contentType, pageToken, product202309SearchGlobalProductsRequestBody);
        return localVarResp.getData();
    }

    /**
     * SearchGlobalProducts
     * Search your catalog to retrieve a list of global products based on filter conditions through this API. If you need to get detailed information about a global product, use the global product ID response in the \&quot;Get Global Product\&quot; API.
     *
     * @param pageSize                                     \&quot;page_size\&quot; represents the return list pagination, the number of global products per page. Each page can retrieve up to 100 global product records. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param pageToken                                    The pagination token is a cursor used for pagination. It is not needed for the first page. The token is returned in the previous pagination query to determine the current position.  (optional)
     * @param product202309SearchGlobalProductsRequestBody (optional)
     * @return ApiResponse&lt;SearchGlobalProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<SearchGlobalProductsResponse> product202309GlobalProductsSearchPostWithHttpInfo(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, SearchGlobalProductsRequestBody product202309SearchGlobalProductsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309GlobalProductsSearchPostValidateBeforeCall(pageSize, xTtsAccessToken, contentType, pageToken, product202309SearchGlobalProductsRequestBody, null);
        Type localVarReturnType = new TypeToken<SearchGlobalProductsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchGlobalProducts (asynchronously)
     * Search your catalog to retrieve a list of global products based on filter conditions through this API. If you need to get detailed information about a global product, use the global product ID response in the \&quot;Get Global Product\&quot; API.
     *
     * @param pageSize                                     \&quot;page_size\&quot; represents the return list pagination, the number of global products per page. Each page can retrieve up to 100 global product records. (required)
     * @param xTtsAccessToken                              (required)
     * @param contentType                                  Allowed type: application/json (required)
     * @param pageToken                                    The pagination token is a cursor used for pagination. It is not needed for the first page. The token is returned in the previous pagination query to determine the current position.  (optional)
     * @param product202309SearchGlobalProductsRequestBody (optional)
     * @param _callback                                    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309GlobalProductsSearchPostAsync(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, SearchGlobalProductsRequestBody product202309SearchGlobalProductsRequestBody, final ApiCallback<SearchGlobalProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309GlobalProductsSearchPostValidateBeforeCall(pageSize, xTtsAccessToken, contentType, pageToken, product202309SearchGlobalProductsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<SearchGlobalProductsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ImagesUploadPost
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local image file to be uploaded.  **Note**: - Supported formats: JPG, JPEG, PNG, WEBP, HEIC, BMP - Max size: 5MB - Dimensions: [100x100 px, 20000x20000 px] - For &#x60;use_case&#x3D;MAIN_IMAGE&#x60;, the dimensions must be between 300x300 px and 4000x4000 px. - For &#x60;use_case&#x3D;SIZE_CHART_IMAGE&#x60;, the dimension must be at least 1024 px on the shorter side. (optional)
     * @param useCase         The usage scenario of the image. Possible values: - MAIN_IMAGE: An image displayed in the product image gallery. - ATTRIBUTE_IMAGE: An image that represents a product variant (e.g. color). - DESCRIPTION_IMAGE: An image used within the product description. - CERTIFICATION_IMAGE: An image to provide supporting information to meet TikTok Shop requirements for listing restricted products (e.g., images of certifications, product packaging, labeling). - SIZE_CHART_IMAGE: An image that displays the product&#39;s measurement details.  **Note**: Images for use cases &#x60;MAIN_IMAGE&#x60; and &#x60;ATTRIBUTE_IMAGE&#x60; that do not fit within the 3:4 to 4:3 aspect ratio range will be automatically converted to 1:1. (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ImagesUploadPostCall(String xTtsAccessToken, String contentType, File data, String useCase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/images/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        if (useCase != null) {
            localVarFormParams.put("use_case", useCase);
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ImagesUploadPostValidateBeforeCall(String xTtsAccessToken, String contentType, File data, String useCase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ImagesUploadPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ImagesUploadPost(Async)");
        }

        return product202309ImagesUploadPostCall(xTtsAccessToken, contentType, data, useCase, _callback);

    }

    /**
     * UploadProductImage
     * Upload local images to TikTok Shop for use as product images, variant images, size charts, certification images and so on.  **Note**:  - All images used in TikTok Shop products must be uploaded through this API. You will not be able to use any image URLs that are not hosted by TikTok Shop. - You must store the response body to retrieve the ID or URL required to associate the image with a product during product creation or editing.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local image file to be uploaded.  **Note**: - Supported formats: JPG, JPEG, PNG, WEBP, HEIC, BMP - Max size: 5MB - Dimensions: [100x100 px, 20000x20000 px] - For &#x60;use_case&#x3D;MAIN_IMAGE&#x60;, the dimensions must be between 300x300 px and 4000x4000 px. - For &#x60;use_case&#x3D;SIZE_CHART_IMAGE&#x60;, the dimension must be at least 1024 px on the shorter side. (optional)
     * @param useCase         The usage scenario of the image. Possible values: - MAIN_IMAGE: An image displayed in the product image gallery. - ATTRIBUTE_IMAGE: An image that represents a product variant (e.g. color). - DESCRIPTION_IMAGE: An image used within the product description. - CERTIFICATION_IMAGE: An image to provide supporting information to meet TikTok Shop requirements for listing restricted products (e.g., images of certifications, product packaging, labeling). - SIZE_CHART_IMAGE: An image that displays the product&#39;s measurement details.  **Note**: Images for use cases &#x60;MAIN_IMAGE&#x60; and &#x60;ATTRIBUTE_IMAGE&#x60; that do not fit within the 3:4 to 4:3 aspect ratio range will be automatically converted to 1:1. (optional)
     * @return UploadProductImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public UploadProductImageResponse product202309ImagesUploadPost(String xTtsAccessToken, String contentType, File data, String useCase) throws ApiException {
        ApiResponse<UploadProductImageResponse> localVarResp = product202309ImagesUploadPostWithHttpInfo(xTtsAccessToken, contentType, data, useCase);
        return localVarResp.getData();
    }

    /**
     * UploadProductImage
     * Upload local images to TikTok Shop for use as product images, variant images, size charts, certification images and so on.  **Note**:  - All images used in TikTok Shop products must be uploaded through this API. You will not be able to use any image URLs that are not hosted by TikTok Shop. - You must store the response body to retrieve the ID or URL required to associate the image with a product during product creation or editing.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local image file to be uploaded.  **Note**: - Supported formats: JPG, JPEG, PNG, WEBP, HEIC, BMP - Max size: 5MB - Dimensions: [100x100 px, 20000x20000 px] - For &#x60;use_case&#x3D;MAIN_IMAGE&#x60;, the dimensions must be between 300x300 px and 4000x4000 px. - For &#x60;use_case&#x3D;SIZE_CHART_IMAGE&#x60;, the dimension must be at least 1024 px on the shorter side. (optional)
     * @param useCase         The usage scenario of the image. Possible values: - MAIN_IMAGE: An image displayed in the product image gallery. - ATTRIBUTE_IMAGE: An image that represents a product variant (e.g. color). - DESCRIPTION_IMAGE: An image used within the product description. - CERTIFICATION_IMAGE: An image to provide supporting information to meet TikTok Shop requirements for listing restricted products (e.g., images of certifications, product packaging, labeling). - SIZE_CHART_IMAGE: An image that displays the product&#39;s measurement details.  **Note**: Images for use cases &#x60;MAIN_IMAGE&#x60; and &#x60;ATTRIBUTE_IMAGE&#x60; that do not fit within the 3:4 to 4:3 aspect ratio range will be automatically converted to 1:1. (optional)
     * @return ApiResponse&lt;UploadProductImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UploadProductImageResponse> product202309ImagesUploadPostWithHttpInfo(String xTtsAccessToken, String contentType, File data, String useCase) throws ApiException {
        okhttp3.Call localVarCall = product202309ImagesUploadPostValidateBeforeCall(xTtsAccessToken, contentType, data, useCase, null);
        Type localVarReturnType = new TypeToken<UploadProductImageResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UploadProductImage (asynchronously)
     * Upload local images to TikTok Shop for use as product images, variant images, size charts, certification images and so on.  **Note**:  - All images used in TikTok Shop products must be uploaded through this API. You will not be able to use any image URLs that are not hosted by TikTok Shop. - You must store the response body to retrieve the ID or URL required to associate the image with a product during product creation or editing.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: multipart/form-data (required)
     * @param data            The local image file to be uploaded.  **Note**: - Supported formats: JPG, JPEG, PNG, WEBP, HEIC, BMP - Max size: 5MB - Dimensions: [100x100 px, 20000x20000 px] - For &#x60;use_case&#x3D;MAIN_IMAGE&#x60;, the dimensions must be between 300x300 px and 4000x4000 px. - For &#x60;use_case&#x3D;SIZE_CHART_IMAGE&#x60;, the dimension must be at least 1024 px on the shorter side. (optional)
     * @param useCase         The usage scenario of the image. Possible values: - MAIN_IMAGE: An image displayed in the product image gallery. - ATTRIBUTE_IMAGE: An image that represents a product variant (e.g. color). - DESCRIPTION_IMAGE: An image used within the product description. - CERTIFICATION_IMAGE: An image to provide supporting information to meet TikTok Shop requirements for listing restricted products (e.g., images of certifications, product packaging, labeling). - SIZE_CHART_IMAGE: An image that displays the product&#39;s measurement details.  **Note**: Images for use cases &#x60;MAIN_IMAGE&#x60; and &#x60;ATTRIBUTE_IMAGE&#x60; that do not fit within the 3:4 to 4:3 aspect ratio range will be automatically converted to 1:1. (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ImagesUploadPostAsync(String xTtsAccessToken, String contentType, File data, String useCase, final ApiCallback<UploadProductImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ImagesUploadPostValidateBeforeCall(xTtsAccessToken, contentType, data, useCase, _callback);
        Type localVarReturnType = new TypeToken<UploadProductImageResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309InventorySearchPost
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309InventorySearchRequestBody (optional)
     * @param _callback                               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309InventorySearchPostCall(String xTtsAccessToken, String contentType, String shopCipher, InventorySearchRequestBody product202309InventorySearchRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309InventorySearchRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/inventory/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309InventorySearchPostValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, InventorySearchRequestBody product202309InventorySearchRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309InventorySearchPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309InventorySearchPost(Async)");
        }

        return product202309InventorySearchPostCall(xTtsAccessToken, contentType, shopCipher, product202309InventorySearchRequestBody, _callback);

    }

    /**
     * InventorySearch
     * Retrieve inventory information for multiple products or SKUs. **Note**:  - Searches can be based on either product IDs or SKU IDs, not both at the same time. - Passing Product IDs returns the inventory information of all SKUs under the specified products. - Passing SKU IDs returns the inventory information for the specified SKUs.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309InventorySearchRequestBody (optional)
     * @return InventorySearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public InventorySearchResponse product202309InventorySearchPost(String xTtsAccessToken, String contentType, String shopCipher, InventorySearchRequestBody product202309InventorySearchRequestBody) throws ApiException {
        ApiResponse<InventorySearchResponse> localVarResp = product202309InventorySearchPostWithHttpInfo(xTtsAccessToken, contentType, shopCipher, product202309InventorySearchRequestBody);
        return localVarResp.getData();
    }

    /**
     * InventorySearch
     * Retrieve inventory information for multiple products or SKUs. **Note**:  - Searches can be based on either product IDs or SKU IDs, not both at the same time. - Passing Product IDs returns the inventory information of all SKUs under the specified products. - Passing SKU IDs returns the inventory information for the specified SKUs.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309InventorySearchRequestBody (optional)
     * @return ApiResponse&lt;InventorySearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<InventorySearchResponse> product202309InventorySearchPostWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher, InventorySearchRequestBody product202309InventorySearchRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309InventorySearchPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309InventorySearchRequestBody, null);
        Type localVarReturnType = new TypeToken<InventorySearchResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * InventorySearch (asynchronously)
     * Retrieve inventory information for multiple products or SKUs. **Note**:  - Searches can be based on either product IDs or SKU IDs, not both at the same time. - Passing Product IDs returns the inventory information of all SKUs under the specified products. - Passing SKU IDs returns the inventory information for the specified SKUs.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309InventorySearchRequestBody (optional)
     * @param _callback                               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309InventorySearchPostAsync(String xTtsAccessToken, String contentType, String shopCipher, InventorySearchRequestBody product202309InventorySearchRequestBody, final ApiCallback<InventorySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309InventorySearchPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309InventorySearchRequestBody, _callback);
        Type localVarReturnType = new TypeToken<InventorySearchResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309PrerequisitesGet
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param shopCipher      (optional)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309PrerequisitesGetCall(String xTtsAccessToken, String contentType, String shopCipher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/prerequisites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309PrerequisitesGetValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309PrerequisitesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309PrerequisitesGet(Async)");
        }

        return product202309PrerequisitesGetCall(xTtsAccessToken, contentType, shopCipher, _callback);

    }

    /**
     * CheckListingPrerequisites
     * Use this API to get the product rules of the shop and whether the prerequisites for listing product are met.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param shopCipher      (optional)
     * @return CheckListingPrerequisitesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public CheckListingPrerequisitesResponse product202309PrerequisitesGet(String xTtsAccessToken, String contentType, String shopCipher) throws ApiException {
        ApiResponse<CheckListingPrerequisitesResponse> localVarResp = product202309PrerequisitesGetWithHttpInfo(xTtsAccessToken, contentType, shopCipher);
        return localVarResp.getData();
    }

    /**
     * CheckListingPrerequisites
     * Use this API to get the product rules of the shop and whether the prerequisites for listing product are met.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param shopCipher      (optional)
     * @return ApiResponse&lt;CheckListingPrerequisitesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CheckListingPrerequisitesResponse> product202309PrerequisitesGetWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher) throws ApiException {
        okhttp3.Call localVarCall = product202309PrerequisitesGetValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, null);
        Type localVarReturnType = new TypeToken<CheckListingPrerequisitesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CheckListingPrerequisites (asynchronously)
     * Use this API to get the product rules of the shop and whether the prerequisites for listing product are met.
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param shopCipher      (optional)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309PrerequisitesGetAsync(String xTtsAccessToken, String contentType, String shopCipher, final ApiCallback<CheckListingPrerequisitesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309PrerequisitesGetValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, _callback);
        Type localVarReturnType = new TypeToken<CheckListingPrerequisitesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsActivatePost
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309ActivateProductRequestBody (optional)
     * @param _callback                               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsActivatePostCall(String xTtsAccessToken, String contentType, String shopCipher, ActivateProductRequestBody product202309ActivateProductRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309ActivateProductRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/activate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsActivatePostValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, ActivateProductRequestBody product202309ActivateProductRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsActivatePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsActivatePost(Async)");
        }

        return product202309ProductsActivatePostCall(xTtsAccessToken, contentType, shopCipher, product202309ActivateProductRequestBody, _callback);

    }

    /**
     * ActivateProduct
     * Activate hidden products that are in the &#x60;Seller_deactivated&#x60; or &#x60;Platform_deactivated&#x60; status and display them in the TikTok Shop catalog.  After submitting the activation request, the products will be sent to TikTok Shop for auditing and their status will change to &#x60;Pending&#x60;. If a product passes the audit, its status will change back to &#x60;Activate&#x60;. You can use the [Product status change webhook](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) to monitor the audit status.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309ActivateProductRequestBody (optional)
     * @return ActivateProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ActivateProductResponse product202309ProductsActivatePost(String xTtsAccessToken, String contentType, String shopCipher, ActivateProductRequestBody product202309ActivateProductRequestBody) throws ApiException {
        ApiResponse<ActivateProductResponse> localVarResp = product202309ProductsActivatePostWithHttpInfo(xTtsAccessToken, contentType, shopCipher, product202309ActivateProductRequestBody);
        return localVarResp.getData();
    }

    /**
     * ActivateProduct
     * Activate hidden products that are in the &#x60;Seller_deactivated&#x60; or &#x60;Platform_deactivated&#x60; status and display them in the TikTok Shop catalog.  After submitting the activation request, the products will be sent to TikTok Shop for auditing and their status will change to &#x60;Pending&#x60;. If a product passes the audit, its status will change back to &#x60;Activate&#x60;. You can use the [Product status change webhook](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) to monitor the audit status.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309ActivateProductRequestBody (optional)
     * @return ApiResponse&lt;ActivateProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ActivateProductResponse> product202309ProductsActivatePostWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher, ActivateProductRequestBody product202309ActivateProductRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsActivatePostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309ActivateProductRequestBody, null);
        Type localVarReturnType = new TypeToken<ActivateProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ActivateProduct (asynchronously)
     * Activate hidden products that are in the &#x60;Seller_deactivated&#x60; or &#x60;Platform_deactivated&#x60; status and display them in the TikTok Shop catalog.  After submitting the activation request, the products will be sent to TikTok Shop for auditing and their status will change to &#x60;Pending&#x60;. If a product passes the audit, its status will change back to &#x60;Activate&#x60;. You can use the [Product status change webhook](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) to monitor the audit status.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309ActivateProductRequestBody (optional)
     * @param _callback                               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsActivatePostAsync(String xTtsAccessToken, String contentType, String shopCipher, ActivateProductRequestBody product202309ActivateProductRequestBody, final ApiCallback<ActivateProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsActivatePostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309ActivateProductRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ActivateProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsDeactivatePost
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309DeactivateProductsRequestBody (optional)
     * @param _callback                                  Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsDeactivatePostCall(String xTtsAccessToken, String contentType, String shopCipher, DeactivateProductsRequestBody product202309DeactivateProductsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309DeactivateProductsRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/deactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsDeactivatePostValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, DeactivateProductsRequestBody product202309DeactivateProductsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsDeactivatePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsDeactivatePost(Async)");
        }

        return product202309ProductsDeactivatePostCall(xTtsAccessToken, contentType, shopCipher, product202309DeactivateProductsRequestBody, _callback);

    }

    /**
     * DeactivateProducts
     * Deactivate products that are in the &#x60;Activate&#x60; status and hide them from buyers. The status changes to &#x60;Seller_deactivated&#x60; after deactivation. In the event there&#39;s some issue with a product (e.g. out of stock), you can deactivate the product and hide it temporarily from buyers. When the issues are resolved, you can activate the product again by using the [Activate Product API](https://partner.tiktokshop.com/docv2/page/650306ff5a12ff0294eab4a9).
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309DeactivateProductsRequestBody (optional)
     * @return DeactivateProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public DeactivateProductsResponse product202309ProductsDeactivatePost(String xTtsAccessToken, String contentType, String shopCipher, DeactivateProductsRequestBody product202309DeactivateProductsRequestBody) throws ApiException {
        ApiResponse<DeactivateProductsResponse> localVarResp = product202309ProductsDeactivatePostWithHttpInfo(xTtsAccessToken, contentType, shopCipher, product202309DeactivateProductsRequestBody);
        return localVarResp.getData();
    }

    /**
     * DeactivateProducts
     * Deactivate products that are in the &#x60;Activate&#x60; status and hide them from buyers. The status changes to &#x60;Seller_deactivated&#x60; after deactivation. In the event there&#39;s some issue with a product (e.g. out of stock), you can deactivate the product and hide it temporarily from buyers. When the issues are resolved, you can activate the product again by using the [Activate Product API](https://partner.tiktokshop.com/docv2/page/650306ff5a12ff0294eab4a9).
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309DeactivateProductsRequestBody (optional)
     * @return ApiResponse&lt;DeactivateProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeactivateProductsResponse> product202309ProductsDeactivatePostWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher, DeactivateProductsRequestBody product202309DeactivateProductsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsDeactivatePostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309DeactivateProductsRequestBody, null);
        Type localVarReturnType = new TypeToken<DeactivateProductsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeactivateProducts (asynchronously)
     * Deactivate products that are in the &#x60;Activate&#x60; status and hide them from buyers. The status changes to &#x60;Seller_deactivated&#x60; after deactivation. In the event there&#39;s some issue with a product (e.g. out of stock), you can deactivate the product and hide it temporarily from buyers. When the issues are resolved, you can activate the product again by using the [Activate Product API](https://partner.tiktokshop.com/docv2/page/650306ff5a12ff0294eab4a9).
     *
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309DeactivateProductsRequestBody (optional)
     * @param _callback                                  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsDeactivatePostAsync(String xTtsAccessToken, String contentType, String shopCipher, DeactivateProductsRequestBody product202309DeactivateProductsRequestBody, final ApiCallback<DeactivateProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsDeactivatePostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309DeactivateProductsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DeactivateProductsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsDelete
     *
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param shopCipher                             (optional)
     * @param product202309DeleteProductsRequestBody (optional)
     * @param _callback                              Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsDeleteCall(String xTtsAccessToken, String contentType, String shopCipher, DeleteProductsRequestBody product202309DeleteProductsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309DeleteProductsRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsDeleteValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, DeleteProductsRequestBody product202309DeleteProductsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsDelete(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsDelete(Async)");
        }

        return product202309ProductsDeleteCall(xTtsAccessToken, contentType, shopCipher, product202309DeleteProductsRequestBody, _callback);

    }

    /**
     * DeleteProducts
     * Delete non-frozen products that you no longer need. **For the Indonesia market**: You can only delete products that are not frozen on all listing platforms. If the product is frozen on any platform, it cannot be deleted.
     *
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param shopCipher                             (optional)
     * @param product202309DeleteProductsRequestBody (optional)
     * @return DeleteProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteProductsResponse product202309ProductsDelete(String xTtsAccessToken, String contentType, String shopCipher, DeleteProductsRequestBody product202309DeleteProductsRequestBody) throws ApiException {
        ApiResponse<DeleteProductsResponse> localVarResp = product202309ProductsDeleteWithHttpInfo(xTtsAccessToken, contentType, shopCipher, product202309DeleteProductsRequestBody);
        return localVarResp.getData();
    }

    /**
     * DeleteProducts
     * Delete non-frozen products that you no longer need. **For the Indonesia market**: You can only delete products that are not frozen on all listing platforms. If the product is frozen on any platform, it cannot be deleted.
     *
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param shopCipher                             (optional)
     * @param product202309DeleteProductsRequestBody (optional)
     * @return ApiResponse&lt;DeleteProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteProductsResponse> product202309ProductsDeleteWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher, DeleteProductsRequestBody product202309DeleteProductsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsDeleteValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309DeleteProductsRequestBody, null);
        Type localVarReturnType = new TypeToken<DeleteProductsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteProducts (asynchronously)
     * Delete non-frozen products that you no longer need. **For the Indonesia market**: You can only delete products that are not frozen on all listing platforms. If the product is frozen on any platform, it cannot be deleted.
     *
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param shopCipher                             (optional)
     * @param product202309DeleteProductsRequestBody (optional)
     * @param _callback                              The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsDeleteAsync(String xTtsAccessToken, String contentType, String shopCipher, DeleteProductsRequestBody product202309DeleteProductsRequestBody, final ApiCallback<DeleteProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsDeleteValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309DeleteProductsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DeleteProductsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsListingCheckPost
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param isDiagnosisRequired                         (**Deprecated**: This field is deprecated and will be removed in a future API version. Use [Diagnose and Optimize Product](677c9523f7765c0308b3d68d) API instead to get listing quality related information.) A flag to indicate whether to return the listing quality information (US only) and optimization diagnosis results for the product. If this is set to &#x60;false&#x60;, the response body will exclude the &#x60;listing_quality&#x60; and &#x60;diagnoses&#x60; objects. Default: true (optional)
     * @param shopCipher                                  (optional)
     * @param product202309CheckProductListingRequestBody (optional)
     * @param _callback                                   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsListingCheckPostCall(String xTtsAccessToken, String contentType, Boolean isDiagnosisRequired, String shopCipher, CheckProductListingRequestBody product202309CheckProductListingRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309CheckProductListingRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/listing_check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isDiagnosisRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_diagnosis_required", isDiagnosisRequired));
        }

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsListingCheckPostValidateBeforeCall(String xTtsAccessToken, String contentType, Boolean isDiagnosisRequired, String shopCipher, CheckProductListingRequestBody product202309CheckProductListingRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsListingCheckPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsListingCheckPost(Async)");
        }

        return product202309ProductsListingCheckPostCall(xTtsAccessToken, contentType, isDiagnosisRequired, shopCipher, product202309CheckProductListingRequestBody, _callback);

    }

    /**
     * CheckProductListing
     * Identify any issues with your product properties in advance to ensure your product is ready for listing. Every product must meet TikTok Shop requirements before it can be listed. Before listing, you can submit all relevant product information to this API to check whether a listing meets these requirements. You&#39;ll receive a list of issues to resolve before listing. This process helps reduce the risk of failure when creating products. **Note**:  - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param isDiagnosisRequired                         (**Deprecated**: This field is deprecated and will be removed in a future API version. Use [Diagnose and Optimize Product](677c9523f7765c0308b3d68d) API instead to get listing quality related information.) A flag to indicate whether to return the listing quality information (US only) and optimization diagnosis results for the product. If this is set to &#x60;false&#x60;, the response body will exclude the &#x60;listing_quality&#x60; and &#x60;diagnoses&#x60; objects. Default: true (optional)
     * @param shopCipher                                  (optional)
     * @param product202309CheckProductListingRequestBody (optional)
     * @return CheckProductListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public CheckProductListingResponse product202309ProductsListingCheckPost(String xTtsAccessToken, String contentType, Boolean isDiagnosisRequired, String shopCipher, CheckProductListingRequestBody product202309CheckProductListingRequestBody) throws ApiException {
        ApiResponse<CheckProductListingResponse> localVarResp = product202309ProductsListingCheckPostWithHttpInfo(xTtsAccessToken, contentType, isDiagnosisRequired, shopCipher, product202309CheckProductListingRequestBody);
        return localVarResp.getData();
    }

    /**
     * CheckProductListing
     * Identify any issues with your product properties in advance to ensure your product is ready for listing. Every product must meet TikTok Shop requirements before it can be listed. Before listing, you can submit all relevant product information to this API to check whether a listing meets these requirements. You&#39;ll receive a list of issues to resolve before listing. This process helps reduce the risk of failure when creating products. **Note**:  - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param isDiagnosisRequired                         (**Deprecated**: This field is deprecated and will be removed in a future API version. Use [Diagnose and Optimize Product](677c9523f7765c0308b3d68d) API instead to get listing quality related information.) A flag to indicate whether to return the listing quality information (US only) and optimization diagnosis results for the product. If this is set to &#x60;false&#x60;, the response body will exclude the &#x60;listing_quality&#x60; and &#x60;diagnoses&#x60; objects. Default: true (optional)
     * @param shopCipher                                  (optional)
     * @param product202309CheckProductListingRequestBody (optional)
     * @return ApiResponse&lt;CheckProductListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CheckProductListingResponse> product202309ProductsListingCheckPostWithHttpInfo(String xTtsAccessToken, String contentType, Boolean isDiagnosisRequired, String shopCipher, CheckProductListingRequestBody product202309CheckProductListingRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsListingCheckPostValidateBeforeCall(xTtsAccessToken, contentType, isDiagnosisRequired, shopCipher, product202309CheckProductListingRequestBody, null);
        Type localVarReturnType = new TypeToken<CheckProductListingResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CheckProductListing (asynchronously)
     * Identify any issues with your product properties in advance to ensure your product is ready for listing. Every product must meet TikTok Shop requirements before it can be listed. Before listing, you can submit all relevant product information to this API to check whether a listing meets these requirements. You&#39;ll receive a list of issues to resolve before listing. This process helps reduce the risk of failure when creating products. **Note**:  - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                             (required)
     * @param contentType                                 Allowed type: application/json (required)
     * @param isDiagnosisRequired                         (**Deprecated**: This field is deprecated and will be removed in a future API version. Use [Diagnose and Optimize Product](677c9523f7765c0308b3d68d) API instead to get listing quality related information.) A flag to indicate whether to return the listing quality information (US only) and optimization diagnosis results for the product. If this is set to &#x60;false&#x60;, the response body will exclude the &#x60;listing_quality&#x60; and &#x60;diagnoses&#x60; objects. Default: true (optional)
     * @param shopCipher                                  (optional)
     * @param product202309CheckProductListingRequestBody (optional)
     * @param _callback                                   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsListingCheckPostAsync(String xTtsAccessToken, String contentType, Boolean isDiagnosisRequired, String shopCipher, CheckProductListingRequestBody product202309CheckProductListingRequestBody, final ApiCallback<CheckProductListingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsListingCheckPostValidateBeforeCall(xTtsAccessToken, contentType, isDiagnosisRequired, shopCipher, product202309CheckProductListingRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CheckProductListingResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsPost
     *
     * @param xTtsAccessToken                       (required)
     * @param contentType                           Allowed type: application/json (required)
     * @param shopCipher                            (optional)
     * @param product202309CreateProductRequestBody (optional)
     * @param _callback                             Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsPostCall(String xTtsAccessToken, String contentType, String shopCipher, CreateProductRequestBody product202309CreateProductRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309CreateProductRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsPostValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, CreateProductRequestBody product202309CreateProductRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsPost(Async)");
        }

        return product202309ProductsPostCall(xTtsAccessToken, contentType, shopCipher, product202309CreateProductRequestBody, _callback);

    }

    /**
     * CreateProduct
     * Create and list products intended for sale exclusively in local shops. You can create products in &#x60;AVAILABLE&#x60; categories. (US sellers can also create products in INVITE_ONLY categories). After creation, it will be sent for audit review by TikTok Shop. Use the [Product status change](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **local sellers and Intra-EU sellers**. Global sellers can use the [Create Global Product API](https://partner.tiktokshop.com/docv2/page/6509de61bace3e02b7489cba) to create global products that can be listed and sold in multiple markets. - Before calling this API, we recommend that you prepare the necessary information by following the [usage flow for your region](650b23eef1fd3102b93d2326). - There may be a limit to the number of products you can list per day. We recommend prioritizing the creation of key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                       (required)
     * @param contentType                           Allowed type: application/json (required)
     * @param shopCipher                            (optional)
     * @param product202309CreateProductRequestBody (optional)
     * @return CreateProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public CreateProductResponse product202309ProductsPost(String xTtsAccessToken, String contentType, String shopCipher, CreateProductRequestBody product202309CreateProductRequestBody) throws ApiException {
        ApiResponse<CreateProductResponse> localVarResp = product202309ProductsPostWithHttpInfo(xTtsAccessToken, contentType, shopCipher, product202309CreateProductRequestBody);
        return localVarResp.getData();
    }

    /**
     * CreateProduct
     * Create and list products intended for sale exclusively in local shops. You can create products in &#x60;AVAILABLE&#x60; categories. (US sellers can also create products in INVITE_ONLY categories). After creation, it will be sent for audit review by TikTok Shop. Use the [Product status change](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **local sellers and Intra-EU sellers**. Global sellers can use the [Create Global Product API](https://partner.tiktokshop.com/docv2/page/6509de61bace3e02b7489cba) to create global products that can be listed and sold in multiple markets. - Before calling this API, we recommend that you prepare the necessary information by following the [usage flow for your region](650b23eef1fd3102b93d2326). - There may be a limit to the number of products you can list per day. We recommend prioritizing the creation of key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                       (required)
     * @param contentType                           Allowed type: application/json (required)
     * @param shopCipher                            (optional)
     * @param product202309CreateProductRequestBody (optional)
     * @return ApiResponse&lt;CreateProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateProductResponse> product202309ProductsPostWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher, CreateProductRequestBody product202309CreateProductRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309CreateProductRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateProduct (asynchronously)
     * Create and list products intended for sale exclusively in local shops. You can create products in &#x60;AVAILABLE&#x60; categories. (US sellers can also create products in INVITE_ONLY categories). After creation, it will be sent for audit review by TikTok Shop. Use the [Product status change](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **local sellers and Intra-EU sellers**. Global sellers can use the [Create Global Product API](https://partner.tiktokshop.com/docv2/page/6509de61bace3e02b7489cba) to create global products that can be listed and sold in multiple markets. - Before calling this API, we recommend that you prepare the necessary information by following the [usage flow for your region](650b23eef1fd3102b93d2326). - There may be a limit to the number of products you can list per day. We recommend prioritizing the creation of key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected.
     *
     * @param xTtsAccessToken                       (required)
     * @param contentType                           Allowed type: application/json (required)
     * @param shopCipher                            (optional)
     * @param product202309CreateProductRequestBody (optional)
     * @param _callback                             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsPostAsync(String xTtsAccessToken, String contentType, String shopCipher, CreateProductRequestBody product202309CreateProductRequestBody, final ApiCallback<CreateProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309CreateProductRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsProductIdGet
     *
     * @param productId                The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken          (required)
     * @param contentType              Allowed type: application/json (required)
     * @param returnUnderReviewVersion A flag to indicate what product information to retrieve if a live product (&#x60;ACTIVATE&#x60; status) is edited and resent for TikTok Shop review. - True: Retrieves the latest version of the product information that is currently under review. - False: Retrieves a snapshot of the product information that is live and online (before the edit). Default: False (optional)
     * @param shopCipher               (optional)
     * @param _callback                Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdGetCall(String productId, String xTtsAccessToken, String contentType, Boolean returnUnderReviewVersion, String shopCipher, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product/202309/products/{product_id}"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnUnderReviewVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_under_review_version", returnUnderReviewVersion));
        }

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsProductIdGetValidateBeforeCall(String productId, String xTtsAccessToken, String contentType, Boolean returnUnderReviewVersion, String shopCipher, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling product202309ProductsProductIdGet(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsProductIdGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsProductIdGet(Async)");
        }

        return product202309ProductsProductIdGetCall(productId, xTtsAccessToken, contentType, returnUnderReviewVersion, shopCipher, _callback);

    }

    /**
     * GetProduct
     * Retrieve all properties of a product that is in the &#x60;DRAFT&#x60;, &#x60;PENDING&#x60;, or &#x60;ACTIVATE&#x60; status.
     *
     * @param productId                The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken          (required)
     * @param contentType              Allowed type: application/json (required)
     * @param returnUnderReviewVersion A flag to indicate what product information to retrieve if a live product (&#x60;ACTIVATE&#x60; status) is edited and resent for TikTok Shop review. - True: Retrieves the latest version of the product information that is currently under review. - False: Retrieves a snapshot of the product information that is live and online (before the edit). Default: False (optional)
     * @param shopCipher               (optional)
     * @return GetProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetProductResponse product202309ProductsProductIdGet(String productId, String xTtsAccessToken, String contentType, Boolean returnUnderReviewVersion, String shopCipher) throws ApiException {
        ApiResponse<GetProductResponse> localVarResp = product202309ProductsProductIdGetWithHttpInfo(productId, xTtsAccessToken, contentType, returnUnderReviewVersion, shopCipher);
        return localVarResp.getData();
    }

    /**
     * GetProduct
     * Retrieve all properties of a product that is in the &#x60;DRAFT&#x60;, &#x60;PENDING&#x60;, or &#x60;ACTIVATE&#x60; status.
     *
     * @param productId                The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken          (required)
     * @param contentType              Allowed type: application/json (required)
     * @param returnUnderReviewVersion A flag to indicate what product information to retrieve if a live product (&#x60;ACTIVATE&#x60; status) is edited and resent for TikTok Shop review. - True: Retrieves the latest version of the product information that is currently under review. - False: Retrieves a snapshot of the product information that is live and online (before the edit). Default: False (optional)
     * @param shopCipher               (optional)
     * @return ApiResponse&lt;GetProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetProductResponse> product202309ProductsProductIdGetWithHttpInfo(String productId, String xTtsAccessToken, String contentType, Boolean returnUnderReviewVersion, String shopCipher) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsProductIdGetValidateBeforeCall(productId, xTtsAccessToken, contentType, returnUnderReviewVersion, shopCipher, null);
        Type localVarReturnType = new TypeToken<GetProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetProduct (asynchronously)
     * Retrieve all properties of a product that is in the &#x60;DRAFT&#x60;, &#x60;PENDING&#x60;, or &#x60;ACTIVATE&#x60; status.
     *
     * @param productId                The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken          (required)
     * @param contentType              Allowed type: application/json (required)
     * @param returnUnderReviewVersion A flag to indicate what product information to retrieve if a live product (&#x60;ACTIVATE&#x60; status) is edited and resent for TikTok Shop review. - True: Retrieves the latest version of the product information that is currently under review. - False: Retrieves a snapshot of the product information that is live and online (before the edit). Default: False (optional)
     * @param shopCipher               (optional)
     * @param _callback                The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdGetAsync(String productId, String xTtsAccessToken, String contentType, Boolean returnUnderReviewVersion, String shopCipher, final ApiCallback<GetProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsProductIdGetValidateBeforeCall(productId, xTtsAccessToken, contentType, returnUnderReviewVersion, shopCipher, _callback);
        Type localVarReturnType = new TypeToken<GetProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsProductIdInventoryUpdatePost
     *
     * @param productId                               The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309UpdateInventoryRequestBody (optional)
     * @param _callback                               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdInventoryUpdatePostCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdateInventoryRequestBody product202309UpdateInventoryRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309UpdateInventoryRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/{product_id}/inventory/update"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsProductIdInventoryUpdatePostValidateBeforeCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdateInventoryRequestBody product202309UpdateInventoryRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling product202309ProductsProductIdInventoryUpdatePost(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsProductIdInventoryUpdatePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsProductIdInventoryUpdatePost(Async)");
        }

        return product202309ProductsProductIdInventoryUpdatePostCall(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdateInventoryRequestBody, _callback);

    }

    /**
     * UpdateInventory
     * Update the inventory quantity of multiple SKUs belonging to a product in the &#x60;ACTIVATE&#x60; status.
     *
     * @param productId                               The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309UpdateInventoryRequestBody (optional)
     * @return UpdateInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateInventoryResponse product202309ProductsProductIdInventoryUpdatePost(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdateInventoryRequestBody product202309UpdateInventoryRequestBody) throws ApiException {
        ApiResponse<UpdateInventoryResponse> localVarResp = product202309ProductsProductIdInventoryUpdatePostWithHttpInfo(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdateInventoryRequestBody);
        return localVarResp.getData();
    }

    /**
     * UpdateInventory
     * Update the inventory quantity of multiple SKUs belonging to a product in the &#x60;ACTIVATE&#x60; status.
     *
     * @param productId                               The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309UpdateInventoryRequestBody (optional)
     * @return ApiResponse&lt;UpdateInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateInventoryResponse> product202309ProductsProductIdInventoryUpdatePostWithHttpInfo(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdateInventoryRequestBody product202309UpdateInventoryRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsProductIdInventoryUpdatePostValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdateInventoryRequestBody, null);
        Type localVarReturnType = new TypeToken<UpdateInventoryResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateInventory (asynchronously)
     * Update the inventory quantity of multiple SKUs belonging to a product in the &#x60;ACTIVATE&#x60; status.
     *
     * @param productId                               The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309UpdateInventoryRequestBody (optional)
     * @param _callback                               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdInventoryUpdatePostAsync(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdateInventoryRequestBody product202309UpdateInventoryRequestBody, final ApiCallback<UpdateInventoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsProductIdInventoryUpdatePostValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdateInventoryRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateInventoryResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsProductIdPartialEditPost
     *
     * @param productId                                  The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309PartialEditProductRequestBody (optional)
     * @param _callback                                  Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdPartialEditPostCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, PartialEditProductRequestBody product202309PartialEditProductRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309PartialEditProductRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/{product_id}/partial_edit"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsProductIdPartialEditPostValidateBeforeCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, PartialEditProductRequestBody product202309PartialEditProductRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling product202309ProductsProductIdPartialEditPost(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsProductIdPartialEditPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsProductIdPartialEditPost(Async)");
        }

        return product202309ProductsProductIdPartialEditPostCall(productId, xTtsAccessToken, contentType, shopCipher, product202309PartialEditProductRequestBody, _callback);

    }

    /**
     * PartialEditProduct
     * Edit a subset of the product properties (e.g. description, brand, images, attributes). After editing the product, the latest product content (referred to as v2) will be resent for audit review. If the audit passes, v2 is published to the shop, otherwise, the existing product stays live and remains unchanged (keeping v1). However, edits to the &#x60;price&#x60; or &#x60;inventory&#x60; fields do not require a reaudit and will be immediately published on the platform. Use the [Product status change](650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **local sellers and intra-EU sellers**. - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - **Updates are handled per top-level property**, so all non-empty fields within an updated object must be supplied to prevent overwriting with blanks. For top-level properties (e.g. &#x60;description&#x60;, &#x60;brand_id&#x60;) that are not nested in an object, you can update them individually. Omitting these properties in the request will leave them unchanged. If you need to edit any nested property within an object, you must provide values for all nested properties of that object. Any omitted nested properties will be overwritten with blanks. For example, if you want to update &#x60;identifier_code.code&#x60;, you must also include the &#x60;identifier_code.type&#x60; property to avoid data loss for that property. - If new mandatory product attributes were added by TikTok Shop after the creation of your product, ensure that you provide these attributes too. **For Tokopedia sellers**: Note that a product can have **only one active version** across all platforms at any time. If a product is live on both platforms, audit results for the latest version are handled as follows: - **Mixed audit results**: If the product passes audit on one platform but fails on another, on the successful platform, the product will stay live and be updated with content from the latest version (v2), while on the failed platform, the product will be deactivated and hidden entirely. - **Audit failure on all platforms**: If the product fails audit on all platforms, the existing product stays live and remains unchanged (keeping v1).
     *
     * @param productId                                  The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309PartialEditProductRequestBody (optional)
     * @return PartialEditProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public PartialEditProductResponse product202309ProductsProductIdPartialEditPost(String productId, String xTtsAccessToken, String contentType, String shopCipher, PartialEditProductRequestBody product202309PartialEditProductRequestBody) throws ApiException {
        ApiResponse<PartialEditProductResponse> localVarResp = product202309ProductsProductIdPartialEditPostWithHttpInfo(productId, xTtsAccessToken, contentType, shopCipher, product202309PartialEditProductRequestBody);
        return localVarResp.getData();
    }

    /**
     * PartialEditProduct
     * Edit a subset of the product properties (e.g. description, brand, images, attributes). After editing the product, the latest product content (referred to as v2) will be resent for audit review. If the audit passes, v2 is published to the shop, otherwise, the existing product stays live and remains unchanged (keeping v1). However, edits to the &#x60;price&#x60; or &#x60;inventory&#x60; fields do not require a reaudit and will be immediately published on the platform. Use the [Product status change](650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **local sellers and intra-EU sellers**. - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - **Updates are handled per top-level property**, so all non-empty fields within an updated object must be supplied to prevent overwriting with blanks. For top-level properties (e.g. &#x60;description&#x60;, &#x60;brand_id&#x60;) that are not nested in an object, you can update them individually. Omitting these properties in the request will leave them unchanged. If you need to edit any nested property within an object, you must provide values for all nested properties of that object. Any omitted nested properties will be overwritten with blanks. For example, if you want to update &#x60;identifier_code.code&#x60;, you must also include the &#x60;identifier_code.type&#x60; property to avoid data loss for that property. - If new mandatory product attributes were added by TikTok Shop after the creation of your product, ensure that you provide these attributes too. **For Tokopedia sellers**: Note that a product can have **only one active version** across all platforms at any time. If a product is live on both platforms, audit results for the latest version are handled as follows: - **Mixed audit results**: If the product passes audit on one platform but fails on another, on the successful platform, the product will stay live and be updated with content from the latest version (v2), while on the failed platform, the product will be deactivated and hidden entirely. - **Audit failure on all platforms**: If the product fails audit on all platforms, the existing product stays live and remains unchanged (keeping v1).
     *
     * @param productId                                  The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309PartialEditProductRequestBody (optional)
     * @return ApiResponse&lt;PartialEditProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<PartialEditProductResponse> product202309ProductsProductIdPartialEditPostWithHttpInfo(String productId, String xTtsAccessToken, String contentType, String shopCipher, PartialEditProductRequestBody product202309PartialEditProductRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsProductIdPartialEditPostValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309PartialEditProductRequestBody, null);
        Type localVarReturnType = new TypeToken<PartialEditProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * PartialEditProduct (asynchronously)
     * Edit a subset of the product properties (e.g. description, brand, images, attributes). After editing the product, the latest product content (referred to as v2) will be resent for audit review. If the audit passes, v2 is published to the shop, otherwise, the existing product stays live and remains unchanged (keeping v1). However, edits to the &#x60;price&#x60; or &#x60;inventory&#x60; fields do not require a reaudit and will be immediately published on the platform. Use the [Product status change](650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **local sellers and intra-EU sellers**. - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - **Updates are handled per top-level property**, so all non-empty fields within an updated object must be supplied to prevent overwriting with blanks. For top-level properties (e.g. &#x60;description&#x60;, &#x60;brand_id&#x60;) that are not nested in an object, you can update them individually. Omitting these properties in the request will leave them unchanged. If you need to edit any nested property within an object, you must provide values for all nested properties of that object. Any omitted nested properties will be overwritten with blanks. For example, if you want to update &#x60;identifier_code.code&#x60;, you must also include the &#x60;identifier_code.type&#x60; property to avoid data loss for that property. - If new mandatory product attributes were added by TikTok Shop after the creation of your product, ensure that you provide these attributes too. **For Tokopedia sellers**: Note that a product can have **only one active version** across all platforms at any time. If a product is live on both platforms, audit results for the latest version are handled as follows: - **Mixed audit results**: If the product passes audit on one platform but fails on another, on the successful platform, the product will stay live and be updated with content from the latest version (v2), while on the failed platform, the product will be deactivated and hidden entirely. - **Audit failure on all platforms**: If the product fails audit on all platforms, the existing product stays live and remains unchanged (keeping v1).
     *
     * @param productId                                  The product ID in TikTok Shop. (required)
     * @param xTtsAccessToken                            (required)
     * @param contentType                                Allowed type: application/json (required)
     * @param shopCipher                                 (optional)
     * @param product202309PartialEditProductRequestBody (optional)
     * @param _callback                                  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdPartialEditPostAsync(String productId, String xTtsAccessToken, String contentType, String shopCipher, PartialEditProductRequestBody product202309PartialEditProductRequestBody, final ApiCallback<PartialEditProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsProductIdPartialEditPostValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309PartialEditProductRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PartialEditProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsProductIdPricesUpdatePost
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309UpdatePriceRequestBody (optional)
     * @param _callback                           Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdPricesUpdatePostCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdatePriceRequestBody product202309UpdatePriceRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309UpdatePriceRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/{product_id}/prices/update"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsProductIdPricesUpdatePostValidateBeforeCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdatePriceRequestBody product202309UpdatePriceRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling product202309ProductsProductIdPricesUpdatePost(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsProductIdPricesUpdatePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsProductIdPricesUpdatePost(Async)");
        }

        return product202309ProductsProductIdPricesUpdatePostCall(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdatePriceRequestBody, _callback);

    }

    /**
     * UpdatePrice
     * Update the price of multiple SKUs belonging to a product in the &#x60;ACTIVATE&#x60; status and not included in any ongoing promotions. **Note**: The &#x60;data&#x60; response field is always empty as there is no additional response data.
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309UpdatePriceRequestBody (optional)
     * @return UpdatePriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public UpdatePriceResponse product202309ProductsProductIdPricesUpdatePost(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdatePriceRequestBody product202309UpdatePriceRequestBody) throws ApiException {
        ApiResponse<UpdatePriceResponse> localVarResp = product202309ProductsProductIdPricesUpdatePostWithHttpInfo(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdatePriceRequestBody);
        return localVarResp.getData();
    }

    /**
     * UpdatePrice
     * Update the price of multiple SKUs belonging to a product in the &#x60;ACTIVATE&#x60; status and not included in any ongoing promotions. **Note**: The &#x60;data&#x60; response field is always empty as there is no additional response data.
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309UpdatePriceRequestBody (optional)
     * @return ApiResponse&lt;UpdatePriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdatePriceResponse> product202309ProductsProductIdPricesUpdatePostWithHttpInfo(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdatePriceRequestBody product202309UpdatePriceRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsProductIdPricesUpdatePostValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdatePriceRequestBody, null);
        Type localVarReturnType = new TypeToken<UpdatePriceResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdatePrice (asynchronously)
     * Update the price of multiple SKUs belonging to a product in the &#x60;ACTIVATE&#x60; status and not included in any ongoing promotions. **Note**: The &#x60;data&#x60; response field is always empty as there is no additional response data.
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309UpdatePriceRequestBody (optional)
     * @param _callback                           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdPricesUpdatePostAsync(String productId, String xTtsAccessToken, String contentType, String shopCipher, UpdatePriceRequestBody product202309UpdatePriceRequestBody, final ApiCallback<UpdatePriceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsProductIdPricesUpdatePostValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309UpdatePriceRequestBody, _callback);
        Type localVarReturnType = new TypeToken<UpdatePriceResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsProductIdPut
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309EditProductRequestBody (optional)
     * @param _callback                           Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdPutCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, EditProductRequestBody product202309EditProductRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309EditProductRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/{product_id}"
            .replace("{" + "product_id" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsProductIdPutValidateBeforeCall(String productId, String xTtsAccessToken, String contentType, String shopCipher, EditProductRequestBody product202309EditProductRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling product202309ProductsProductIdPut(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsProductIdPut(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsProductIdPut(Async)");
        }

        return product202309ProductsProductIdPutCall(productId, xTtsAccessToken, contentType, shopCipher, product202309EditProductRequestBody, _callback);

    }

    /**
     * EditProduct
     * Edit all properties (e.g. description, brand, images) of an existing product that is not in the &#x60;DRAFT&#x60;, &#x60;FREEZE&#x60;, or &#x60;DELETED&#x60; state. After editing the product, the latest product content (referred to as v2) will be resent for audit review. If the audit passes, v2 is published to the shop, otherwise, the existing product stays live and remains unchanged (keeping v1). However, edits to the &#x60;price&#x60; or &#x60;inventory&#x60; fields do not require a reaudit and will be immediately published on the platform. Use the [Product status change](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **active sellers/shops** that have completed the KYC onboarding process. - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - All inputs, including blanks, in the request payload will overwrite existing values. To retain an existing value, make sure to include it in your request. Exceptions to this rule are the &#x60;price&#x60; and &#x60;inventory&#x60; fields, which will remain unchanged if they are omitted from the request. If you wish to edit only certain properties, you can use the [Partial Edit Product API](650a98d74a0bb702c06c3289), [Update Inventory API](6503068fc20ad60284b38858), or the [Update Price API](650307de5a12ff0294eac8b0). - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected. **For Tokopedia sellers**: Note that a product can have **only one active version** across all platforms at any time. If a product is live on both platforms, audit results for the latest version are handled as follows: - **Mixed audit results**: If the product passes audit on one platform but fails on another, on the successful platform, the product will stay live and be updated with content from the latest version (v2), while on the failed platform, the product will be deactivated and hidden entirely. - **Audit failure on all platforms**: If the product fails audit on all platforms, the existing product stays live and remains unchanged (keeping v1).
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309EditProductRequestBody (optional)
     * @return EditProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public EditProductResponse product202309ProductsProductIdPut(String productId, String xTtsAccessToken, String contentType, String shopCipher, EditProductRequestBody product202309EditProductRequestBody) throws ApiException {
        ApiResponse<EditProductResponse> localVarResp = product202309ProductsProductIdPutWithHttpInfo(productId, xTtsAccessToken, contentType, shopCipher, product202309EditProductRequestBody);
        return localVarResp.getData();
    }

    /**
     * EditProduct
     * Edit all properties (e.g. description, brand, images) of an existing product that is not in the &#x60;DRAFT&#x60;, &#x60;FREEZE&#x60;, or &#x60;DELETED&#x60; state. After editing the product, the latest product content (referred to as v2) will be resent for audit review. If the audit passes, v2 is published to the shop, otherwise, the existing product stays live and remains unchanged (keeping v1). However, edits to the &#x60;price&#x60; or &#x60;inventory&#x60; fields do not require a reaudit and will be immediately published on the platform. Use the [Product status change](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **active sellers/shops** that have completed the KYC onboarding process. - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - All inputs, including blanks, in the request payload will overwrite existing values. To retain an existing value, make sure to include it in your request. Exceptions to this rule are the &#x60;price&#x60; and &#x60;inventory&#x60; fields, which will remain unchanged if they are omitted from the request. If you wish to edit only certain properties, you can use the [Partial Edit Product API](650a98d74a0bb702c06c3289), [Update Inventory API](6503068fc20ad60284b38858), or the [Update Price API](650307de5a12ff0294eac8b0). - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected. **For Tokopedia sellers**: Note that a product can have **only one active version** across all platforms at any time. If a product is live on both platforms, audit results for the latest version are handled as follows: - **Mixed audit results**: If the product passes audit on one platform but fails on another, on the successful platform, the product will stay live and be updated with content from the latest version (v2), while on the failed platform, the product will be deactivated and hidden entirely. - **Audit failure on all platforms**: If the product fails audit on all platforms, the existing product stays live and remains unchanged (keeping v1).
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309EditProductRequestBody (optional)
     * @return ApiResponse&lt;EditProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EditProductResponse> product202309ProductsProductIdPutWithHttpInfo(String productId, String xTtsAccessToken, String contentType, String shopCipher, EditProductRequestBody product202309EditProductRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsProductIdPutValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309EditProductRequestBody, null);
        Type localVarReturnType = new TypeToken<EditProductResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EditProduct (asynchronously)
     * Edit all properties (e.g. description, brand, images) of an existing product that is not in the &#x60;DRAFT&#x60;, &#x60;FREEZE&#x60;, or &#x60;DELETED&#x60; state. After editing the product, the latest product content (referred to as v2) will be resent for audit review. If the audit passes, v2 is published to the shop, otherwise, the existing product stays live and remains unchanged (keeping v1). However, edits to the &#x60;price&#x60; or &#x60;inventory&#x60; fields do not require a reaudit and will be immediately published on the platform. Use the [Product status change](https://partner.tiktokshop.com/docv2/page/650956aff1fd3102b90b6261) webhook to keep track of the review status. **Note**:  - This API is applicable only for **active sellers/shops** that have completed the KYC onboarding process. - There may be a limit to the number of products you can relist per day. We recommend prioritizing key products first to ensure they get published. Refer to TikTok Shop Academy for details on the limit. - All inputs, including blanks, in the request payload will overwrite existing values. To retain an existing value, make sure to include it in your request. Exceptions to this rule are the &#x60;price&#x60; and &#x60;inventory&#x60; fields, which will remain unchanged if they are omitted from the request. If you wish to edit only certain properties, you can use the [Partial Edit Product API](650a98d74a0bb702c06c3289), [Update Inventory API](6503068fc20ad60284b38858), or the [Update Price API](650307de5a12ff0294eac8b0). - The language used in the product content must align with the target market&#39;s language (e.g. don&#39;t use Chinese), otherwise the listing will fail or be rejected. **For Tokopedia sellers**: Note that a product can have **only one active version** across all platforms at any time. If a product is live on both platforms, audit results for the latest version are handled as follows: - **Mixed audit results**: If the product passes audit on one platform but fails on another, on the successful platform, the product will stay live and be updated with content from the latest version (v2), while on the failed platform, the product will be deactivated and hidden entirely. - **Audit failure on all platforms**: If the product fails audit on all platforms, the existing product stays live and remains unchanged (keeping v1).
     *
     * @param productId                           The product ID generated by TikTok Shop. (required)
     * @param xTtsAccessToken                     (required)
     * @param contentType                         Allowed type: application/json (required)
     * @param shopCipher                          (optional)
     * @param product202309EditProductRequestBody (optional)
     * @param _callback                           The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsProductIdPutAsync(String productId, String xTtsAccessToken, String contentType, String shopCipher, EditProductRequestBody product202309EditProductRequestBody, final ApiCallback<EditProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsProductIdPutValidateBeforeCall(productId, xTtsAccessToken, contentType, shopCipher, product202309EditProductRequestBody, _callback);
        Type localVarReturnType = new TypeToken<EditProductResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsRecoverPost
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309RecoverProductsRequestBody (optional)
     * @param _callback                               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsRecoverPostCall(String xTtsAccessToken, String contentType, String shopCipher, RecoverProductsRequestBody product202309RecoverProductsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309RecoverProductsRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/recover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsRecoverPostValidateBeforeCall(String xTtsAccessToken, String contentType, String shopCipher, RecoverProductsRequestBody product202309RecoverProductsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsRecoverPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsRecoverPost(Async)");
        }

        return product202309ProductsRecoverPostCall(xTtsAccessToken, contentType, shopCipher, product202309RecoverProductsRequestBody, _callback);

    }

    /**
     * RecoverProducts
     * Recover products that are in the &#x60;Deleted&#x60; status. The status changes to &#x60;Seller_deactivated&#x60; after recovery.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309RecoverProductsRequestBody (optional)
     * @return RecoverProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public RecoverProductsResponse product202309ProductsRecoverPost(String xTtsAccessToken, String contentType, String shopCipher, RecoverProductsRequestBody product202309RecoverProductsRequestBody) throws ApiException {
        ApiResponse<RecoverProductsResponse> localVarResp = product202309ProductsRecoverPostWithHttpInfo(xTtsAccessToken, contentType, shopCipher, product202309RecoverProductsRequestBody);
        return localVarResp.getData();
    }

    /**
     * RecoverProducts
     * Recover products that are in the &#x60;Deleted&#x60; status. The status changes to &#x60;Seller_deactivated&#x60; after recovery.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309RecoverProductsRequestBody (optional)
     * @return ApiResponse&lt;RecoverProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RecoverProductsResponse> product202309ProductsRecoverPostWithHttpInfo(String xTtsAccessToken, String contentType, String shopCipher, RecoverProductsRequestBody product202309RecoverProductsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsRecoverPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309RecoverProductsRequestBody, null);
        Type localVarReturnType = new TypeToken<RecoverProductsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * RecoverProducts (asynchronously)
     * Recover products that are in the &#x60;Deleted&#x60; status. The status changes to &#x60;Seller_deactivated&#x60; after recovery.
     *
     * @param xTtsAccessToken                         (required)
     * @param contentType                             Allowed type: application/json (required)
     * @param shopCipher                              (optional)
     * @param product202309RecoverProductsRequestBody (optional)
     * @param _callback                               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsRecoverPostAsync(String xTtsAccessToken, String contentType, String shopCipher, RecoverProductsRequestBody product202309RecoverProductsRequestBody, final ApiCallback<RecoverProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsRecoverPostValidateBeforeCall(xTtsAccessToken, contentType, shopCipher, product202309RecoverProductsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RecoverProductsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for product202309ProductsSearchPost
     *
     * @param pageSize                               The number of results to be returned per page.  Valid range: [1-100] (required)
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param pageToken                              An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion                        Filter products by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: Return all products from both &#x60;v1&#x60; and &#x60;v2&#x60; category trees. (optional)
     * @param shopCipher                             (optional)
     * @param product202309SearchProductsRequestBody (optional)
     * @param _callback                              Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsSearchPostCall(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, String categoryVersion, String shopCipher, SearchProductsRequestBody product202309SearchProductsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product202309SearchProductsRequestBody;

        // create path and map variables
        String localVarPath = "/product/202309/products/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (categoryVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_version", categoryVersion));
        }

        if (shopCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_cipher", shopCipher));
        }

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call product202309ProductsSearchPostValidateBeforeCall(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, String categoryVersion, String shopCipher, SearchProductsRequestBody product202309SearchProductsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling product202309ProductsSearchPost(Async)");
        }

        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling product202309ProductsSearchPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling product202309ProductsSearchPost(Async)");
        }

        return product202309ProductsSearchPostCall(pageSize, xTtsAccessToken, contentType, pageToken, categoryVersion, shopCipher, product202309SearchProductsRequestBody, _callback);

    }

    /**
     * SearchProducts
     * Retrieve a list of products that meet the specified conditions.  This API will only return the key product properties. You can pass a returned product ID to the [Get Product API](https://partner.tiktokshop.com/docv2/page/6509d85b4a0bb702c057fdda) to obtain more details about the product.
     *
     * @param pageSize                               The number of results to be returned per page.  Valid range: [1-100] (required)
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param pageToken                              An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion                        Filter products by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: Return all products from both &#x60;v1&#x60; and &#x60;v2&#x60; category trees. (optional)
     * @param shopCipher                             (optional)
     * @param product202309SearchProductsRequestBody (optional)
     * @return SearchProductsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public SearchProductsResponse product202309ProductsSearchPost(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, String categoryVersion, String shopCipher, SearchProductsRequestBody product202309SearchProductsRequestBody) throws ApiException {
        ApiResponse<SearchProductsResponse> localVarResp = product202309ProductsSearchPostWithHttpInfo(pageSize, xTtsAccessToken, contentType, pageToken, categoryVersion, shopCipher, product202309SearchProductsRequestBody);
        return localVarResp.getData();
    }

    /**
     * SearchProducts
     * Retrieve a list of products that meet the specified conditions.  This API will only return the key product properties. You can pass a returned product ID to the [Get Product API](https://partner.tiktokshop.com/docv2/page/6509d85b4a0bb702c057fdda) to obtain more details about the product.
     *
     * @param pageSize                               The number of results to be returned per page.  Valid range: [1-100] (required)
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param pageToken                              An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion                        Filter products by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: Return all products from both &#x60;v1&#x60; and &#x60;v2&#x60; category trees. (optional)
     * @param shopCipher                             (optional)
     * @param product202309SearchProductsRequestBody (optional)
     * @return ApiResponse&lt;SearchProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<SearchProductsResponse> product202309ProductsSearchPostWithHttpInfo(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, String categoryVersion, String shopCipher, SearchProductsRequestBody product202309SearchProductsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = product202309ProductsSearchPostValidateBeforeCall(pageSize, xTtsAccessToken, contentType, pageToken, categoryVersion, shopCipher, product202309SearchProductsRequestBody, null);
        Type localVarReturnType = new TypeToken<SearchProductsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SearchProducts (asynchronously)
     * Retrieve a list of products that meet the specified conditions.  This API will only return the key product properties. You can pass a returned product ID to the [Get Product API](https://partner.tiktokshop.com/docv2/page/6509d85b4a0bb702c057fdda) to obtain more details about the product.
     *
     * @param pageSize                               The number of results to be returned per page.  Valid range: [1-100] (required)
     * @param xTtsAccessToken                        (required)
     * @param contentType                            Allowed type: application/json (required)
     * @param pageToken                              An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. (optional)
     * @param categoryVersion                        Filter products by the category tree version. Possible values based on region: - US: &#x60;v2&#x60;, represents the 7-level category tree. - Other regions: &#x60;v1&#x60;, represents the 3-level category tree. Default: Return all products from both &#x60;v1&#x60; and &#x60;v2&#x60; category trees. (optional)
     * @param shopCipher                             (optional)
     * @param product202309SearchProductsRequestBody (optional)
     * @param _callback                              The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call product202309ProductsSearchPostAsync(Integer pageSize, String xTtsAccessToken, String contentType, String pageToken, String categoryVersion, String shopCipher, SearchProductsRequestBody product202309SearchProductsRequestBody, final ApiCallback<SearchProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = product202309ProductsSearchPostValidateBeforeCall(pageSize, xTtsAccessToken, contentType, pageToken, categoryVersion, shopCipher, product202309SearchProductsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<SearchProductsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
