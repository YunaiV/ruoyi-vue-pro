/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.model.Product.V202309;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.somle.tiktok.sdk.invoke.JSON;

import java.io.IOException;
import java.util.*;

/**
 * CheckProductListingRequestBodySkus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-12T06:25:14.052506Z[Etc/UTC]", comments = "Generator version: 7.6.0")
public class CheckProductListingRequestBodySkus {
    public static final String SERIALIZED_NAME_COMBINED_SKUS = "combined_skus";
    public static final String SERIALIZED_NAME_EXTERNAL_LIST_PRICES = "external_list_prices";
    public static final String SERIALIZED_NAME_EXTERNAL_SKU_ID = "external_sku_id";
    public static final String SERIALIZED_NAME_EXTERNAL_URLS = "external_urls";
    public static final String SERIALIZED_NAME_EXTRA_IDENTIFIER_CODES = "extra_identifier_codes";
    public static final String SERIALIZED_NAME_IDENTIFIER_CODE = "identifier_code";
    public static final String SERIALIZED_NAME_INVENTORY = "inventory";
    public static final String SERIALIZED_NAME_LIST_PRICE = "list_price";
    public static final String SERIALIZED_NAME_PRE_SALE = "pre_sale";
    public static final String SERIALIZED_NAME_PRICE = "price";
    public static final String SERIALIZED_NAME_SALES_ATTRIBUTES = "sales_attributes";
    public static final String SERIALIZED_NAME_SELLER_SKU = "seller_sku";
    public static final String SERIALIZED_NAME_SKU_UNIT_COUNT = "sku_unit_count";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("combined_skus");
        openapiFields.add("external_list_prices");
        openapiFields.add("external_sku_id");
        openapiFields.add("external_urls");
        openapiFields.add("extra_identifier_codes");
        openapiFields.add("identifier_code");
        openapiFields.add("inventory");
        openapiFields.add("list_price");
        openapiFields.add("pre_sale");
        openapiFields.add("price");
        openapiFields.add("sales_attributes");
        openapiFields.add("seller_sku");
        openapiFields.add("sku_unit_count");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_COMBINED_SKUS)
    private List<CheckProductListingRequestBodySkusCombinedSkus> combinedSkus = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_EXTERNAL_LIST_PRICES)
    private List<CheckProductListingRequestBodySkusExternalListPrices> externalListPrices = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_EXTERNAL_SKU_ID)
    private String externalSkuId;
    @SerializedName(SERIALIZED_NAME_EXTERNAL_URLS)
    private List<String> externalUrls = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_EXTRA_IDENTIFIER_CODES)
    private List<String> extraIdentifierCodes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_IDENTIFIER_CODE)
    private CheckProductListingRequestBodySkusIdentifierCode identifierCode;
    @SerializedName(SERIALIZED_NAME_INVENTORY)
    private List<CheckProductListingRequestBodySkusInventory> inventory = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_LIST_PRICE)
    private CheckProductListingRequestBodySkusListPrice listPrice;
    @SerializedName(SERIALIZED_NAME_PRE_SALE)
    private CheckProductListingRequestBodySkusPreSale preSale;
    @SerializedName(SERIALIZED_NAME_PRICE)
    private CheckProductListingRequestBodySkusPrice price;
    @SerializedName(SERIALIZED_NAME_SALES_ATTRIBUTES)
    private List<CheckProductListingRequestBodySkusSalesAttributes> salesAttributes = new ArrayList<>();
    @SerializedName(SERIALIZED_NAME_SELLER_SKU)
    private String sellerSku;
    @SerializedName(SERIALIZED_NAME_SKU_UNIT_COUNT)
    private String skuUnitCount;

    public CheckProductListingRequestBodySkus() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CheckProductListingRequestBodySkus
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CheckProductListingRequestBodySkus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CheckProductListingRequestBodySkus is not found in the empty JSON string", CheckProductListingRequestBodySkus.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CheckProductListingRequestBodySkus.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckProductListingRequestBodySkus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("combined_skus") != null && !jsonObj.get("combined_skus").isJsonNull()) {
            JsonArray jsonArraycombinedSkus = jsonObj.getAsJsonArray("combined_skus");
            if (jsonArraycombinedSkus != null) {
                // ensure the json data is an array
                if (!jsonObj.get("combined_skus").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `combined_skus` to be an array in the JSON string but got `%s`", jsonObj.get("combined_skus").toString()));
                }

                // validate the optional field `combined_skus` (array)
                for (int i = 0; i < jsonArraycombinedSkus.size(); i++) {
                    CheckProductListingRequestBodySkusCombinedSkus.validateJsonElement(jsonArraycombinedSkus.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("external_list_prices") != null && !jsonObj.get("external_list_prices").isJsonNull()) {
            JsonArray jsonArrayexternalListPrices = jsonObj.getAsJsonArray("external_list_prices");
            if (jsonArrayexternalListPrices != null) {
                // ensure the json data is an array
                if (!jsonObj.get("external_list_prices").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `external_list_prices` to be an array in the JSON string but got `%s`", jsonObj.get("external_list_prices").toString()));
                }

                // validate the optional field `external_list_prices` (array)
                for (int i = 0; i < jsonArrayexternalListPrices.size(); i++) {
                    CheckProductListingRequestBodySkusExternalListPrices.validateJsonElement(jsonArrayexternalListPrices.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("external_sku_id") != null && !jsonObj.get("external_sku_id").isJsonNull()) && !jsonObj.get("external_sku_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_sku_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_sku_id").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("external_urls") != null && !jsonObj.get("external_urls").isJsonNull() && !jsonObj.get("external_urls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_urls` to be an array in the JSON string but got `%s`", jsonObj.get("external_urls").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("extra_identifier_codes") != null && !jsonObj.get("extra_identifier_codes").isJsonNull() && !jsonObj.get("extra_identifier_codes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extra_identifier_codes` to be an array in the JSON string but got `%s`", jsonObj.get("extra_identifier_codes").toString()));
        }
        // validate the optional field `identifier_code`
        if (jsonObj.get("identifier_code") != null && !jsonObj.get("identifier_code").isJsonNull()) {
            CheckProductListingRequestBodySkusIdentifierCode.validateJsonElement(jsonObj.get("identifier_code"));
        }
        if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
            JsonArray jsonArrayinventory = jsonObj.getAsJsonArray("inventory");
            if (jsonArrayinventory != null) {
                // ensure the json data is an array
                if (!jsonObj.get("inventory").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `inventory` to be an array in the JSON string but got `%s`", jsonObj.get("inventory").toString()));
                }

                // validate the optional field `inventory` (array)
                for (int i = 0; i < jsonArrayinventory.size(); i++) {
                    CheckProductListingRequestBodySkusInventory.validateJsonElement(jsonArrayinventory.get(i));
                }
                ;
            }
        }
        // validate the optional field `list_price`
        if (jsonObj.get("list_price") != null && !jsonObj.get("list_price").isJsonNull()) {
            CheckProductListingRequestBodySkusListPrice.validateJsonElement(jsonObj.get("list_price"));
        }
        // validate the optional field `pre_sale`
        if (jsonObj.get("pre_sale") != null && !jsonObj.get("pre_sale").isJsonNull()) {
            CheckProductListingRequestBodySkusPreSale.validateJsonElement(jsonObj.get("pre_sale"));
        }
        // validate the optional field `price`
        if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
            CheckProductListingRequestBodySkusPrice.validateJsonElement(jsonObj.get("price"));
        }
        if (jsonObj.get("sales_attributes") != null && !jsonObj.get("sales_attributes").isJsonNull()) {
            JsonArray jsonArraysalesAttributes = jsonObj.getAsJsonArray("sales_attributes");
            if (jsonArraysalesAttributes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("sales_attributes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `sales_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("sales_attributes").toString()));
                }

                // validate the optional field `sales_attributes` (array)
                for (int i = 0; i < jsonArraysalesAttributes.size(); i++) {
                    CheckProductListingRequestBodySkusSalesAttributes.validateJsonElement(jsonArraysalesAttributes.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("seller_sku") != null && !jsonObj.get("seller_sku").isJsonNull()) && !jsonObj.get("seller_sku").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `seller_sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_sku").toString()));
        }
        if ((jsonObj.get("sku_unit_count") != null && !jsonObj.get("sku_unit_count").isJsonNull()) && !jsonObj.get("sku_unit_count").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `sku_unit_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_unit_count").toString()));
        }
    }

    /**
     * Create an instance of CheckProductListingRequestBodySkus given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CheckProductListingRequestBodySkus
     * @throws IOException if the JSON string is invalid with respect to CheckProductListingRequestBodySkus
     */
    public static CheckProductListingRequestBodySkus fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CheckProductListingRequestBodySkus.class);
    }

    public CheckProductListingRequestBodySkus combinedSkus(List<CheckProductListingRequestBodySkusCombinedSkus> combinedSkus) {
        this.combinedSkus = combinedSkus;
        return this;
    }

    public CheckProductListingRequestBodySkus addCombinedSkusItem(CheckProductListingRequestBodySkusCombinedSkus combinedSkusItem) {
        if (this.combinedSkus == null) {
            this.combinedSkus = new ArrayList<>();
        }
        this.combinedSkus.add(combinedSkusItem);
        return this;
    }

    /**
     * If this SKU is a combined listing, this object contains the list of individual SKUs that form a product bundle (e.g. gift basket, starter pack).
     *
     * @return combinedSkus
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodySkusCombinedSkus> getCombinedSkus() {
        return combinedSkus;
    }

    public void setCombinedSkus(List<CheckProductListingRequestBodySkusCombinedSkus> combinedSkus) {
        this.combinedSkus = combinedSkus;
    }

    public CheckProductListingRequestBodySkus externalListPrices(List<CheckProductListingRequestBodySkusExternalListPrices> externalListPrices) {
        this.externalListPrices = externalListPrices;
        return this;
    }

    public CheckProductListingRequestBodySkus addExternalListPricesItem(CheckProductListingRequestBodySkusExternalListPrices externalListPricesItem) {
        if (this.externalListPrices == null) {
            this.externalListPrices = new ArrayList<>();
        }
        this.externalListPrices.add(externalListPricesItem);
        return this;
    }

    /**
     * The SKU list price (e.g. MSRP, RRP) or original price information on external ecommerce platforms. Applicable only for selected local sellers in the US market.  **Note**: This value may appear as the strikethrough price on the product page. However, whether the strikethrough price is shown and the amount shown are subject to the audit team&#39;s review and decision based on various pricing information.
     *
     * @return externalListPrices
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodySkusExternalListPrices> getExternalListPrices() {
        return externalListPrices;
    }

    public void setExternalListPrices(List<CheckProductListingRequestBodySkusExternalListPrices> externalListPrices) {
        this.externalListPrices = externalListPrices;
    }

    public CheckProductListingRequestBodySkus externalSkuId(String externalSkuId) {
        this.externalSkuId = externalSkuId;
        return this;
    }

    /**
     * An external identifier used in an external ecommerce platform. This is used to associate the SKU between TikTok Shop and the external ecommerce platform.  Max length: 999 characters
     *
     * @return externalSkuId
     **/
    @javax.annotation.Nullable
    public String getExternalSkuId() {
        return externalSkuId;
    }

    public void setExternalSkuId(String externalSkuId) {
        this.externalSkuId = externalSkuId;
    }

    public CheckProductListingRequestBodySkus externalUrls(List<String> externalUrls) {
        this.externalUrls = externalUrls;
        return this;
    }

    public CheckProductListingRequestBodySkus addExternalUrlsItem(String externalUrlsItem) {
        if (this.externalUrls == null) {
            this.externalUrls = new ArrayList<>();
        }
        this.externalUrls.add(externalUrlsItem);
        return this;
    }

    /**
     * A comma-delimited list of URLs for third-party product listing pages where consumers can place orders. Add this property if you have products listed on third-party sites other than TikTok Shop and would like to map them. Max string length: 500
     *
     * @return externalUrls
     **/
    @javax.annotation.Nullable
    public List<String> getExternalUrls() {
        return externalUrls;
    }

    public void setExternalUrls(List<String> externalUrls) {
        this.externalUrls = externalUrls;
    }

    public CheckProductListingRequestBodySkus extraIdentifierCodes(List<String> extraIdentifierCodes) {
        this.extraIdentifierCodes = extraIdentifierCodes;
        return this;
    }

    public CheckProductListingRequestBodySkus addExtraIdentifierCodesItem(String extraIdentifierCodesItem) {
        if (this.extraIdentifierCodes == null) {
            this.extraIdentifierCodes = new ArrayList<>();
        }
        this.extraIdentifierCodes.add(extraIdentifierCodesItem);
        return this;
    }

    /**
     * If the SKU is a combined listing (in other words, a product bundle) containing multiple individual SKUs, you can add up to 10 additional identifier codes here for the SKUs included in the bundle. Delimit the codes with commas.  **Format**: GTIN: 14 digits  EAN: 8, 13, or 14 digits  UPC: 12 digits  ISBN: 13 digits (supports &#39;X&#39; in uppercase as the last digit)  **Note**:  - Applicable only for the EU market.  - The identifier code must be unique for each SKU, with no repetition allowed.
     *
     * @return extraIdentifierCodes
     **/
    @javax.annotation.Nullable
    public List<String> getExtraIdentifierCodes() {
        return extraIdentifierCodes;
    }

    public void setExtraIdentifierCodes(List<String> extraIdentifierCodes) {
        this.extraIdentifierCodes = extraIdentifierCodes;
    }

    public CheckProductListingRequestBodySkus identifierCode(CheckProductListingRequestBodySkusIdentifierCode identifierCode) {
        this.identifierCode = identifierCode;
        return this;
    }

    /**
     * Get identifierCode
     *
     * @return identifierCode
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodySkusIdentifierCode getIdentifierCode() {
        return identifierCode;
    }

    public void setIdentifierCode(CheckProductListingRequestBodySkusIdentifierCode identifierCode) {
        this.identifierCode = identifierCode;
    }

    public CheckProductListingRequestBodySkus inventory(List<CheckProductListingRequestBodySkusInventory> inventory) {
        this.inventory = inventory;
        return this;
    }

    public CheckProductListingRequestBodySkus addInventoryItem(CheckProductListingRequestBodySkusInventory inventoryItem) {
        if (this.inventory == null) {
            this.inventory = new ArrayList<>();
        }
        this.inventory.add(inventoryItem);
        return this;
    }

    /**
     * SKU inventory information.
     *
     * @return inventory
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodySkusInventory> getInventory() {
        return inventory;
    }

    public void setInventory(List<CheckProductListingRequestBodySkusInventory> inventory) {
        this.inventory = inventory;
    }

    public CheckProductListingRequestBodySkus listPrice(CheckProductListingRequestBodySkusListPrice listPrice) {
        this.listPrice = listPrice;
        return this;
    }

    /**
     * Get listPrice
     *
     * @return listPrice
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodySkusListPrice getListPrice() {
        return listPrice;
    }

    public void setListPrice(CheckProductListingRequestBodySkusListPrice listPrice) {
        this.listPrice = listPrice;
    }

    public CheckProductListingRequestBodySkus preSale(CheckProductListingRequestBodySkusPreSale preSale) {
        this.preSale = preSale;
        return this;
    }

    /**
     * Get preSale
     *
     * @return preSale
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodySkusPreSale getPreSale() {
        return preSale;
    }

    public void setPreSale(CheckProductListingRequestBodySkusPreSale preSale) {
        this.preSale = preSale;
    }

    public CheckProductListingRequestBodySkus price(CheckProductListingRequestBodySkusPrice price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     **/
    @javax.annotation.Nullable
    public CheckProductListingRequestBodySkusPrice getPrice() {
        return price;
    }

    public void setPrice(CheckProductListingRequestBodySkusPrice price) {
        this.price = price;
    }

    public CheckProductListingRequestBodySkus salesAttributes(List<CheckProductListingRequestBodySkusSalesAttributes> salesAttributes) {
        this.salesAttributes = salesAttributes;
        return this;
    }

    public CheckProductListingRequestBodySkus addSalesAttributesItem(CheckProductListingRequestBodySkusSalesAttributes salesAttributesItem) {
        if (this.salesAttributes == null) {
            this.salesAttributes = new ArrayList<>();
        }
        this.salesAttributes.add(salesAttributesItem);
        return this;
    }

    /**
     * A list of attributes  (e.g. size, color, length) that define each variant of a product.  **Note**:  - If your product is straightforward without any sales attributes, you can omit this object. - You can only have up to 3 types of sales attributes per product. - Each SKU must include the same number and type of sales attributes. For example, you cannot have one SKU that has only a Color attribute, while another SKU has both Color and Size attributes. - Provide either a built-in ID or a custom name; if both are provided, the ID takes priority. - The &#x60;id/name&#x60; and &#x60;value_id/value_name&#x60; pairs must be unique in each SKU. For example, you cannot repeat &#x60;\&quot;name\&quot;: \&quot;Color\&quot;&#x60;, &#x60;\&quot;value_name\&quot;: \&quot;Red\&quot;&#x60; in different SKUs.
     *
     * @return salesAttributes
     **/
    @javax.annotation.Nullable
    public List<CheckProductListingRequestBodySkusSalesAttributes> getSalesAttributes() {
        return salesAttributes;
    }

    public void setSalesAttributes(List<CheckProductListingRequestBodySkusSalesAttributes> salesAttributes) {
        this.salesAttributes = salesAttributes;
    }

    public CheckProductListingRequestBodySkus sellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
        return this;
    }

    /**
     * An internal code/name for managing SKUs, not visible to buyers.   - Valid length: 1-50 characters - Format: Text without spaces
     *
     * @return sellerSku
     **/
    @javax.annotation.Nullable
    public String getSellerSku() {
        return sellerSku;
    }

    public void setSellerSku(String sellerSku) {
        this.sellerSku = sellerSku;
    }

    public CheckProductListingRequestBodySkus skuUnitCount(String skuUnitCount) {
        this.skuUnitCount = skuUnitCount;
        return this;
    }

    /**
     * The total quantity/volume of the product represented by the SKU. For example, if the SKU represents 500ml of water, this value would be 500 if the unit type is defined as ml. Valid range: [0.01, 99,999.9999]  Applicable only for the EU market.  **Note**:  - This is mainly used to calculate the unit price of the SKU, and is required only if you wish to display the unit price to facilitate easier price comparisons across different products and packaging sizes. - Unit price &#x3D; Selling price/(SKU unit count/base unit count). Therefore if you want to obtain the unit price, you would also need to define the \&quot;base unit count\&quot; and the \&quot;unit type\&quot; product attributes. Retrieve the relevant information for these product attributes by using the [Get Attributes API](https://partner.tiktokshop.com/docv2/page/6509c5784a0bb702c0561cc8). The unit price would then be returned in the [Get Product API](https://partner.tiktokshop.com/docv2/page/6509d85b4a0bb702c057fdda).
     *
     * @return skuUnitCount
     **/
    @javax.annotation.Nullable
    public String getSkuUnitCount() {
        return skuUnitCount;
    }

    public void setSkuUnitCount(String skuUnitCount) {
        this.skuUnitCount = skuUnitCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckProductListingRequestBodySkus product202309CheckProductListingRequestBodySkus = (CheckProductListingRequestBodySkus) o;
        return Objects.equals(this.combinedSkus, product202309CheckProductListingRequestBodySkus.combinedSkus) &&
            Objects.equals(this.externalListPrices, product202309CheckProductListingRequestBodySkus.externalListPrices) &&
            Objects.equals(this.externalSkuId, product202309CheckProductListingRequestBodySkus.externalSkuId) &&
            Objects.equals(this.externalUrls, product202309CheckProductListingRequestBodySkus.externalUrls) &&
            Objects.equals(this.extraIdentifierCodes, product202309CheckProductListingRequestBodySkus.extraIdentifierCodes) &&
            Objects.equals(this.identifierCode, product202309CheckProductListingRequestBodySkus.identifierCode) &&
            Objects.equals(this.inventory, product202309CheckProductListingRequestBodySkus.inventory) &&
            Objects.equals(this.listPrice, product202309CheckProductListingRequestBodySkus.listPrice) &&
            Objects.equals(this.preSale, product202309CheckProductListingRequestBodySkus.preSale) &&
            Objects.equals(this.price, product202309CheckProductListingRequestBodySkus.price) &&
            Objects.equals(this.salesAttributes, product202309CheckProductListingRequestBodySkus.salesAttributes) &&
            Objects.equals(this.sellerSku, product202309CheckProductListingRequestBodySkus.sellerSku) &&
            Objects.equals(this.skuUnitCount, product202309CheckProductListingRequestBodySkus.skuUnitCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(combinedSkus, externalListPrices, externalSkuId, externalUrls, extraIdentifierCodes, identifierCode, inventory, listPrice, preSale, price, salesAttributes, sellerSku, skuUnitCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckProductListingRequestBodySkus {\n");
        sb.append("    combinedSkus: ").append(toIndentedString(combinedSkus)).append("\n");
        sb.append("    externalListPrices: ").append(toIndentedString(externalListPrices)).append("\n");
        sb.append("    externalSkuId: ").append(toIndentedString(externalSkuId)).append("\n");
        sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
        sb.append("    extraIdentifierCodes: ").append(toIndentedString(extraIdentifierCodes)).append("\n");
        sb.append("    identifierCode: ").append(toIndentedString(identifierCode)).append("\n");
        sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
        sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
        sb.append("    preSale: ").append(toIndentedString(preSale)).append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    salesAttributes: ").append(toIndentedString(salesAttributes)).append("\n");
        sb.append("    sellerSku: ").append(toIndentedString(sellerSku)).append("\n");
        sb.append("    skuUnitCount: ").append(toIndentedString(skuUnitCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CheckProductListingRequestBodySkus to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CheckProductListingRequestBodySkus.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CheckProductListingRequestBodySkus' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CheckProductListingRequestBodySkus> thisAdapter
                = gson.getDelegateAdapter(this, TypeToken.get(CheckProductListingRequestBodySkus.class));

            return (TypeAdapter<T>) new TypeAdapter<CheckProductListingRequestBodySkus>() {
                @Override
                public void write(JsonWriter out, CheckProductListingRequestBodySkus value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CheckProductListingRequestBodySkus read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

