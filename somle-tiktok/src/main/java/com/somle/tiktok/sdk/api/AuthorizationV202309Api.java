/*
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.somle.tiktok.sdk.api;

import com.google.gson.reflect.TypeToken;
import com.somle.tiktok.sdk.invoke.*;
import com.somle.tiktok.sdk.model.Authorization.V202309.GetAuthorizedShopsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationV202309Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationV202309Api() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationV202309Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authorization202309ShopsGet
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param _callback       Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call authorization202309ShopsGetCall(String xTtsAccessToken, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorization/202309/shops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTtsAccessToken != null) {
            localVarHeaderParams.put("x-tts-access-token", localVarApiClient.parameterToString(xTtsAccessToken));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorization202309ShopsGetValidateBeforeCall(String xTtsAccessToken, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTtsAccessToken' is set
        if (xTtsAccessToken == null) {
            throw new ApiException("Missing the required parameter 'xTtsAccessToken' when calling authorization202309ShopsGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling authorization202309ShopsGet(Async)");
        }

        return authorization202309ShopsGetCall(xTtsAccessToken, contentType, _callback);

    }

    /**
     * GetAuthorizedShops
     * Retrieves the list of shops that a seller has authorized for an app. Seller authorization is required before an app can access the data of a shop. Use this API to check which shops are currently authorized for an app and obtain the corresponding shop cipher for use as an input parameter in shop related APIs.  For more information about seller authorization, refer to [Seller authorization guide](https://partner.tiktokshop.com/docv2/page/678e3a344ddec3030b238fa0). Target seller: All
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @return GetAuthorizedShopsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public GetAuthorizedShopsResponse authorization202309ShopsGet(String xTtsAccessToken, String contentType) throws ApiException {
        ApiResponse<GetAuthorizedShopsResponse> localVarResp = authorization202309ShopsGetWithHttpInfo(xTtsAccessToken, contentType);
        return localVarResp.getData();
    }

    /**
     * GetAuthorizedShops
     * Retrieves the list of shops that a seller has authorized for an app. Seller authorization is required before an app can access the data of a shop. Use this API to check which shops are currently authorized for an app and obtain the corresponding shop cipher for use as an input parameter in shop related APIs.  For more information about seller authorization, refer to [Seller authorization guide](https://partner.tiktokshop.com/docv2/page/678e3a344ddec3030b238fa0). Target seller: All
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @return ApiResponse&lt;GetAuthorizedShopsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetAuthorizedShopsResponse> authorization202309ShopsGetWithHttpInfo(String xTtsAccessToken, String contentType) throws ApiException {
        okhttp3.Call localVarCall = authorization202309ShopsGetValidateBeforeCall(xTtsAccessToken, contentType, null);
        Type localVarReturnType = new TypeToken<GetAuthorizedShopsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetAuthorizedShops (asynchronously)
     * Retrieves the list of shops that a seller has authorized for an app. Seller authorization is required before an app can access the data of a shop. Use this API to check which shops are currently authorized for an app and obtain the corresponding shop cipher for use as an input parameter in shop related APIs.  For more information about seller authorization, refer to [Seller authorization guide](https://partner.tiktokshop.com/docv2/page/678e3a344ddec3030b238fa0). Target seller: All
     *
     * @param xTtsAccessToken (required)
     * @param contentType     Allowed type: application/json (required)
     * @param _callback       The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call authorization202309ShopsGetAsync(String xTtsAccessToken, String contentType, final ApiCallback<GetAuthorizedShopsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorization202309ShopsGetValidateBeforeCall(xTtsAccessToken, contentType, _callback);
        Type localVarReturnType = new TypeToken<GetAuthorizedShopsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
